#include "stm32f4xx.h"

#define SENSOR_PORT GPIOA
#define SENSOR_PIN GPIO_PIN_0
#define LED_PORT GPIOB
#define LED_PIN GPIO_PIN_0

void GPIO_Config(void);
void ADC_Config(void);
void delay_ms(uint32_t ms);

int main(void)
{
    GPIO_Config();
    ADC_Config();

    while (1)
    {
        // Lance la conversion ADC
        ADC1->CR2 |= ADC_CR2_SWSTART;

        // Attend la fin de la conversion
        while ((ADC1->SR & ADC_SR_EOC) == 0);

        // Récupère la valeur de la conversion
        uint32_t sensorValue = ADC1->DR;

        if (sensorValue < 1000)
        {
            HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET); // Allume la LED
        }
        else
        {
            HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET); // Eteint la LED
        }

        delay_ms(100);
    }
}

void GPIO_Config(void)
{
    // Activation de l'horloge pour les ports A et B
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;

    // Configuration de la broche du capteur en entrée analogique
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    GPIO_InitStruct.Pin = SENSOR_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(SENSOR_PORT, &GPIO_InitStruct);

    // Configuration de la broche de la LED en sortie
    GPIO_InitStruct.Pin = LED_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
}

void ADC_Config(void)
{
    // Activation de l'horloge pour l'ADC1
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;

    // Configuration de l'ADC1 en mode mono-convertion et avec un cycle de conversion de 84 cycles
    ADC1->CR1 = 0;
    ADC1->CR2 = 0;
    ADC1->SQR1 = 0;
    ADC1->SQR2 = 0;
    ADC1->SQR3 = 0;
    ADC1->SMPR2 = ADC_SMPR2_SMP0_1 | ADC_SMPR2_SMP0_0;

    // Activation de l'ADC1
    ADC1->CR2 |= ADC_CR2_ADON;
}

void delay_ms(uint32_t ms)
{
    uint32_t delay = ms * 3360;
    while (delay--) {};
}
