
PokeBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007258  08007258  00017258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007684  08007684  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007684  08007684  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007684  08007684  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007684  08007684  00017684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007688  08007688  00017688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800768c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  200001e0  0800786c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  0800786c  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e471  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c17  00000000  00000000  0002e681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00030298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00030f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ea8f  00000000  00000000  00031b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f967  00000000  00000000  000505af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8918  00000000  00000000  0005ff16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011882e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046b4  00000000  00000000  00118880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007240 	.word	0x08007240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08007240 	.word	0x08007240

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	ed2d 8b02 	vpush	{d8}
 8000bae:	b092      	sub	sp, #72	; 0x48
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb2:	f000 fcf3 	bl	800159c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb6:	f000 f8a1 	bl	8000cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bba:	f000 f9ff 	bl	8000fbc <MX_GPIO_Init>
  MX_UART4_Init();
 8000bbe:	f000 f999 	bl	8000ef4 <MX_UART4_Init>
  MX_TIM1_Init();
 8000bc2:	f000 f8f5 	bl	8000db0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bc6:	f000 f947 	bl	8000e58 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000bca:	f000 f9c7 	bl	8000f5c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000bce:	4844      	ldr	r0, [pc, #272]	; (8000ce0 <main+0x138>)
 8000bd0:	f002 fcdc 	bl	800358c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 1);
  while (1)
  {
	  uint32_t start_time = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	647b      	str	r3, [r7, #68]	; 0x44
	  uint32_t end_time = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	643b      	str	r3, [r7, #64]	; 0x40
	  float elapsed_time = 0;
 8000bdc:	f04f 0300 	mov.w	r3, #0
 8000be0:	63fb      	str	r3, [r7, #60]	; 0x3c
	  char buffer[50];
	  float distance = 0;
 8000be2:	f04f 0300 	mov.w	r3, #0
 8000be6:	63bb      	str	r3, [r7, #56]	; 0x38


	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2102      	movs	r1, #2
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f000 ffd6 	bl	8001ba0 <HAL_GPIO_WritePin>
	  HAL_Delay(1); //ms
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f000 fd37 	bl	8001668 <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c02:	f000 ffcd 	bl	8001ba0 <HAL_GPIO_WritePin>

	  while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET);
 8000c06:	bf00      	nop
 8000c08:	2104      	movs	r1, #4
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0e:	f000 ffaf 	bl	8001b70 <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0f7      	beq.n	8000c08 <main+0x60>

	  HAL_TIM_Base_Start(&htim2);
 8000c18:	4832      	ldr	r0, [pc, #200]	; (8000ce4 <main+0x13c>)
 8000c1a:	f002 fc55 	bl	80034c8 <HAL_TIM_Base_Start>
	  start_time = __HAL_TIM_GET_COUNTER(&htim2);
 8000c1e:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <main+0x13c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c24:	647b      	str	r3, [r7, #68]	; 0x44

	  while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET);
 8000c26:	bf00      	nop
 8000c28:	2104      	movs	r1, #4
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2e:	f000 ff9f 	bl	8001b70 <HAL_GPIO_ReadPin>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d0f7      	beq.n	8000c28 <main+0x80>

	  end_time = __HAL_TIM_GET_COUNTER(&htim2);
 8000c38:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <main+0x13c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3e:	643b      	str	r3, [r7, #64]	; 0x40
	  elapsed_time = ((float) (end_time - start_time)) / ((float) HAL_RCC_GetPCLK1Freq() * 2);
 8000c40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	ee07 3a90 	vmov	s15, r3
 8000c4a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000c4e:	f002 f9ef 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 8000c52:	ee07 0a90 	vmov	s15, r0
 8000c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c5a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000c5e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000c62:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	  distance = 75 * sound_speed * elapsed_time;
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <main+0x140>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000cec <main+0x144>
 8000c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c74:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c7c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	  sprintf(buffer, "Distance: %f centimeters\n", distance);
 8000c80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c82:	f7ff fc61 	bl	8000548 <__aeabi_f2d>
 8000c86:	4602      	mov	r2, r0
 8000c88:	460b      	mov	r3, r1
 8000c8a:	1d38      	adds	r0, r7, #4
 8000c8c:	4918      	ldr	r1, [pc, #96]	; (8000cf0 <main+0x148>)
 8000c8e:	f004 f85f 	bl	8004d50 <siprintf>
	  HAL_UART_Transmit(&huart4, (unsigned char*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fa9b 	bl	80001d0 <strlen>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	1d39      	adds	r1, r7, #4
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca4:	4813      	ldr	r0, [pc, #76]	; (8000cf4 <main+0x14c>)
 8000ca6:	f002 ff9d 	bl	8003be4 <HAL_UART_Transmit>
	  //}

	  //HAL_Delay(100);
	  //HAL_UART_Transmit(&huart4, (unsigned char*) buffer, strlen(buffer), HAL_MAX_DELAY);

	  if (distance<10){
 8000caa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000cae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cba:	d506      	bpl.n	8000cca <main+0x122>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc2:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <main+0x150>)
 8000cc4:	f000 ff6c 	bl	8001ba0 <HAL_GPIO_WritePin>
 8000cc8:	e005      	b.n	8000cd6 <main+0x12e>
	  }
	  else {
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd0:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <main+0x150>)
 8000cd2:	f000 ff65 	bl	8001ba0 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(10);
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f000 fcc6 	bl	8001668 <HAL_Delay>
  {
 8000cdc:	e77a      	b.n	8000bd4 <main+0x2c>
 8000cde:	bf00      	nop
 8000ce0:	200001fc 	.word	0x200001fc
 8000ce4:	20000248 	.word	0x20000248
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	42960000 	.word	0x42960000
 8000cf0:	08007258 	.word	0x08007258
 8000cf4:	20000294 	.word	0x20000294
 8000cf8:	48001000 	.word	0x48001000

08000cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b09e      	sub	sp, #120	; 0x78
 8000d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d06:	2228      	movs	r2, #40	; 0x28
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f003 fbae 	bl	800446c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d20:	463b      	mov	r3, r7
 8000d22:	223c      	movs	r2, #60	; 0x3c
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f003 fba0 	bl	800446c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d30:	2301      	movs	r3, #1
 8000d32:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d34:	2310      	movs	r3, #16
 8000d36:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000d40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d44:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 ff40 	bl	8001bd0 <HAL_RCC_OscConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000d56:	f000 fa05 	bl	8001164 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f001 ff69 	bl	8002c4c <HAL_RCC_ClockConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d80:	f000 f9f0 	bl	8001164 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 8000d84:	f241 030a 	movw	r3, #4106	; 0x100a
 8000d88:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 f98d 	bl	80030b8 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000da4:	f000 f9de 	bl	8001164 <Error_Handler>
  }
}
 8000da8:	bf00      	nop
 8000daa:	3778      	adds	r7, #120	; 0x78
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000dd0:	4a20      	ldr	r2, [pc, #128]	; (8000e54 <MX_TIM1_Init+0xa4>)
 8000dd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000dd6:	f240 623f 	movw	r2, #1599	; 0x63f
 8000dda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000de4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000de8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dfc:	4814      	ldr	r0, [pc, #80]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000dfe:	f002 fb0b 	bl	8003418 <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000e08:	f000 f9ac 	bl	8001164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4619      	mov	r1, r3
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000e1a:	f002 fc21 	bl	8003660 <HAL_TIM_ConfigClockSource>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e24:	f000 f99e 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000e3a:	f002 fe05 	bl	8003a48 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e44:	f000 f98e 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200001fc 	.word	0x200001fc
 8000e54:	40012c00 	.word	0x40012c00

08000e58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <MX_TIM2_Init+0x98>)
 8000e78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <MX_TIM2_Init+0x98>)
 8000e80:	2247      	movs	r2, #71	; 0x47
 8000e82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <MX_TIM2_Init+0x98>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <MX_TIM2_Init+0x98>)
 8000e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MX_TIM2_Init+0x98>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MX_TIM2_Init+0x98>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e9e:	4814      	ldr	r0, [pc, #80]	; (8000ef0 <MX_TIM2_Init+0x98>)
 8000ea0:	f002 faba 	bl	8003418 <HAL_TIM_Base_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000eaa:	f000 f95b 	bl	8001164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <MX_TIM2_Init+0x98>)
 8000ebc:	f002 fbd0 	bl	8003660 <HAL_TIM_ConfigClockSource>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ec6:	f000 f94d 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <MX_TIM2_Init+0x98>)
 8000ed8:	f002 fdb6 	bl	8003a48 <HAL_TIMEx_MasterConfigSynchronization>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ee2:	f000 f93f 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	3720      	adds	r7, #32
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000248 	.word	0x20000248

08000ef4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_UART4_Init+0x60>)
 8000efa:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <MX_UART4_Init+0x64>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_UART4_Init+0x60>)
 8000f00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <MX_UART4_Init+0x60>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_UART4_Init+0x60>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <MX_UART4_Init+0x60>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_UART4_Init+0x60>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <MX_UART4_Init+0x60>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_UART4_Init+0x60>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <MX_UART4_Init+0x60>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_UART4_Init+0x60>)
 8000f32:	2210      	movs	r2, #16
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <MX_UART4_Init+0x60>)
 8000f38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f3c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_UART4_Init+0x60>)
 8000f40:	f002 fe02 	bl	8003b48 <HAL_UART_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 8000f4a:	f000 f90b 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000294 	.word	0x20000294
 8000f58:	40004c00 	.word	0x40004c00

08000f5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f62:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <MX_USART2_UART_Init+0x5c>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000fa0:	f002 fdd2 	bl	8003b48 <HAL_UART_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000faa:	f000 f8db 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000318 	.word	0x20000318
 8000fb8:	40004400 	.word	0x40004400

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd2:	4b61      	ldr	r3, [pc, #388]	; (8001158 <MX_GPIO_Init+0x19c>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	4a60      	ldr	r2, [pc, #384]	; (8001158 <MX_GPIO_Init+0x19c>)
 8000fd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fdc:	6153      	str	r3, [r2, #20]
 8000fde:	4b5e      	ldr	r3, [pc, #376]	; (8001158 <MX_GPIO_Init+0x19c>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe6:	61bb      	str	r3, [r7, #24]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	4b5b      	ldr	r3, [pc, #364]	; (8001158 <MX_GPIO_Init+0x19c>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	4a5a      	ldr	r2, [pc, #360]	; (8001158 <MX_GPIO_Init+0x19c>)
 8000ff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ff4:	6153      	str	r3, [r2, #20]
 8000ff6:	4b58      	ldr	r3, [pc, #352]	; (8001158 <MX_GPIO_Init+0x19c>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001002:	4b55      	ldr	r3, [pc, #340]	; (8001158 <MX_GPIO_Init+0x19c>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a54      	ldr	r2, [pc, #336]	; (8001158 <MX_GPIO_Init+0x19c>)
 8001008:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b52      	ldr	r3, [pc, #328]	; (8001158 <MX_GPIO_Init+0x19c>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b4f      	ldr	r3, [pc, #316]	; (8001158 <MX_GPIO_Init+0x19c>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	4a4e      	ldr	r2, [pc, #312]	; (8001158 <MX_GPIO_Init+0x19c>)
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	6153      	str	r3, [r2, #20]
 8001026:	4b4c      	ldr	r3, [pc, #304]	; (8001158 <MX_GPIO_Init+0x19c>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	4b49      	ldr	r3, [pc, #292]	; (8001158 <MX_GPIO_Init+0x19c>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a48      	ldr	r2, [pc, #288]	; (8001158 <MX_GPIO_Init+0x19c>)
 8001038:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800103c:	6153      	str	r3, [r2, #20]
 800103e:	4b46      	ldr	r3, [pc, #280]	; (8001158 <MX_GPIO_Init+0x19c>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	4b43      	ldr	r3, [pc, #268]	; (8001158 <MX_GPIO_Init+0x19c>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	4a42      	ldr	r2, [pc, #264]	; (8001158 <MX_GPIO_Init+0x19c>)
 8001050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001054:	6153      	str	r3, [r2, #20]
 8001056:	4b40      	ldr	r3, [pc, #256]	; (8001158 <MX_GPIO_Init+0x19c>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001062:	2200      	movs	r2, #0
 8001064:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001068:	483c      	ldr	r0, [pc, #240]	; (800115c <MX_GPIO_Init+0x1a0>)
 800106a:	f000 fd99 	bl	8001ba0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2102      	movs	r1, #2
 8001072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001076:	f000 fd93 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800107a:	2337      	movs	r3, #55	; 0x37
 800107c:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800107e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	4833      	ldr	r0, [pc, #204]	; (800115c <MX_GPIO_Init+0x1a0>)
 8001090:	f000 fbf4 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001094:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001098:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	482b      	ldr	r0, [pc, #172]	; (800115c <MX_GPIO_Init+0x1a0>)
 80010ae:	f000 fbe5 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin ECHO_Pin */
  GPIO_InitStruct.Pin = B1_Pin|ECHO_Pin;
 80010b2:	2305      	movs	r3, #5
 80010b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c8:	f000 fbd8 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f000 fbc9 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80010ea:	23e0      	movs	r3, #224	; 0xe0
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010fa:	2305      	movs	r3, #5
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f000 fbb8 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800110c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800111e:	230e      	movs	r3, #14
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f000 fba6 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001130:	23c0      	movs	r3, #192	; 0xc0
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001134:	2312      	movs	r3, #18
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001138:	2301      	movs	r3, #1
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001140:	2304      	movs	r3, #4
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_GPIO_Init+0x1a4>)
 800114c:	f000 fb96 	bl	800187c <HAL_GPIO_Init>

}
 8001150:	bf00      	nop
 8001152:	3730      	adds	r7, #48	; 0x30
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40021000 	.word	0x40021000
 800115c:	48001000 	.word	0x48001000
 8001160:	48000400 	.word	0x48000400

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116c:	e7fe      	b.n	800116c <Error_Handler+0x8>
	...

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <HAL_MspInit+0x44>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <HAL_MspInit+0x44>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6193      	str	r3, [r2, #24]
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_MspInit+0x44>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_MspInit+0x44>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <HAL_MspInit+0x44>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	61d3      	str	r3, [r2, #28]
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_MspInit+0x44>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011a6:	2007      	movs	r0, #7
 80011a8:	f000 fb34 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a13      	ldr	r2, [pc, #76]	; (8001214 <HAL_TIM_Base_MspInit+0x5c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d10c      	bne.n	80011e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HAL_TIM_Base_MspInit+0x60>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_TIM_Base_MspInit+0x60>)
 80011d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011d4:	6193      	str	r3, [r2, #24]
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_TIM_Base_MspInit+0x60>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011e2:	e010      	b.n	8001206 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011ec:	d10b      	bne.n	8001206 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_TIM_Base_MspInit+0x60>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <HAL_TIM_Base_MspInit+0x60>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	61d3      	str	r3, [r2, #28]
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_TIM_Base_MspInit+0x60>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40012c00 	.word	0x40012c00
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a3d      	ldr	r2, [pc, #244]	; (8001330 <HAL_UART_MspInit+0x114>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d129      	bne.n	8001292 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <HAL_UART_MspInit+0x118>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	4a3c      	ldr	r2, [pc, #240]	; (8001334 <HAL_UART_MspInit+0x118>)
 8001244:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001248:	61d3      	str	r3, [r2, #28]
 800124a:	4b3a      	ldr	r3, [pc, #232]	; (8001334 <HAL_UART_MspInit+0x118>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	4b37      	ldr	r3, [pc, #220]	; (8001334 <HAL_UART_MspInit+0x118>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	4a36      	ldr	r2, [pc, #216]	; (8001334 <HAL_UART_MspInit+0x118>)
 800125c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001260:	6153      	str	r3, [r2, #20]
 8001262:	4b34      	ldr	r3, [pc, #208]	; (8001334 <HAL_UART_MspInit+0x118>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800126e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001280:	2305      	movs	r3, #5
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	482b      	ldr	r0, [pc, #172]	; (8001338 <HAL_UART_MspInit+0x11c>)
 800128c:	f000 faf6 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001290:	e049      	b.n	8001326 <HAL_UART_MspInit+0x10a>
  else if(huart->Instance==USART2)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a29      	ldr	r2, [pc, #164]	; (800133c <HAL_UART_MspInit+0x120>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d144      	bne.n	8001326 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800129c:	4b25      	ldr	r3, [pc, #148]	; (8001334 <HAL_UART_MspInit+0x118>)
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	4a24      	ldr	r2, [pc, #144]	; (8001334 <HAL_UART_MspInit+0x118>)
 80012a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a6:	61d3      	str	r3, [r2, #28]
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <HAL_UART_MspInit+0x118>)
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <HAL_UART_MspInit+0x118>)
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	4a1e      	ldr	r2, [pc, #120]	; (8001334 <HAL_UART_MspInit+0x118>)
 80012ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012be:	6153      	str	r3, [r2, #20]
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_UART_MspInit+0x118>)
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_UART_MspInit+0x118>)
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	4a18      	ldr	r2, [pc, #96]	; (8001334 <HAL_UART_MspInit+0x118>)
 80012d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012d6:	6153      	str	r3, [r2, #20]
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_UART_MspInit+0x118>)
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012e4:	2308      	movs	r3, #8
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f4:	2307      	movs	r3, #7
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f000 fabb 	bl	800187c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001306:	2320      	movs	r3, #32
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001316:	2307      	movs	r3, #7
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	4807      	ldr	r0, [pc, #28]	; (8001340 <HAL_UART_MspInit+0x124>)
 8001322:	f000 faab 	bl	800187c <HAL_GPIO_Init>
}
 8001326:	bf00      	nop
 8001328:	3730      	adds	r7, #48	; 0x30
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40004c00 	.word	0x40004c00
 8001334:	40021000 	.word	0x40021000
 8001338:	48000800 	.word	0x48000800
 800133c:	40004400 	.word	0x40004400
 8001340:	48000c00 	.word	0x48000c00

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler+0x4>

0800134a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler+0x4>

08001356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <UsageFault_Handler+0x4>

08001362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001390:	f000 f94a 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
	return 1;
 800139c:	2301      	movs	r3, #1
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_kill>:

int _kill(int pid, int sig)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013b2:	f003 f831 	bl	8004418 <__errno>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2216      	movs	r2, #22
 80013ba:	601a      	str	r2, [r3, #0]
	return -1;
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_exit>:

void _exit (int status)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ffe7 	bl	80013a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013da:	e7fe      	b.n	80013da <_exit+0x12>

080013dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	e00a      	b.n	8001404 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013ee:	f3af 8000 	nop.w
 80013f2:	4601      	mov	r1, r0
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	60ba      	str	r2, [r7, #8]
 80013fa:	b2ca      	uxtb	r2, r1
 80013fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3301      	adds	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	429a      	cmp	r2, r3
 800140a:	dbf0      	blt.n	80013ee <_read+0x12>
	}

return len;
 800140c:	687b      	ldr	r3, [r7, #4]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	e009      	b.n	800143c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	60ba      	str	r2, [r7, #8]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	dbf1      	blt.n	8001428 <_write+0x12>
	}
	return len;
 8001444:	687b      	ldr	r3, [r7, #4]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_close>:

int _close(int file)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return -1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001476:	605a      	str	r2, [r3, #4]
	return 0;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <_isatty>:

int _isatty(int file)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
	return 1;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
	return 0;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c0:	4a14      	ldr	r2, [pc, #80]	; (8001514 <_sbrk+0x5c>)
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <_sbrk+0x60>)
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <_sbrk+0x64>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <_sbrk+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d207      	bcs.n	80014f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e8:	f002 ff96 	bl	8004418 <__errno>
 80014ec:	4603      	mov	r3, r0
 80014ee:	220c      	movs	r2, #12
 80014f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	e009      	b.n	800150c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <_sbrk+0x64>)
 8001508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	2000a000 	.word	0x2000a000
 8001518:	00000400 	.word	0x00000400
 800151c:	2000039c 	.word	0x2000039c
 8001520:	200003b8 	.word	0x200003b8

08001524 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <SystemInit+0x20>)
 800152a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <SystemInit+0x20>)
 8001530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001580 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800154c:	480d      	ldr	r0, [pc, #52]	; (8001584 <LoopForever+0x6>)
  ldr r1, =_edata
 800154e:	490e      	ldr	r1, [pc, #56]	; (8001588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <LoopForever+0xe>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001564:	4c0b      	ldr	r4, [pc, #44]	; (8001594 <LoopForever+0x16>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001572:	f7ff ffd7 	bl	8001524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001576:	f002 ff55 	bl	8004424 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800157a:	f7ff fb15 	bl	8000ba8 <main>

0800157e <LoopForever>:

LoopForever:
    b LoopForever
 800157e:	e7fe      	b.n	800157e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001580:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001588:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800158c:	0800768c 	.word	0x0800768c
  ldr r2, =_sbss
 8001590:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001594:	200003b4 	.word	0x200003b4

08001598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC1_2_IRQHandler>
	...

0800159c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_Init+0x28>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <HAL_Init+0x28>)
 80015a6:	f043 0310 	orr.w	r3, r3, #16
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f000 f931 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f000 f808 	bl	80015c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b8:	f7ff fdda 	bl	8001170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40022000 	.word	0x40022000

080015c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0x54>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_InitTick+0x58>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f93b 	bl	8001862 <HAL_SYSTICK_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00e      	b.n	8001614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d80a      	bhi.n	8001612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f000 f911 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <HAL_InitTick+0x5c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000004 	.word	0x20000004
 8001620:	2000000c 	.word	0x2000000c
 8001624:	20000008 	.word	0x20000008

08001628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	2000000c 	.word	0x2000000c
 800164c:	200003a0 	.word	0x200003a0

08001650 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;  
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	200003a0 	.word	0x200003a0

08001668 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001670:	f7ff ffee 	bl	8001650 <HAL_GetTick>
 8001674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001680:	d005      	beq.n	800168e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_Delay+0x44>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800168e:	bf00      	nop
 8001690:	f7ff ffde 	bl	8001650 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	429a      	cmp	r2, r3
 800169e:	d8f7      	bhi.n	8001690 <HAL_Delay+0x28>
  {
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2000000c 	.word	0x2000000c

080016b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <__NVIC_GetPriorityGrouping+0x18>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0307 	and.w	r3, r3, #7
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff47 	bl	80016b0 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff5c 	bl	80016f8 <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff8e 	bl	8001768 <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffb0 	bl	80017d0 <SysTick_Config>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188a:	e154      	b.n	8001b36 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2101      	movs	r1, #1
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8146 	beq.w	8001b30 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d005      	beq.n	80018bc <HAL_GPIO_Init+0x40>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d130      	bne.n	800191e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f2:	2201      	movs	r2, #1
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	f003 0201 	and.w	r2, r3, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b03      	cmp	r3, #3
 8001928:	d017      	beq.n	800195a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d123      	bne.n	80019ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	6939      	ldr	r1, [r7, #16]
 80019aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2203      	movs	r2, #3
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0203 	and.w	r2, r3, #3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 80a0 	beq.w	8001b30 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f0:	4b58      	ldr	r3, [pc, #352]	; (8001b54 <HAL_GPIO_Init+0x2d8>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a57      	ldr	r2, [pc, #348]	; (8001b54 <HAL_GPIO_Init+0x2d8>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b55      	ldr	r3, [pc, #340]	; (8001b54 <HAL_GPIO_Init+0x2d8>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a08:	4a53      	ldr	r2, [pc, #332]	; (8001b58 <HAL_GPIO_Init+0x2dc>)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a32:	d019      	beq.n	8001a68 <HAL_GPIO_Init+0x1ec>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a49      	ldr	r2, [pc, #292]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d013      	beq.n	8001a64 <HAL_GPIO_Init+0x1e8>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a48      	ldr	r2, [pc, #288]	; (8001b60 <HAL_GPIO_Init+0x2e4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d00d      	beq.n	8001a60 <HAL_GPIO_Init+0x1e4>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a47      	ldr	r2, [pc, #284]	; (8001b64 <HAL_GPIO_Init+0x2e8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d007      	beq.n	8001a5c <HAL_GPIO_Init+0x1e0>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a46      	ldr	r2, [pc, #280]	; (8001b68 <HAL_GPIO_Init+0x2ec>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <HAL_GPIO_Init+0x1dc>
 8001a54:	2304      	movs	r3, #4
 8001a56:	e008      	b.n	8001a6a <HAL_GPIO_Init+0x1ee>
 8001a58:	2305      	movs	r3, #5
 8001a5a:	e006      	b.n	8001a6a <HAL_GPIO_Init+0x1ee>
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e004      	b.n	8001a6a <HAL_GPIO_Init+0x1ee>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e002      	b.n	8001a6a <HAL_GPIO_Init+0x1ee>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_GPIO_Init+0x1ee>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	f002 0203 	and.w	r2, r2, #3
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	4093      	lsls	r3, r2
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a7a:	4937      	ldr	r1, [pc, #220]	; (8001b58 <HAL_GPIO_Init+0x2dc>)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a88:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aac:	4a2f      	ldr	r2, [pc, #188]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ad6:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001adc:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b00:	4a1a      	ldr	r2, [pc, #104]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b2a:	4a10      	ldr	r2, [pc, #64]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f47f aea3 	bne.w	800188c <HAL_GPIO_Init+0x10>
  }
}
 8001b46:	bf00      	nop
 8001b48:	bf00      	nop
 8001b4a:	371c      	adds	r7, #28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	48000400 	.word	0x48000400
 8001b60:	48000800 	.word	0x48000800
 8001b64:	48000c00 	.word	0x48000c00
 8001b68:	48001000 	.word	0x48001000
 8001b6c:	40010400 	.word	0x40010400

08001b70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e001      	b.n	8001b92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001be0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f001 b823 	b.w	8002c3c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 817d 	beq.w	8001f06 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c0c:	4bbc      	ldr	r3, [pc, #752]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d00c      	beq.n	8001c32 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c18:	4bb9      	ldr	r3, [pc, #740]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d15c      	bne.n	8001cde <HAL_RCC_OscConfig+0x10e>
 8001c24:	4bb6      	ldr	r3, [pc, #728]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c30:	d155      	bne.n	8001cde <HAL_RCC_OscConfig+0x10e>
 8001c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c36:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c46:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	095b      	lsrs	r3, r3, #5
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d102      	bne.n	8001c64 <HAL_RCC_OscConfig+0x94>
 8001c5e:	4ba8      	ldr	r3, [pc, #672]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	e015      	b.n	8001c90 <HAL_RCC_OscConfig+0xc0>
 8001c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c68:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c80:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001c84:	fa93 f3a3 	rbit	r3, r3
 8001c88:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001c8c:	4b9c      	ldr	r3, [pc, #624]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c94:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001c98:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c9c:	fa92 f2a2 	rbit	r2, r2
 8001ca0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001ca4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001ca8:	fab2 f282 	clz	r2, r2
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f042 0220 	orr.w	r2, r2, #32
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	f002 021f 	and.w	r2, r2, #31
 8001cb8:	2101      	movs	r1, #1
 8001cba:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 811f 	beq.w	8001f04 <HAL_RCC_OscConfig+0x334>
 8001cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f040 8116 	bne.w	8001f04 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f000 bfaf 	b.w	8002c3c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x12e>
 8001cf0:	4b83      	ldr	r3, [pc, #524]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a82      	ldr	r2, [pc, #520]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e036      	b.n	8001d6c <HAL_RCC_OscConfig+0x19c>
 8001cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x158>
 8001d0e:	4b7c      	ldr	r3, [pc, #496]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a7b      	ldr	r2, [pc, #492]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4b79      	ldr	r3, [pc, #484]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a78      	ldr	r2, [pc, #480]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e021      	b.n	8001d6c <HAL_RCC_OscConfig+0x19c>
 8001d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x184>
 8001d3a:	4b71      	ldr	r3, [pc, #452]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a70      	ldr	r2, [pc, #448]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b6e      	ldr	r3, [pc, #440]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a6d      	ldr	r2, [pc, #436]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e00b      	b.n	8001d6c <HAL_RCC_OscConfig+0x19c>
 8001d54:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a69      	ldr	r2, [pc, #420]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	4b67      	ldr	r3, [pc, #412]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a66      	ldr	r2, [pc, #408]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d6c:	4b64      	ldr	r3, [pc, #400]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	f023 020f 	bic.w	r2, r3, #15
 8001d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	495f      	ldr	r1, [pc, #380]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d059      	beq.n	8001e4a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7ff fc5b 	bl	8001650 <HAL_GetTick>
 8001d9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff fc56 	bl	8001650 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b64      	cmp	r3, #100	; 0x64
 8001dae:	d902      	bls.n	8001db6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	f000 bf43 	b.w	8002c3c <HAL_RCC_OscConfig+0x106c>
 8001db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001dca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	095b      	lsrs	r3, r3, #5
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d102      	bne.n	8001de8 <HAL_RCC_OscConfig+0x218>
 8001de2:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	e015      	b.n	8001e14 <HAL_RCC_OscConfig+0x244>
 8001de8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dec:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e00:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001e04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001e10:	4b3b      	ldr	r3, [pc, #236]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e18:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001e1c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e20:	fa92 f2a2 	rbit	r2, r2
 8001e24:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001e28:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001e2c:	fab2 f282 	clz	r2, r2
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	f042 0220 	orr.w	r2, r2, #32
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	f002 021f 	and.w	r2, r2, #31
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0ab      	beq.n	8001da0 <HAL_RCC_OscConfig+0x1d0>
 8001e48:	e05d      	b.n	8001f06 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fc01 	bl	8001650 <HAL_GetTick>
 8001e4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff fbfc 	bl	8001650 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b64      	cmp	r3, #100	; 0x64
 8001e62:	d902      	bls.n	8001e6a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	f000 bee9 	b.w	8002c3c <HAL_RCC_OscConfig+0x106c>
 8001e6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e6e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001e7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	095b      	lsrs	r3, r3, #5
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d102      	bne.n	8001e9c <HAL_RCC_OscConfig+0x2cc>
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	e015      	b.n	8001ec8 <HAL_RCC_OscConfig+0x2f8>
 8001e9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ea0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eb4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001eb8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ecc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001ed0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ed4:	fa92 f2a2 	rbit	r2, r2
 8001ed8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001edc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ee0:	fab2 f282 	clz	r2, r2
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	f042 0220 	orr.w	r2, r2, #32
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	f002 021f 	and.w	r2, r2, #31
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1ab      	bne.n	8001e54 <HAL_RCC_OscConfig+0x284>
 8001efc:	e003      	b.n	8001f06 <HAL_RCC_OscConfig+0x336>
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 817d 	beq.w	8002216 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f1c:	4ba6      	ldr	r3, [pc, #664]	; (80021b8 <HAL_RCC_OscConfig+0x5e8>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00b      	beq.n	8001f40 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f28:	4ba3      	ldr	r3, [pc, #652]	; (80021b8 <HAL_RCC_OscConfig+0x5e8>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d172      	bne.n	800201a <HAL_RCC_OscConfig+0x44a>
 8001f34:	4ba0      	ldr	r3, [pc, #640]	; (80021b8 <HAL_RCC_OscConfig+0x5e8>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d16c      	bne.n	800201a <HAL_RCC_OscConfig+0x44a>
 8001f40:	2302      	movs	r3, #2
 8001f42:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001f52:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	095b      	lsrs	r3, r3, #5
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d102      	bne.n	8001f70 <HAL_RCC_OscConfig+0x3a0>
 8001f6a:	4b93      	ldr	r3, [pc, #588]	; (80021b8 <HAL_RCC_OscConfig+0x5e8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	e013      	b.n	8001f98 <HAL_RCC_OscConfig+0x3c8>
 8001f70:	2302      	movs	r3, #2
 8001f72:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f82:	2302      	movs	r3, #2
 8001f84:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001f94:	4b88      	ldr	r3, [pc, #544]	; (80021b8 <HAL_RCC_OscConfig+0x5e8>)
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	2202      	movs	r2, #2
 8001f9a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001f9e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001fa2:	fa92 f2a2 	rbit	r2, r2
 8001fa6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001faa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001fae:	fab2 f282 	clz	r2, r2
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	f042 0220 	orr.w	r2, r2, #32
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f002 021f 	and.w	r2, r2, #31
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x410>
 8001fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d002      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f000 be2e 	b.w	8002c3c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe0:	4b75      	ldr	r3, [pc, #468]	; (80021b8 <HAL_RCC_OscConfig+0x5e8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	21f8      	movs	r1, #248	; 0xf8
 8001ff6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ffe:	fa91 f1a1 	rbit	r1, r1
 8002002:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002006:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800200a:	fab1 f181 	clz	r1, r1
 800200e:	b2c9      	uxtb	r1, r1
 8002010:	408b      	lsls	r3, r1
 8002012:	4969      	ldr	r1, [pc, #420]	; (80021b8 <HAL_RCC_OscConfig+0x5e8>)
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002018:	e0fd      	b.n	8002216 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800201a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8088 	beq.w	800213c <HAL_RCC_OscConfig+0x56c>
 800202c:	2301      	movs	r3, #1
 800202e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800203e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800204c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	461a      	mov	r2, r3
 8002054:	2301      	movs	r3, #1
 8002056:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff fafa 	bl	8001650 <HAL_GetTick>
 800205c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002062:	f7ff faf5 	bl	8001650 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d902      	bls.n	8002078 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	f000 bde2 	b.w	8002c3c <HAL_RCC_OscConfig+0x106c>
 8002078:	2302      	movs	r3, #2
 800207a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800208a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d102      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4d8>
 80020a2:	4b45      	ldr	r3, [pc, #276]	; (80021b8 <HAL_RCC_OscConfig+0x5e8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	e013      	b.n	80020d0 <HAL_RCC_OscConfig+0x500>
 80020a8:	2302      	movs	r3, #2
 80020aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80020ba:	2302      	movs	r3, #2
 80020bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80020c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80020cc:	4b3a      	ldr	r3, [pc, #232]	; (80021b8 <HAL_RCC_OscConfig+0x5e8>)
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	2202      	movs	r2, #2
 80020d2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80020d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80020da:	fa92 f2a2 	rbit	r2, r2
 80020de:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80020e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80020e6:	fab2 f282 	clz	r2, r2
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	f042 0220 	orr.w	r2, r2, #32
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	f002 021f 	and.w	r2, r2, #31
 80020f6:	2101      	movs	r1, #1
 80020f8:	fa01 f202 	lsl.w	r2, r1, r2
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0af      	beq.n	8002062 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002102:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_RCC_OscConfig+0x5e8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800210a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	21f8      	movs	r1, #248	; 0xf8
 8002118:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002120:	fa91 f1a1 	rbit	r1, r1
 8002124:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002128:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800212c:	fab1 f181 	clz	r1, r1
 8002130:	b2c9      	uxtb	r1, r1
 8002132:	408b      	lsls	r3, r1
 8002134:	4920      	ldr	r1, [pc, #128]	; (80021b8 <HAL_RCC_OscConfig+0x5e8>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
 800213a:	e06c      	b.n	8002216 <HAL_RCC_OscConfig+0x646>
 800213c:	2301      	movs	r3, #1
 800213e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800214e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800215c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	461a      	mov	r2, r3
 8002164:	2300      	movs	r3, #0
 8002166:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7ff fa72 	bl	8001650 <HAL_GetTick>
 800216c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002172:	f7ff fa6d 	bl	8001650 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d902      	bls.n	8002188 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	f000 bd5a 	b.w	8002c3c <HAL_RCC_OscConfig+0x106c>
 8002188:	2302      	movs	r3, #2
 800218a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800219a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219e:	fab3 f383 	clz	r3, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d104      	bne.n	80021bc <HAL_RCC_OscConfig+0x5ec>
 80021b2:	4b01      	ldr	r3, [pc, #4]	; (80021b8 <HAL_RCC_OscConfig+0x5e8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	e015      	b.n	80021e4 <HAL_RCC_OscConfig+0x614>
 80021b8:	40021000 	.word	0x40021000
 80021bc:	2302      	movs	r3, #2
 80021be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80021ce:	2302      	movs	r3, #2
 80021d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80021d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80021e0:	4bc8      	ldr	r3, [pc, #800]	; (8002504 <HAL_RCC_OscConfig+0x934>)
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	2202      	movs	r2, #2
 80021e6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80021ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80021ee:	fa92 f2a2 	rbit	r2, r2
 80021f2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80021f6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80021fa:	fab2 f282 	clz	r2, r2
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	f042 0220 	orr.w	r2, r2, #32
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	f002 021f 	and.w	r2, r2, #31
 800220a:	2101      	movs	r1, #1
 800220c:	fa01 f202 	lsl.w	r2, r1, r2
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1ad      	bne.n	8002172 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8110 	beq.w	800244c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800222c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002230:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d079      	beq.n	8002330 <HAL_RCC_OscConfig+0x760>
 800223c:	2301      	movs	r3, #1
 800223e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800224e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	4bab      	ldr	r3, [pc, #684]	; (8002508 <HAL_RCC_OscConfig+0x938>)
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	461a      	mov	r2, r3
 8002262:	2301      	movs	r3, #1
 8002264:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002266:	f7ff f9f3 	bl	8001650 <HAL_GetTick>
 800226a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226e:	e00a      	b.n	8002286 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002270:	f7ff f9ee 	bl	8001650 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d902      	bls.n	8002286 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	f000 bcdb 	b.w	8002c3c <HAL_RCC_OscConfig+0x106c>
 8002286:	2302      	movs	r3, #2
 8002288:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022a0:	2202      	movs	r2, #2
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	fa93 f2a3 	rbit	r2, r3
 80022b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022c4:	2202      	movs	r2, #2
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	fa93 f2a3 	rbit	r2, r3
 80022d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e0:	4b88      	ldr	r3, [pc, #544]	; (8002504 <HAL_RCC_OscConfig+0x934>)
 80022e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022ec:	2102      	movs	r1, #2
 80022ee:	6019      	str	r1, [r3, #0]
 80022f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fa93 f1a3 	rbit	r1, r3
 80022fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002302:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002306:	6019      	str	r1, [r3, #0]
  return result;
 8002308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800231c:	b2db      	uxtb	r3, r3
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	2101      	movs	r1, #1
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	4013      	ands	r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0a0      	beq.n	8002270 <HAL_RCC_OscConfig+0x6a0>
 800232e:	e08d      	b.n	800244c <HAL_RCC_OscConfig+0x87c>
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002338:	2201      	movs	r2, #1
 800233a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002340:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	fa93 f2a3 	rbit	r2, r3
 800234a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002352:	601a      	str	r2, [r3, #0]
  return result;
 8002354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002358:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800235c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	4b68      	ldr	r3, [pc, #416]	; (8002508 <HAL_RCC_OscConfig+0x938>)
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	461a      	mov	r2, r3
 800236e:	2300      	movs	r3, #0
 8002370:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002372:	f7ff f96d 	bl	8001650 <HAL_GetTick>
 8002376:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237a:	e00a      	b.n	8002392 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237c:	f7ff f968 	bl	8001650 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d902      	bls.n	8002392 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	f000 bc55 	b.w	8002c3c <HAL_RCC_OscConfig+0x106c>
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800239a:	2202      	movs	r2, #2
 800239c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	fa93 f2a3 	rbit	r2, r3
 80023ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023be:	2202      	movs	r2, #2
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	fa93 f2a3 	rbit	r2, r3
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023e2:	2202      	movs	r2, #2
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	fa93 f2a3 	rbit	r2, r3
 80023f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80023fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fe:	4b41      	ldr	r3, [pc, #260]	; (8002504 <HAL_RCC_OscConfig+0x934>)
 8002400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002406:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800240a:	2102      	movs	r1, #2
 800240c:	6019      	str	r1, [r3, #0]
 800240e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002412:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	fa93 f1a3 	rbit	r1, r3
 800241c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002420:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002424:	6019      	str	r1, [r3, #0]
  return result;
 8002426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800243a:	b2db      	uxtb	r3, r3
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2101      	movs	r1, #1
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d197      	bne.n	800237c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800244c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002450:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 81a1 	beq.w	80027a4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002468:	4b26      	ldr	r3, [pc, #152]	; (8002504 <HAL_RCC_OscConfig+0x934>)
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d116      	bne.n	80024a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002474:	4b23      	ldr	r3, [pc, #140]	; (8002504 <HAL_RCC_OscConfig+0x934>)
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	4a22      	ldr	r2, [pc, #136]	; (8002504 <HAL_RCC_OscConfig+0x934>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247e:	61d3      	str	r3, [r2, #28]
 8002480:	4b20      	ldr	r3, [pc, #128]	; (8002504 <HAL_RCC_OscConfig+0x934>)
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002496:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800249a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800249c:	2301      	movs	r3, #1
 800249e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <HAL_RCC_OscConfig+0x93c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d11a      	bne.n	80024e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <HAL_RCC_OscConfig+0x93c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a16      	ldr	r2, [pc, #88]	; (800250c <HAL_RCC_OscConfig+0x93c>)
 80024b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ba:	f7ff f8c9 	bl	8001650 <HAL_GetTick>
 80024be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c2:	e009      	b.n	80024d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c4:	f7ff f8c4 	bl	8001650 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b64      	cmp	r3, #100	; 0x64
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e3b1      	b.n	8002c3c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <HAL_RCC_OscConfig+0x93c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0ef      	beq.n	80024c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d10d      	bne.n	8002510 <HAL_RCC_OscConfig+0x940>
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <HAL_RCC_OscConfig+0x934>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a02      	ldr	r2, [pc, #8]	; (8002504 <HAL_RCC_OscConfig+0x934>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	e03c      	b.n	800257c <HAL_RCC_OscConfig+0x9ac>
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	10908120 	.word	0x10908120
 800250c:	40007000 	.word	0x40007000
 8002510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002514:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10c      	bne.n	800253a <HAL_RCC_OscConfig+0x96a>
 8002520:	4bc1      	ldr	r3, [pc, #772]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4ac0      	ldr	r2, [pc, #768]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	6213      	str	r3, [r2, #32]
 800252c:	4bbe      	ldr	r3, [pc, #760]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4abd      	ldr	r2, [pc, #756]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 8002532:	f023 0304 	bic.w	r3, r3, #4
 8002536:	6213      	str	r3, [r2, #32]
 8002538:	e020      	b.n	800257c <HAL_RCC_OscConfig+0x9ac>
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b05      	cmp	r3, #5
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0x994>
 800254a:	4bb7      	ldr	r3, [pc, #732]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4ab6      	ldr	r2, [pc, #728]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	6213      	str	r3, [r2, #32]
 8002556:	4bb4      	ldr	r3, [pc, #720]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4ab3      	ldr	r2, [pc, #716]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6213      	str	r3, [r2, #32]
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0x9ac>
 8002564:	4bb0      	ldr	r3, [pc, #704]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4aaf      	ldr	r2, [pc, #700]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	6213      	str	r3, [r2, #32]
 8002570:	4bad      	ldr	r3, [pc, #692]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4aac      	ldr	r2, [pc, #688]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 8002576:	f023 0304 	bic.w	r3, r3, #4
 800257a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002580:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8081 	beq.w	8002690 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258e:	f7ff f85f 	bl	8001650 <HAL_GetTick>
 8002592:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002596:	e00b      	b.n	80025b0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002598:	f7ff f85a 	bl	8001650 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e345      	b.n	8002c3c <HAL_RCC_OscConfig+0x106c>
 80025b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025b8:	2202      	movs	r2, #2
 80025ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	fa93 f2a3 	rbit	r2, r3
 80025ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025dc:	2202      	movs	r2, #2
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	fa93 f2a3 	rbit	r2, r3
 80025ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025f6:	601a      	str	r2, [r3, #0]
  return result;
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002600:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d102      	bne.n	800261c <HAL_RCC_OscConfig+0xa4c>
 8002616:	4b84      	ldr	r3, [pc, #528]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	e013      	b.n	8002644 <HAL_RCC_OscConfig+0xa74>
 800261c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002620:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002624:	2202      	movs	r2, #2
 8002626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	fa93 f2a3 	rbit	r2, r3
 8002636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	4b79      	ldr	r3, [pc, #484]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002648:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800264c:	2102      	movs	r1, #2
 800264e:	6011      	str	r1, [r2, #0]
 8002650:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002654:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	fa92 f1a2 	rbit	r1, r2
 800265e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002662:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002666:	6011      	str	r1, [r2, #0]
  return result;
 8002668:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800266c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	fab2 f282 	clz	r2, r2
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	f002 021f 	and.w	r2, r2, #31
 8002682:	2101      	movs	r1, #1
 8002684:	fa01 f202 	lsl.w	r2, r1, r2
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d084      	beq.n	8002598 <HAL_RCC_OscConfig+0x9c8>
 800268e:	e07f      	b.n	8002790 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002690:	f7fe ffde 	bl	8001650 <HAL_GetTick>
 8002694:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002698:	e00b      	b.n	80026b2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f7fe ffd9 	bl	8001650 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e2c4      	b.n	8002c3c <HAL_RCC_OscConfig+0x106c>
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80026ba:	2202      	movs	r2, #2
 80026bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	fa93 f2a3 	rbit	r2, r3
 80026cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80026de:	2202      	movs	r2, #2
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f2a3 	rbit	r2, r3
 80026f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80026f8:	601a      	str	r2, [r3, #0]
  return result;
 80026fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002702:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002704:	fab3 f383 	clz	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	b2db      	uxtb	r3, r3
 800270e:	f043 0302 	orr.w	r3, r3, #2
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d102      	bne.n	800271e <HAL_RCC_OscConfig+0xb4e>
 8002718:	4b43      	ldr	r3, [pc, #268]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	e013      	b.n	8002746 <HAL_RCC_OscConfig+0xb76>
 800271e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002722:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002726:	2202      	movs	r2, #2
 8002728:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	fa93 f2a3 	rbit	r2, r3
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	4b39      	ldr	r3, [pc, #228]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800274a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800274e:	2102      	movs	r1, #2
 8002750:	6011      	str	r1, [r2, #0]
 8002752:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002756:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	fa92 f1a2 	rbit	r1, r2
 8002760:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002764:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002768:	6011      	str	r1, [r2, #0]
  return result;
 800276a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800276e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	fab2 f282 	clz	r2, r2
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	f002 021f 	and.w	r2, r2, #31
 8002784:	2101      	movs	r1, #1
 8002786:	fa01 f202 	lsl.w	r2, r1, r2
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d184      	bne.n	800269a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002790:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002794:	2b01      	cmp	r3, #1
 8002796:	d105      	bne.n	80027a4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002798:	4b23      	ldr	r3, [pc, #140]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	4a22      	ldr	r2, [pc, #136]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 800279e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8242 	beq.w	8002c3a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b6:	4b1c      	ldr	r3, [pc, #112]	; (8002828 <HAL_RCC_OscConfig+0xc58>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b08      	cmp	r3, #8
 80027c0:	f000 8213 	beq.w	8002bea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	f040 8162 	bne.w	8002a9a <HAL_RCC_OscConfig+0xeca>
 80027d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027da:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80027de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	fa93 f2a3 	rbit	r2, r3
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80027fa:	601a      	str	r2, [r3, #0]
  return result;
 80027fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002800:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002804:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002810:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	461a      	mov	r2, r3
 8002818:	2300      	movs	r3, #0
 800281a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe ff18 	bl	8001650 <HAL_GetTick>
 8002820:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002824:	e00c      	b.n	8002840 <HAL_RCC_OscConfig+0xc70>
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282c:	f7fe ff10 	bl	8001650 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e1fd      	b.n	8002c3c <HAL_RCC_OscConfig+0x106c>
 8002840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002844:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800284c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	fa93 f2a3 	rbit	r2, r3
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002864:	601a      	str	r2, [r3, #0]
  return result;
 8002866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800286e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002870:	fab3 f383 	clz	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	b2db      	uxtb	r3, r3
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d102      	bne.n	800288a <HAL_RCC_OscConfig+0xcba>
 8002884:	4bb0      	ldr	r3, [pc, #704]	; (8002b48 <HAL_RCC_OscConfig+0xf78>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	e027      	b.n	80028da <HAL_RCC_OscConfig+0xd0a>
 800288a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002892:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	fa93 f2a3 	rbit	r2, r3
 80028a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028aa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80028b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	fa93 f2a3 	rbit	r2, r3
 80028cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	4b9c      	ldr	r3, [pc, #624]	; (8002b48 <HAL_RCC_OscConfig+0xf78>)
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028de:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80028e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028e6:	6011      	str	r1, [r2, #0]
 80028e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ec:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	fa92 f1a2 	rbit	r1, r2
 80028f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028fa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80028fe:	6011      	str	r1, [r2, #0]
  return result;
 8002900:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002904:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	fab2 f282 	clz	r2, r2
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	f042 0220 	orr.w	r2, r2, #32
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	f002 021f 	and.w	r2, r2, #31
 800291a:	2101      	movs	r1, #1
 800291c:	fa01 f202 	lsl.w	r2, r1, r2
 8002920:	4013      	ands	r3, r2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d182      	bne.n	800282c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002926:	4b88      	ldr	r3, [pc, #544]	; (8002b48 <HAL_RCC_OscConfig+0xf78>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800292e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002932:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800293a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	430b      	orrs	r3, r1
 8002948:	497f      	ldr	r1, [pc, #508]	; (8002b48 <HAL_RCC_OscConfig+0xf78>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
 800294e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002952:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002956:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800295a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002960:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	fa93 f2a3 	rbit	r2, r3
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002972:	601a      	str	r2, [r3, #0]
  return result;
 8002974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002978:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800297c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002988:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	461a      	mov	r2, r3
 8002990:	2301      	movs	r3, #1
 8002992:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7fe fe5c 	bl	8001650 <HAL_GetTick>
 8002998:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800299c:	e009      	b.n	80029b2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299e:	f7fe fe57 	bl	8001650 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e144      	b.n	8002c3c <HAL_RCC_OscConfig+0x106c>
 80029b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80029ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	fa93 f2a3 	rbit	r2, r3
 80029ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029d6:	601a      	str	r2, [r3, #0]
  return result;
 80029d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029dc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d102      	bne.n	80029fc <HAL_RCC_OscConfig+0xe2c>
 80029f6:	4b54      	ldr	r3, [pc, #336]	; (8002b48 <HAL_RCC_OscConfig+0xf78>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	e027      	b.n	8002a4c <HAL_RCC_OscConfig+0xe7c>
 80029fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a00:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	fa93 f2a3 	rbit	r2, r3
 8002a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a26:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a34:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	fa93 f2a3 	rbit	r2, r3
 8002a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a42:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	4b3f      	ldr	r3, [pc, #252]	; (8002b48 <HAL_RCC_OscConfig+0xf78>)
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a50:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002a54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a58:	6011      	str	r1, [r2, #0]
 8002a5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a5e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	fa92 f1a2 	rbit	r1, r2
 8002a68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a6c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a70:	6011      	str	r1, [r2, #0]
  return result;
 8002a72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a76:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	fab2 f282 	clz	r2, r2
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	f042 0220 	orr.w	r2, r2, #32
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	f002 021f 	and.w	r2, r2, #31
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d082      	beq.n	800299e <HAL_RCC_OscConfig+0xdce>
 8002a98:	e0cf      	b.n	8002c3a <HAL_RCC_OscConfig+0x106a>
 8002a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002aa2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	fa93 f2a3 	rbit	r2, r3
 8002ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002abe:	601a      	str	r2, [r3, #0]
  return result;
 8002ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ac8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ad4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	461a      	mov	r2, r3
 8002adc:	2300      	movs	r3, #0
 8002ade:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fdb6 	bl	8001650 <HAL_GetTick>
 8002ae4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae8:	e009      	b.n	8002afe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe fdb1 	bl	8001650 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e09e      	b.n	8002c3c <HAL_RCC_OscConfig+0x106c>
 8002afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b02:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b10:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	fa93 f2a3 	rbit	r2, r3
 8002b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b22:	601a      	str	r2, [r3, #0]
  return result;
 8002b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b28:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d104      	bne.n	8002b4c <HAL_RCC_OscConfig+0xf7c>
 8002b42:	4b01      	ldr	r3, [pc, #4]	; (8002b48 <HAL_RCC_OscConfig+0xf78>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	e029      	b.n	8002b9c <HAL_RCC_OscConfig+0xfcc>
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b50:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	fa93 f2a3 	rbit	r2, r3
 8002b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b84:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	fa93 f2a3 	rbit	r2, r3
 8002b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b92:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCC_OscConfig+0x1078>)
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ba0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ba4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ba8:	6011      	str	r1, [r2, #0]
 8002baa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bae:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	fa92 f1a2 	rbit	r1, r2
 8002bb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bbc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002bc0:	6011      	str	r1, [r2, #0]
  return result;
 8002bc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bc6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	fab2 f282 	clz	r2, r2
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	f042 0220 	orr.w	r2, r2, #32
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f002 021f 	and.w	r2, r2, #31
 8002bdc:	2101      	movs	r1, #1
 8002bde:	fa01 f202 	lsl.w	r2, r1, r2
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d180      	bne.n	8002aea <HAL_RCC_OscConfig+0xf1a>
 8002be8:	e027      	b.n	8002c3a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e01e      	b.n	8002c3c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_RCC_OscConfig+0x1078>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c0a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d10b      	bne.n	8002c36 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d001      	beq.n	8002c3a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000

08002c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b09e      	sub	sp, #120	; 0x78
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e162      	b.n	8002f2a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c64:	4b90      	ldr	r3, [pc, #576]	; (8002ea8 <HAL_RCC_ClockConfig+0x25c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d910      	bls.n	8002c94 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b8d      	ldr	r3, [pc, #564]	; (8002ea8 <HAL_RCC_ClockConfig+0x25c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 0207 	bic.w	r2, r3, #7
 8002c7a:	498b      	ldr	r1, [pc, #556]	; (8002ea8 <HAL_RCC_ClockConfig+0x25c>)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b89      	ldr	r3, [pc, #548]	; (8002ea8 <HAL_RCC_ClockConfig+0x25c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e14a      	b.n	8002f2a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca0:	4b82      	ldr	r3, [pc, #520]	; (8002eac <HAL_RCC_ClockConfig+0x260>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	497f      	ldr	r1, [pc, #508]	; (8002eac <HAL_RCC_ClockConfig+0x260>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80dc 	beq.w	8002e78 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d13c      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xf6>
 8002cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ccc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd8:	fab3 f383 	clz	r3, r3
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d102      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xa6>
 8002cec:	4b6f      	ldr	r3, [pc, #444]	; (8002eac <HAL_RCC_ClockConfig+0x260>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	e00f      	b.n	8002d12 <HAL_RCC_ClockConfig+0xc6>
 8002cf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cf6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	667b      	str	r3, [r7, #100]	; 0x64
 8002d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d04:	663b      	str	r3, [r7, #96]	; 0x60
 8002d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d0e:	4b67      	ldr	r3, [pc, #412]	; (8002eac <HAL_RCC_ClockConfig+0x260>)
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d16:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d1a:	fa92 f2a2 	rbit	r2, r2
 8002d1e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d22:	fab2 f282 	clz	r2, r2
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	f042 0220 	orr.w	r2, r2, #32
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	f002 021f 	and.w	r2, r2, #31
 8002d32:	2101      	movs	r1, #1
 8002d34:	fa01 f202 	lsl.w	r2, r1, r2
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d17b      	bne.n	8002e36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e0f3      	b.n	8002f2a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d13c      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x178>
 8002d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d102      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x128>
 8002d6e:	4b4f      	ldr	r3, [pc, #316]	; (8002eac <HAL_RCC_ClockConfig+0x260>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	e00f      	b.n	8002d94 <HAL_RCC_ClockConfig+0x148>
 8002d74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	647b      	str	r3, [r7, #68]	; 0x44
 8002d82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d86:	643b      	str	r3, [r7, #64]	; 0x40
 8002d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d90:	4b46      	ldr	r3, [pc, #280]	; (8002eac <HAL_RCC_ClockConfig+0x260>)
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d98:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d9c:	fa92 f2a2 	rbit	r2, r2
 8002da0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002da4:	fab2 f282 	clz	r2, r2
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	f042 0220 	orr.w	r2, r2, #32
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	f002 021f 	and.w	r2, r2, #31
 8002db4:	2101      	movs	r1, #1
 8002db6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d13a      	bne.n	8002e36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0b2      	b.n	8002f2a <HAL_RCC_ClockConfig+0x2de>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d102      	bne.n	8002dec <HAL_RCC_ClockConfig+0x1a0>
 8002de6:	4b31      	ldr	r3, [pc, #196]	; (8002eac <HAL_RCC_ClockConfig+0x260>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	e00d      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1bc>
 8002dec:	2302      	movs	r3, #2
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
 8002df8:	2302      	movs	r3, #2
 8002dfa:	623b      	str	r3, [r7, #32]
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	61fb      	str	r3, [r7, #28]
 8002e04:	4b29      	ldr	r3, [pc, #164]	; (8002eac <HAL_RCC_ClockConfig+0x260>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	2202      	movs	r2, #2
 8002e0a:	61ba      	str	r2, [r7, #24]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	fa92 f2a2 	rbit	r2, r2
 8002e12:	617a      	str	r2, [r7, #20]
  return result;
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	fab2 f282 	clz	r2, r2
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	f042 0220 	orr.w	r2, r2, #32
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	f002 021f 	and.w	r2, r2, #31
 8002e26:	2101      	movs	r1, #1
 8002e28:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e079      	b.n	8002f2a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e36:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <HAL_RCC_ClockConfig+0x260>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f023 0203 	bic.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	491a      	ldr	r1, [pc, #104]	; (8002eac <HAL_RCC_ClockConfig+0x260>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e48:	f7fe fc02 	bl	8001650 <HAL_GetTick>
 8002e4c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7fe fbfe 	bl	8001650 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e061      	b.n	8002f2a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	4b11      	ldr	r3, [pc, #68]	; (8002eac <HAL_RCC_ClockConfig+0x260>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 020c 	and.w	r2, r3, #12
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1eb      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCC_ClockConfig+0x25c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d214      	bcs.n	8002eb0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_RCC_ClockConfig+0x25c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 0207 	bic.w	r2, r3, #7
 8002e8e:	4906      	ldr	r1, [pc, #24]	; (8002ea8 <HAL_RCC_ClockConfig+0x25c>)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <HAL_RCC_ClockConfig+0x25c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e040      	b.n	8002f2a <HAL_RCC_ClockConfig+0x2de>
 8002ea8:	40022000 	.word	0x40022000
 8002eac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_RCC_ClockConfig+0x2e8>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	491a      	ldr	r1, [pc, #104]	; (8002f34 <HAL_RCC_ClockConfig+0x2e8>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <HAL_RCC_ClockConfig+0x2e8>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4912      	ldr	r1, [pc, #72]	; (8002f34 <HAL_RCC_ClockConfig+0x2e8>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002eee:	f000 f829 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 8002ef2:	4601      	mov	r1, r0
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_RCC_ClockConfig+0x2e8>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002efc:	22f0      	movs	r2, #240	; 0xf0
 8002efe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	fa92 f2a2 	rbit	r2, r2
 8002f06:	60fa      	str	r2, [r7, #12]
  return result;
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	fab2 f282 	clz	r2, r2
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	40d3      	lsrs	r3, r2
 8002f12:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <HAL_RCC_ClockConfig+0x2ec>)
 8002f14:	5cd3      	ldrb	r3, [r2, r3]
 8002f16:	fa21 f303 	lsr.w	r3, r1, r3
 8002f1a:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <HAL_RCC_ClockConfig+0x2f0>)
 8002f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_RCC_ClockConfig+0x2f4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fb50 	bl	80015c8 <HAL_InitTick>
  
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3778      	adds	r7, #120	; 0x78
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	08007274 	.word	0x08007274
 8002f3c:	20000004 	.word	0x20000004
 8002f40:	20000008 	.word	0x20000008

08002f44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b08b      	sub	sp, #44	; 0x2c
 8002f48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	2300      	movs	r3, #0
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f5e:	4b29      	ldr	r3, [pc, #164]	; (8003004 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d002      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x30>
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d003      	beq.n	8002f7a <HAL_RCC_GetSysClockFreq+0x36>
 8002f72:	e03c      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f74:	4b24      	ldr	r3, [pc, #144]	; (8003008 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f76:	623b      	str	r3, [r7, #32]
      break;
 8002f78:	e03c      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f80:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f84:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	fa92 f2a2 	rbit	r2, r2
 8002f8c:	607a      	str	r2, [r7, #4]
  return result;
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	fab2 f282 	clz	r2, r2
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	40d3      	lsrs	r3, r2
 8002f98:	4a1c      	ldr	r2, [pc, #112]	; (800300c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f9a:	5cd3      	ldrb	r3, [r2, r3]
 8002f9c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	220f      	movs	r2, #15
 8002fa8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	fa92 f2a2 	rbit	r2, r2
 8002fb0:	60fa      	str	r2, [r7, #12]
  return result;
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	fab2 f282 	clz	r2, r2
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	40d3      	lsrs	r3, r2
 8002fbc:	4a14      	ldr	r2, [pc, #80]	; (8003010 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fbe:	5cd3      	ldrb	r3, [r2, r3]
 8002fc0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fcc:	4a0e      	ldr	r2, [pc, #56]	; (8003008 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
 8002fdc:	e004      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	4a0c      	ldr	r2, [pc, #48]	; (8003014 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	623b      	str	r3, [r7, #32]
      break;
 8002fec:	e002      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ff0:	623b      	str	r3, [r7, #32]
      break;
 8002ff2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	372c      	adds	r7, #44	; 0x2c
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
 8003008:	007a1200 	.word	0x007a1200
 800300c:	0800728c 	.word	0x0800728c
 8003010:	0800729c 	.word	0x0800729c
 8003014:	003d0900 	.word	0x003d0900

08003018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <HAL_RCC_GetHCLKFreq+0x14>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20000004 	.word	0x20000004

08003030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003036:	f7ff ffef 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 800303a:	4601      	mov	r1, r0
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003044:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003048:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	fa92 f2a2 	rbit	r2, r2
 8003050:	603a      	str	r2, [r7, #0]
  return result;
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	fab2 f282 	clz	r2, r2
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	40d3      	lsrs	r3, r2
 800305c:	4a04      	ldr	r2, [pc, #16]	; (8003070 <HAL_RCC_GetPCLK1Freq+0x40>)
 800305e:	5cd3      	ldrb	r3, [r2, r3]
 8003060:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40021000 	.word	0x40021000
 8003070:	08007284 	.word	0x08007284

08003074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800307a:	f7ff ffcd 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 800307e:	4601      	mov	r1, r0
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003088:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800308c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	fa92 f2a2 	rbit	r2, r2
 8003094:	603a      	str	r2, [r7, #0]
  return result;
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	fab2 f282 	clz	r2, r2
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	40d3      	lsrs	r3, r2
 80030a0:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80030a2:	5cd3      	ldrb	r3, [r2, r3]
 80030a4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	08007284 	.word	0x08007284

080030b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b092      	sub	sp, #72	; 0x48
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80d4 	beq.w	8003284 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030dc:	4b4e      	ldr	r3, [pc, #312]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10e      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e8:	4b4b      	ldr	r3, [pc, #300]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	4a4a      	ldr	r2, [pc, #296]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f2:	61d3      	str	r3, [r2, #28]
 80030f4:	4b48      	ldr	r3, [pc, #288]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003106:	4b45      	ldr	r3, [pc, #276]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d118      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003112:	4b42      	ldr	r3, [pc, #264]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a41      	ldr	r2, [pc, #260]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311e:	f7fe fa97 	bl	8001650 <HAL_GetTick>
 8003122:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	e008      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003126:	f7fe fa93 	bl	8001650 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b64      	cmp	r3, #100	; 0x64
 8003132:	d901      	bls.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e169      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003138:	4b38      	ldr	r3, [pc, #224]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003144:	4b34      	ldr	r3, [pc, #208]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800314e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8084 	beq.w	800325e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003160:	429a      	cmp	r2, r3
 8003162:	d07c      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003164:	4b2c      	ldr	r3, [pc, #176]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800316e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003172:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	4b26      	ldr	r3, [pc, #152]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	461a      	mov	r2, r3
 800318e:	2301      	movs	r3, #1
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003196:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319a:	fa93 f3a3 	rbit	r3, r3
 800319e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	461a      	mov	r2, r3
 80031b2:	2300      	movs	r3, #0
 80031b4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031b6:	4a18      	ldr	r2, [pc, #96]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d04b      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe fa43 	bl	8001650 <HAL_GetTick>
 80031ca:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ce:	f7fe fa3f 	bl	8001650 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e113      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x354>
 80031e4:	2302      	movs	r3, #2
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
 80031f0:	2302      	movs	r3, #2
 80031f2:	623b      	str	r3, [r7, #32]
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	61fb      	str	r3, [r7, #28]
  return result;
 80031fc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d108      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003212:	4b01      	ldr	r3, [pc, #4]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	e00d      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003218:	40021000 	.word	0x40021000
 800321c:	40007000 	.word	0x40007000
 8003220:	10908100 	.word	0x10908100
 8003224:	2302      	movs	r3, #2
 8003226:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	4b78      	ldr	r3, [pc, #480]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	2202      	movs	r2, #2
 8003236:	613a      	str	r2, [r7, #16]
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	fa92 f2a2 	rbit	r2, r2
 800323e:	60fa      	str	r2, [r7, #12]
  return result;
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	fab2 f282 	clz	r2, r2
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	f002 021f 	and.w	r2, r2, #31
 8003252:	2101      	movs	r1, #1
 8003254:	fa01 f202 	lsl.w	r2, r1, r2
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0b7      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800325e:	4b6d      	ldr	r3, [pc, #436]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	496a      	ldr	r1, [pc, #424]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800326c:	4313      	orrs	r3, r2
 800326e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003270:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003278:	4b66      	ldr	r3, [pc, #408]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	4a65      	ldr	r2, [pc, #404]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800327e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003282:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003290:	4b60      	ldr	r3, [pc, #384]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	f023 0203 	bic.w	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	495d      	ldr	r1, [pc, #372]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032ae:	4b59      	ldr	r3, [pc, #356]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	4956      	ldr	r1, [pc, #344]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032cc:	4b51      	ldr	r3, [pc, #324]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	494e      	ldr	r1, [pc, #312]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d008      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ea:	4b4a      	ldr	r3, [pc, #296]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	f023 0210 	bic.w	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	4947      	ldr	r1, [pc, #284]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003308:	4b42      	ldr	r3, [pc, #264]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	493f      	ldr	r1, [pc, #252]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003316:	4313      	orrs	r3, r2
 8003318:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d008      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003326:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f023 0220 	bic.w	r2, r3, #32
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	4938      	ldr	r1, [pc, #224]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003334:	4313      	orrs	r3, r2
 8003336:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003344:	4b33      	ldr	r3, [pc, #204]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	4930      	ldr	r1, [pc, #192]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003352:	4313      	orrs	r3, r2
 8003354:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	2b00      	cmp	r3, #0
 8003360:	d008      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003362:	4b2c      	ldr	r3, [pc, #176]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	4929      	ldr	r1, [pc, #164]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003370:	4313      	orrs	r3, r2
 8003372:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003380:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	4921      	ldr	r1, [pc, #132]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800338e:	4313      	orrs	r3, r2
 8003390:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339a:	2b00      	cmp	r3, #0
 800339c:	d008      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800339e:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	491a      	ldr	r1, [pc, #104]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80033bc:	4b15      	ldr	r3, [pc, #84]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	4912      	ldr	r1, [pc, #72]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	490b      	ldr	r1, [pc, #44]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003404:	4903      	ldr	r1, [pc, #12]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003406:	4313      	orrs	r3, r2
 8003408:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3748      	adds	r7, #72	; 0x48
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40021000 	.word	0x40021000

08003418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e049      	b.n	80034be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd feba 	bl	80011b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f000 f9cc 	bl	80037f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d001      	beq.n	80034e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e042      	b.n	8003566 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a21      	ldr	r2, [pc, #132]	; (8003574 <HAL_TIM_Base_Start+0xac>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d018      	beq.n	8003524 <HAL_TIM_Base_Start+0x5c>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fa:	d013      	beq.n	8003524 <HAL_TIM_Base_Start+0x5c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1d      	ldr	r2, [pc, #116]	; (8003578 <HAL_TIM_Base_Start+0xb0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00e      	beq.n	8003524 <HAL_TIM_Base_Start+0x5c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1c      	ldr	r2, [pc, #112]	; (800357c <HAL_TIM_Base_Start+0xb4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d009      	beq.n	8003524 <HAL_TIM_Base_Start+0x5c>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <HAL_TIM_Base_Start+0xb8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d004      	beq.n	8003524 <HAL_TIM_Base_Start+0x5c>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a19      	ldr	r2, [pc, #100]	; (8003584 <HAL_TIM_Base_Start+0xbc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d115      	bne.n	8003550 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	4b17      	ldr	r3, [pc, #92]	; (8003588 <HAL_TIM_Base_Start+0xc0>)
 800352c:	4013      	ands	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b06      	cmp	r3, #6
 8003534:	d015      	beq.n	8003562 <HAL_TIM_Base_Start+0x9a>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353c:	d011      	beq.n	8003562 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354e:	e008      	b.n	8003562 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e000      	b.n	8003564 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003562:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800
 8003580:	40013400 	.word	0x40013400
 8003584:	40014000 	.word	0x40014000
 8003588:	00010007 	.word	0x00010007

0800358c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d001      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e04a      	b.n	800363a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a21      	ldr	r2, [pc, #132]	; (8003648 <HAL_TIM_Base_Start_IT+0xbc>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d018      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x6c>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ce:	d013      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x6c>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a1d      	ldr	r2, [pc, #116]	; (800364c <HAL_TIM_Base_Start_IT+0xc0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00e      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x6c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <HAL_TIM_Base_Start_IT+0xc4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d009      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x6c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1a      	ldr	r2, [pc, #104]	; (8003654 <HAL_TIM_Base_Start_IT+0xc8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x6c>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a19      	ldr	r2, [pc, #100]	; (8003658 <HAL_TIM_Base_Start_IT+0xcc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d115      	bne.n	8003624 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	4b17      	ldr	r3, [pc, #92]	; (800365c <HAL_TIM_Base_Start_IT+0xd0>)
 8003600:	4013      	ands	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b06      	cmp	r3, #6
 8003608:	d015      	beq.n	8003636 <HAL_TIM_Base_Start_IT+0xaa>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003610:	d011      	beq.n	8003636 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0201 	orr.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003622:	e008      	b.n	8003636 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	e000      	b.n	8003638 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003636:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40012c00 	.word	0x40012c00
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40013400 	.word	0x40013400
 8003658:	40014000 	.word	0x40014000
 800365c:	00010007 	.word	0x00010007

08003660 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_TIM_ConfigClockSource+0x1c>
 8003678:	2302      	movs	r3, #2
 800367a:	e0b6      	b.n	80037ea <HAL_TIM_ConfigClockSource+0x18a>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800369e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b8:	d03e      	beq.n	8003738 <HAL_TIM_ConfigClockSource+0xd8>
 80036ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036be:	f200 8087 	bhi.w	80037d0 <HAL_TIM_ConfigClockSource+0x170>
 80036c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c6:	f000 8086 	beq.w	80037d6 <HAL_TIM_ConfigClockSource+0x176>
 80036ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ce:	d87f      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x170>
 80036d0:	2b70      	cmp	r3, #112	; 0x70
 80036d2:	d01a      	beq.n	800370a <HAL_TIM_ConfigClockSource+0xaa>
 80036d4:	2b70      	cmp	r3, #112	; 0x70
 80036d6:	d87b      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x170>
 80036d8:	2b60      	cmp	r3, #96	; 0x60
 80036da:	d050      	beq.n	800377e <HAL_TIM_ConfigClockSource+0x11e>
 80036dc:	2b60      	cmp	r3, #96	; 0x60
 80036de:	d877      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x170>
 80036e0:	2b50      	cmp	r3, #80	; 0x50
 80036e2:	d03c      	beq.n	800375e <HAL_TIM_ConfigClockSource+0xfe>
 80036e4:	2b50      	cmp	r3, #80	; 0x50
 80036e6:	d873      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x170>
 80036e8:	2b40      	cmp	r3, #64	; 0x40
 80036ea:	d058      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x13e>
 80036ec:	2b40      	cmp	r3, #64	; 0x40
 80036ee:	d86f      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x170>
 80036f0:	2b30      	cmp	r3, #48	; 0x30
 80036f2:	d064      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x15e>
 80036f4:	2b30      	cmp	r3, #48	; 0x30
 80036f6:	d86b      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x170>
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d060      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x15e>
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d867      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x170>
 8003700:	2b00      	cmp	r3, #0
 8003702:	d05c      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x15e>
 8003704:	2b10      	cmp	r3, #16
 8003706:	d05a      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x15e>
 8003708:	e062      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6899      	ldr	r1, [r3, #8]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f000 f975 	bl	8003a08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800372c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	609a      	str	r2, [r3, #8]
      break;
 8003736:	e04f      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	6899      	ldr	r1, [r3, #8]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f000 f95e 	bl	8003a08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800375a:	609a      	str	r2, [r3, #8]
      break;
 800375c:	e03c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6859      	ldr	r1, [r3, #4]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	461a      	mov	r2, r3
 800376c:	f000 f8d2 	bl	8003914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2150      	movs	r1, #80	; 0x50
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f92b 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 800377c:	e02c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6859      	ldr	r1, [r3, #4]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	461a      	mov	r2, r3
 800378c:	f000 f8f1 	bl	8003972 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2160      	movs	r1, #96	; 0x60
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f91b 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 800379c:	e01c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6859      	ldr	r1, [r3, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	461a      	mov	r2, r3
 80037ac:	f000 f8b2 	bl	8003914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2140      	movs	r1, #64	; 0x40
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f90b 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 80037bc:	e00c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f000 f902 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 80037ce:	e003      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      break;
 80037d4:	e000      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80037d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a3c      	ldr	r2, [pc, #240]	; (80038f8 <TIM_Base_SetConfig+0x104>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00f      	beq.n	800382c <TIM_Base_SetConfig+0x38>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003812:	d00b      	beq.n	800382c <TIM_Base_SetConfig+0x38>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a39      	ldr	r2, [pc, #228]	; (80038fc <TIM_Base_SetConfig+0x108>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d007      	beq.n	800382c <TIM_Base_SetConfig+0x38>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a38      	ldr	r2, [pc, #224]	; (8003900 <TIM_Base_SetConfig+0x10c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d003      	beq.n	800382c <TIM_Base_SetConfig+0x38>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a37      	ldr	r2, [pc, #220]	; (8003904 <TIM_Base_SetConfig+0x110>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d108      	bne.n	800383e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2d      	ldr	r2, [pc, #180]	; (80038f8 <TIM_Base_SetConfig+0x104>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01b      	beq.n	800387e <TIM_Base_SetConfig+0x8a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d017      	beq.n	800387e <TIM_Base_SetConfig+0x8a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <TIM_Base_SetConfig+0x108>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <TIM_Base_SetConfig+0x8a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a29      	ldr	r2, [pc, #164]	; (8003900 <TIM_Base_SetConfig+0x10c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00f      	beq.n	800387e <TIM_Base_SetConfig+0x8a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a28      	ldr	r2, [pc, #160]	; (8003904 <TIM_Base_SetConfig+0x110>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00b      	beq.n	800387e <TIM_Base_SetConfig+0x8a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a27      	ldr	r2, [pc, #156]	; (8003908 <TIM_Base_SetConfig+0x114>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d007      	beq.n	800387e <TIM_Base_SetConfig+0x8a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a26      	ldr	r2, [pc, #152]	; (800390c <TIM_Base_SetConfig+0x118>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d003      	beq.n	800387e <TIM_Base_SetConfig+0x8a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a25      	ldr	r2, [pc, #148]	; (8003910 <TIM_Base_SetConfig+0x11c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d108      	bne.n	8003890 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4313      	orrs	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a10      	ldr	r2, [pc, #64]	; (80038f8 <TIM_Base_SetConfig+0x104>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00f      	beq.n	80038dc <TIM_Base_SetConfig+0xe8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a11      	ldr	r2, [pc, #68]	; (8003904 <TIM_Base_SetConfig+0x110>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00b      	beq.n	80038dc <TIM_Base_SetConfig+0xe8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a10      	ldr	r2, [pc, #64]	; (8003908 <TIM_Base_SetConfig+0x114>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d007      	beq.n	80038dc <TIM_Base_SetConfig+0xe8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a0f      	ldr	r2, [pc, #60]	; (800390c <TIM_Base_SetConfig+0x118>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d003      	beq.n	80038dc <TIM_Base_SetConfig+0xe8>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a0e      	ldr	r2, [pc, #56]	; (8003910 <TIM_Base_SetConfig+0x11c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d103      	bne.n	80038e4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	615a      	str	r2, [r3, #20]
}
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40012c00 	.word	0x40012c00
 80038fc:	40000400 	.word	0x40000400
 8003900:	40000800 	.word	0x40000800
 8003904:	40013400 	.word	0x40013400
 8003908:	40014000 	.word	0x40014000
 800390c:	40014400 	.word	0x40014400
 8003910:	40014800 	.word	0x40014800

08003914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f023 0201 	bic.w	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800393e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f023 030a 	bic.w	r3, r3, #10
 8003950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003972:	b480      	push	{r7}
 8003974:	b087      	sub	sp, #28
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f023 0210 	bic.w	r2, r3, #16
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800399c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	031b      	lsls	r3, r3, #12
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	621a      	str	r2, [r3, #32]
}
 80039c6:	bf00      	nop
 80039c8:	371c      	adds	r7, #28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f043 0307 	orr.w	r3, r3, #7
 80039f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	609a      	str	r2, [r3, #8]
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	021a      	lsls	r2, r3, #8
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	609a      	str	r2, [r3, #8]
}
 8003a3c:	bf00      	nop
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e063      	b.n	8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a2b      	ldr	r2, [pc, #172]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d004      	beq.n	8003a94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a2a      	ldr	r2, [pc, #168]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d108      	bne.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a1b      	ldr	r2, [pc, #108]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d018      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad2:	d013      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00e      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a17      	ldr	r2, [pc, #92]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d009      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a12      	ldr	r2, [pc, #72]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d004      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a13      	ldr	r2, [pc, #76]	; (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d10c      	bne.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40013400 	.word	0x40013400
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	40000800 	.word	0x40000800
 8003b44:	40014000 	.word	0x40014000

08003b48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e040      	b.n	8003bdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fd fb56 	bl	800121c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2224      	movs	r2, #36	; 0x24
 8003b74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f8c0 	bl	8003d0c <UART_SetConfig>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e022      	b.n	8003bdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fa8a 	bl	80040b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fb11 	bl	80041fc <UART_CheckIdleState>
 8003bda:	4603      	mov	r3, r0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	; 0x28
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	f040 8082 	bne.w	8003d02 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_UART_Transmit+0x26>
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e07a      	b.n	8003d04 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_UART_Transmit+0x38>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e073      	b.n	8003d04 <HAL_UART_Transmit+0x120>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2221      	movs	r2, #33	; 0x21
 8003c30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c32:	f7fd fd0d 	bl	8001650 <HAL_GetTick>
 8003c36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	88fa      	ldrh	r2, [r7, #6]
 8003c3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	88fa      	ldrh	r2, [r7, #6]
 8003c44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c50:	d108      	bne.n	8003c64 <HAL_UART_Transmit+0x80>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d104      	bne.n	8003c64 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	e003      	b.n	8003c6c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003c74:	e02d      	b.n	8003cd2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2180      	movs	r1, #128	; 0x80
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 fb04 	bl	800428e <UART_WaitOnFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e039      	b.n	8003d04 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10b      	bne.n	8003cae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	881a      	ldrh	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca2:	b292      	uxth	r2, r2
 8003ca4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	3302      	adds	r3, #2
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	e008      	b.n	8003cc0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	b292      	uxth	r2, r2
 8003cb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1cb      	bne.n	8003c76 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2140      	movs	r1, #64	; 0x40
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fad0 	bl	800428e <UART_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e005      	b.n	8003d04 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e000      	b.n	8003d04 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003d02:	2302      	movs	r3, #2
  }
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3720      	adds	r7, #32
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d3a:	f023 030c 	bic.w	r3, r3, #12
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	6979      	ldr	r1, [r7, #20]
 8003d44:	430b      	orrs	r3, r1
 8003d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4aa8      	ldr	r2, [pc, #672]	; (8004028 <UART_SetConfig+0x31c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d120      	bne.n	8003dce <UART_SetConfig+0xc2>
 8003d8c:	4ba7      	ldr	r3, [pc, #668]	; (800402c <UART_SetConfig+0x320>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d817      	bhi.n	8003dc8 <UART_SetConfig+0xbc>
 8003d98:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <UART_SetConfig+0x94>)
 8003d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9e:	bf00      	nop
 8003da0:	08003db1 	.word	0x08003db1
 8003da4:	08003dbd 	.word	0x08003dbd
 8003da8:	08003dc3 	.word	0x08003dc3
 8003dac:	08003db7 	.word	0x08003db7
 8003db0:	2301      	movs	r3, #1
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e0b5      	b.n	8003f22 <UART_SetConfig+0x216>
 8003db6:	2302      	movs	r3, #2
 8003db8:	77fb      	strb	r3, [r7, #31]
 8003dba:	e0b2      	b.n	8003f22 <UART_SetConfig+0x216>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e0af      	b.n	8003f22 <UART_SetConfig+0x216>
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e0ac      	b.n	8003f22 <UART_SetConfig+0x216>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e0a9      	b.n	8003f22 <UART_SetConfig+0x216>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a97      	ldr	r2, [pc, #604]	; (8004030 <UART_SetConfig+0x324>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d124      	bne.n	8003e22 <UART_SetConfig+0x116>
 8003dd8:	4b94      	ldr	r3, [pc, #592]	; (800402c <UART_SetConfig+0x320>)
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003de0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003de4:	d011      	beq.n	8003e0a <UART_SetConfig+0xfe>
 8003de6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dea:	d817      	bhi.n	8003e1c <UART_SetConfig+0x110>
 8003dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003df0:	d011      	beq.n	8003e16 <UART_SetConfig+0x10a>
 8003df2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003df6:	d811      	bhi.n	8003e1c <UART_SetConfig+0x110>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <UART_SetConfig+0xf8>
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e00:	d006      	beq.n	8003e10 <UART_SetConfig+0x104>
 8003e02:	e00b      	b.n	8003e1c <UART_SetConfig+0x110>
 8003e04:	2300      	movs	r3, #0
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e08b      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	77fb      	strb	r3, [r7, #31]
 8003e0e:	e088      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e10:	2304      	movs	r3, #4
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e085      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e16:	2308      	movs	r3, #8
 8003e18:	77fb      	strb	r3, [r7, #31]
 8003e1a:	e082      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e07f      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a83      	ldr	r2, [pc, #524]	; (8004034 <UART_SetConfig+0x328>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d124      	bne.n	8003e76 <UART_SetConfig+0x16a>
 8003e2c:	4b7f      	ldr	r3, [pc, #508]	; (800402c <UART_SetConfig+0x320>)
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003e34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e38:	d011      	beq.n	8003e5e <UART_SetConfig+0x152>
 8003e3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e3e:	d817      	bhi.n	8003e70 <UART_SetConfig+0x164>
 8003e40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e44:	d011      	beq.n	8003e6a <UART_SetConfig+0x15e>
 8003e46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e4a:	d811      	bhi.n	8003e70 <UART_SetConfig+0x164>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <UART_SetConfig+0x14c>
 8003e50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e54:	d006      	beq.n	8003e64 <UART_SetConfig+0x158>
 8003e56:	e00b      	b.n	8003e70 <UART_SetConfig+0x164>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e061      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e05e      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e64:	2304      	movs	r3, #4
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e05b      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e6a:	2308      	movs	r3, #8
 8003e6c:	77fb      	strb	r3, [r7, #31]
 8003e6e:	e058      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e70:	2310      	movs	r3, #16
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e055      	b.n	8003f22 <UART_SetConfig+0x216>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a6f      	ldr	r2, [pc, #444]	; (8004038 <UART_SetConfig+0x32c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d124      	bne.n	8003eca <UART_SetConfig+0x1be>
 8003e80:	4b6a      	ldr	r3, [pc, #424]	; (800402c <UART_SetConfig+0x320>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003e88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e8c:	d011      	beq.n	8003eb2 <UART_SetConfig+0x1a6>
 8003e8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e92:	d817      	bhi.n	8003ec4 <UART_SetConfig+0x1b8>
 8003e94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e98:	d011      	beq.n	8003ebe <UART_SetConfig+0x1b2>
 8003e9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e9e:	d811      	bhi.n	8003ec4 <UART_SetConfig+0x1b8>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <UART_SetConfig+0x1a0>
 8003ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea8:	d006      	beq.n	8003eb8 <UART_SetConfig+0x1ac>
 8003eaa:	e00b      	b.n	8003ec4 <UART_SetConfig+0x1b8>
 8003eac:	2300      	movs	r3, #0
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e037      	b.n	8003f22 <UART_SetConfig+0x216>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	77fb      	strb	r3, [r7, #31]
 8003eb6:	e034      	b.n	8003f22 <UART_SetConfig+0x216>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e031      	b.n	8003f22 <UART_SetConfig+0x216>
 8003ebe:	2308      	movs	r3, #8
 8003ec0:	77fb      	strb	r3, [r7, #31]
 8003ec2:	e02e      	b.n	8003f22 <UART_SetConfig+0x216>
 8003ec4:	2310      	movs	r3, #16
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e02b      	b.n	8003f22 <UART_SetConfig+0x216>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a5b      	ldr	r2, [pc, #364]	; (800403c <UART_SetConfig+0x330>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d124      	bne.n	8003f1e <UART_SetConfig+0x212>
 8003ed4:	4b55      	ldr	r3, [pc, #340]	; (800402c <UART_SetConfig+0x320>)
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003edc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ee0:	d011      	beq.n	8003f06 <UART_SetConfig+0x1fa>
 8003ee2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ee6:	d817      	bhi.n	8003f18 <UART_SetConfig+0x20c>
 8003ee8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eec:	d011      	beq.n	8003f12 <UART_SetConfig+0x206>
 8003eee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ef2:	d811      	bhi.n	8003f18 <UART_SetConfig+0x20c>
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <UART_SetConfig+0x1f4>
 8003ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003efc:	d006      	beq.n	8003f0c <UART_SetConfig+0x200>
 8003efe:	e00b      	b.n	8003f18 <UART_SetConfig+0x20c>
 8003f00:	2300      	movs	r3, #0
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e00d      	b.n	8003f22 <UART_SetConfig+0x216>
 8003f06:	2302      	movs	r3, #2
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e00a      	b.n	8003f22 <UART_SetConfig+0x216>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e007      	b.n	8003f22 <UART_SetConfig+0x216>
 8003f12:	2308      	movs	r3, #8
 8003f14:	77fb      	strb	r3, [r7, #31]
 8003f16:	e004      	b.n	8003f22 <UART_SetConfig+0x216>
 8003f18:	2310      	movs	r3, #16
 8003f1a:	77fb      	strb	r3, [r7, #31]
 8003f1c:	e001      	b.n	8003f22 <UART_SetConfig+0x216>
 8003f1e:	2310      	movs	r3, #16
 8003f20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2a:	d15c      	bne.n	8003fe6 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8003f2c:	7ffb      	ldrb	r3, [r7, #31]
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d827      	bhi.n	8003f82 <UART_SetConfig+0x276>
 8003f32:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <UART_SetConfig+0x22c>)
 8003f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f38:	08003f5d 	.word	0x08003f5d
 8003f3c:	08003f65 	.word	0x08003f65
 8003f40:	08003f6d 	.word	0x08003f6d
 8003f44:	08003f83 	.word	0x08003f83
 8003f48:	08003f73 	.word	0x08003f73
 8003f4c:	08003f83 	.word	0x08003f83
 8003f50:	08003f83 	.word	0x08003f83
 8003f54:	08003f83 	.word	0x08003f83
 8003f58:	08003f7b 	.word	0x08003f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f5c:	f7ff f868 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 8003f60:	61b8      	str	r0, [r7, #24]
        break;
 8003f62:	e013      	b.n	8003f8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f64:	f7ff f886 	bl	8003074 <HAL_RCC_GetPCLK2Freq>
 8003f68:	61b8      	str	r0, [r7, #24]
        break;
 8003f6a:	e00f      	b.n	8003f8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f6c:	4b34      	ldr	r3, [pc, #208]	; (8004040 <UART_SetConfig+0x334>)
 8003f6e:	61bb      	str	r3, [r7, #24]
        break;
 8003f70:	e00c      	b.n	8003f8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f72:	f7fe ffe7 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 8003f76:	61b8      	str	r0, [r7, #24]
        break;
 8003f78:	e008      	b.n	8003f8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7e:	61bb      	str	r3, [r7, #24]
        break;
 8003f80:	e004      	b.n	8003f8c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	77bb      	strb	r3, [r7, #30]
        break;
 8003f8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8084 	beq.w	800409c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	005a      	lsls	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	085b      	lsrs	r3, r3, #1
 8003f9e:	441a      	add	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	2b0f      	cmp	r3, #15
 8003fb0:	d916      	bls.n	8003fe0 <UART_SetConfig+0x2d4>
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb8:	d212      	bcs.n	8003fe0 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	f023 030f 	bic.w	r3, r3, #15
 8003fc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	89fb      	ldrh	r3, [r7, #14]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	89fa      	ldrh	r2, [r7, #14]
 8003fdc:	60da      	str	r2, [r3, #12]
 8003fde:	e05d      	b.n	800409c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	77bb      	strb	r3, [r7, #30]
 8003fe4:	e05a      	b.n	800409c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fe6:	7ffb      	ldrb	r3, [r7, #31]
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d836      	bhi.n	800405a <UART_SetConfig+0x34e>
 8003fec:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <UART_SetConfig+0x2e8>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	08004019 	.word	0x08004019
 8003ff8:	08004021 	.word	0x08004021
 8003ffc:	08004045 	.word	0x08004045
 8004000:	0800405b 	.word	0x0800405b
 8004004:	0800404b 	.word	0x0800404b
 8004008:	0800405b 	.word	0x0800405b
 800400c:	0800405b 	.word	0x0800405b
 8004010:	0800405b 	.word	0x0800405b
 8004014:	08004053 	.word	0x08004053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004018:	f7ff f80a 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 800401c:	61b8      	str	r0, [r7, #24]
        break;
 800401e:	e021      	b.n	8004064 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004020:	f7ff f828 	bl	8003074 <HAL_RCC_GetPCLK2Freq>
 8004024:	61b8      	str	r0, [r7, #24]
        break;
 8004026:	e01d      	b.n	8004064 <UART_SetConfig+0x358>
 8004028:	40013800 	.word	0x40013800
 800402c:	40021000 	.word	0x40021000
 8004030:	40004400 	.word	0x40004400
 8004034:	40004800 	.word	0x40004800
 8004038:	40004c00 	.word	0x40004c00
 800403c:	40005000 	.word	0x40005000
 8004040:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004044:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <UART_SetConfig+0x3a8>)
 8004046:	61bb      	str	r3, [r7, #24]
        break;
 8004048:	e00c      	b.n	8004064 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404a:	f7fe ff7b 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 800404e:	61b8      	str	r0, [r7, #24]
        break;
 8004050:	e008      	b.n	8004064 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004056:	61bb      	str	r3, [r7, #24]
        break;
 8004058:	e004      	b.n	8004064 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	77bb      	strb	r3, [r7, #30]
        break;
 8004062:	bf00      	nop
    }

    if (pclk != 0U)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d018      	beq.n	800409c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	085a      	lsrs	r2, r3, #1
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	441a      	add	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	fbb2 f3f3 	udiv	r3, r2, r3
 800407c:	b29b      	uxth	r3, r3
 800407e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	2b0f      	cmp	r3, #15
 8004084:	d908      	bls.n	8004098 <UART_SetConfig+0x38c>
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800408c:	d204      	bcs.n	8004098 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	60da      	str	r2, [r3, #12]
 8004096:	e001      	b.n	800409c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80040a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	007a1200 	.word	0x007a1200

080040b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01a      	beq.n	80041ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b6:	d10a      	bne.n	80041ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  }
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af02      	add	r7, sp, #8
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800420c:	f7fd fa20 	bl	8001650 <HAL_GetTick>
 8004210:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b08      	cmp	r3, #8
 800421e:	d10e      	bne.n	800423e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f82d 	bl	800428e <UART_WaitOnFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e023      	b.n	8004286 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b04      	cmp	r3, #4
 800424a:	d10e      	bne.n	800426a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800424c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f817 	bl	800428e <UART_WaitOnFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e00d      	b.n	8004286 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2220      	movs	r2, #32
 8004274:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b09c      	sub	sp, #112	; 0x70
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	4613      	mov	r3, r2
 800429c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429e:	e0a5      	b.n	80043ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a6:	f000 80a1 	beq.w	80043ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042aa:	f7fd f9d1 	bl	8001650 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d302      	bcc.n	80042c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80042ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d13e      	bne.n	800433e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042d4:	667b      	str	r3, [r7, #100]	; 0x64
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e6      	bne.n	80042c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3308      	adds	r3, #8
 80042f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	663b      	str	r3, [r7, #96]	; 0x60
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3308      	adds	r3, #8
 8004310:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004312:	64ba      	str	r2, [r7, #72]	; 0x48
 8004314:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e5      	bne.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e067      	b.n	800440e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d04f      	beq.n	80043ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435a:	d147      	bne.n	80043ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004364:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800437a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004384:	637b      	str	r3, [r7, #52]	; 0x34
 8004386:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800438a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e6      	bne.n	8004366 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	613b      	str	r3, [r7, #16]
   return(result);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3308      	adds	r3, #8
 80043b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043b8:	623a      	str	r2, [r7, #32]
 80043ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	69f9      	ldr	r1, [r7, #28]
 80043be:	6a3a      	ldr	r2, [r7, #32]
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e5      	bne.n	8004398 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e010      	b.n	800440e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69da      	ldr	r2, [r3, #28]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4013      	ands	r3, r2
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	bf0c      	ite	eq
 80043fc:	2301      	moveq	r3, #1
 80043fe:	2300      	movne	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	429a      	cmp	r2, r3
 8004408:	f43f af4a 	beq.w	80042a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3770      	adds	r7, #112	; 0x70
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <__errno>:
 8004418:	4b01      	ldr	r3, [pc, #4]	; (8004420 <__errno+0x8>)
 800441a:	6818      	ldr	r0, [r3, #0]
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20000010 	.word	0x20000010

08004424 <__libc_init_array>:
 8004424:	b570      	push	{r4, r5, r6, lr}
 8004426:	4d0d      	ldr	r5, [pc, #52]	; (800445c <__libc_init_array+0x38>)
 8004428:	4c0d      	ldr	r4, [pc, #52]	; (8004460 <__libc_init_array+0x3c>)
 800442a:	1b64      	subs	r4, r4, r5
 800442c:	10a4      	asrs	r4, r4, #2
 800442e:	2600      	movs	r6, #0
 8004430:	42a6      	cmp	r6, r4
 8004432:	d109      	bne.n	8004448 <__libc_init_array+0x24>
 8004434:	4d0b      	ldr	r5, [pc, #44]	; (8004464 <__libc_init_array+0x40>)
 8004436:	4c0c      	ldr	r4, [pc, #48]	; (8004468 <__libc_init_array+0x44>)
 8004438:	f002 ff02 	bl	8007240 <_init>
 800443c:	1b64      	subs	r4, r4, r5
 800443e:	10a4      	asrs	r4, r4, #2
 8004440:	2600      	movs	r6, #0
 8004442:	42a6      	cmp	r6, r4
 8004444:	d105      	bne.n	8004452 <__libc_init_array+0x2e>
 8004446:	bd70      	pop	{r4, r5, r6, pc}
 8004448:	f855 3b04 	ldr.w	r3, [r5], #4
 800444c:	4798      	blx	r3
 800444e:	3601      	adds	r6, #1
 8004450:	e7ee      	b.n	8004430 <__libc_init_array+0xc>
 8004452:	f855 3b04 	ldr.w	r3, [r5], #4
 8004456:	4798      	blx	r3
 8004458:	3601      	adds	r6, #1
 800445a:	e7f2      	b.n	8004442 <__libc_init_array+0x1e>
 800445c:	08007684 	.word	0x08007684
 8004460:	08007684 	.word	0x08007684
 8004464:	08007684 	.word	0x08007684
 8004468:	08007688 	.word	0x08007688

0800446c <memset>:
 800446c:	4402      	add	r2, r0
 800446e:	4603      	mov	r3, r0
 8004470:	4293      	cmp	r3, r2
 8004472:	d100      	bne.n	8004476 <memset+0xa>
 8004474:	4770      	bx	lr
 8004476:	f803 1b01 	strb.w	r1, [r3], #1
 800447a:	e7f9      	b.n	8004470 <memset+0x4>

0800447c <__cvt>:
 800447c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004480:	ec55 4b10 	vmov	r4, r5, d0
 8004484:	2d00      	cmp	r5, #0
 8004486:	460e      	mov	r6, r1
 8004488:	4619      	mov	r1, r3
 800448a:	462b      	mov	r3, r5
 800448c:	bfbb      	ittet	lt
 800448e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004492:	461d      	movlt	r5, r3
 8004494:	2300      	movge	r3, #0
 8004496:	232d      	movlt	r3, #45	; 0x2d
 8004498:	700b      	strb	r3, [r1, #0]
 800449a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800449c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044a0:	4691      	mov	r9, r2
 80044a2:	f023 0820 	bic.w	r8, r3, #32
 80044a6:	bfbc      	itt	lt
 80044a8:	4622      	movlt	r2, r4
 80044aa:	4614      	movlt	r4, r2
 80044ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044b0:	d005      	beq.n	80044be <__cvt+0x42>
 80044b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80044b6:	d100      	bne.n	80044ba <__cvt+0x3e>
 80044b8:	3601      	adds	r6, #1
 80044ba:	2102      	movs	r1, #2
 80044bc:	e000      	b.n	80044c0 <__cvt+0x44>
 80044be:	2103      	movs	r1, #3
 80044c0:	ab03      	add	r3, sp, #12
 80044c2:	9301      	str	r3, [sp, #4]
 80044c4:	ab02      	add	r3, sp, #8
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	ec45 4b10 	vmov	d0, r4, r5
 80044cc:	4653      	mov	r3, sl
 80044ce:	4632      	mov	r2, r6
 80044d0:	f000 fcea 	bl	8004ea8 <_dtoa_r>
 80044d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80044d8:	4607      	mov	r7, r0
 80044da:	d102      	bne.n	80044e2 <__cvt+0x66>
 80044dc:	f019 0f01 	tst.w	r9, #1
 80044e0:	d022      	beq.n	8004528 <__cvt+0xac>
 80044e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044e6:	eb07 0906 	add.w	r9, r7, r6
 80044ea:	d110      	bne.n	800450e <__cvt+0x92>
 80044ec:	783b      	ldrb	r3, [r7, #0]
 80044ee:	2b30      	cmp	r3, #48	; 0x30
 80044f0:	d10a      	bne.n	8004508 <__cvt+0x8c>
 80044f2:	2200      	movs	r2, #0
 80044f4:	2300      	movs	r3, #0
 80044f6:	4620      	mov	r0, r4
 80044f8:	4629      	mov	r1, r5
 80044fa:	f7fc fae5 	bl	8000ac8 <__aeabi_dcmpeq>
 80044fe:	b918      	cbnz	r0, 8004508 <__cvt+0x8c>
 8004500:	f1c6 0601 	rsb	r6, r6, #1
 8004504:	f8ca 6000 	str.w	r6, [sl]
 8004508:	f8da 3000 	ldr.w	r3, [sl]
 800450c:	4499      	add	r9, r3
 800450e:	2200      	movs	r2, #0
 8004510:	2300      	movs	r3, #0
 8004512:	4620      	mov	r0, r4
 8004514:	4629      	mov	r1, r5
 8004516:	f7fc fad7 	bl	8000ac8 <__aeabi_dcmpeq>
 800451a:	b108      	cbz	r0, 8004520 <__cvt+0xa4>
 800451c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004520:	2230      	movs	r2, #48	; 0x30
 8004522:	9b03      	ldr	r3, [sp, #12]
 8004524:	454b      	cmp	r3, r9
 8004526:	d307      	bcc.n	8004538 <__cvt+0xbc>
 8004528:	9b03      	ldr	r3, [sp, #12]
 800452a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800452c:	1bdb      	subs	r3, r3, r7
 800452e:	4638      	mov	r0, r7
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	b004      	add	sp, #16
 8004534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004538:	1c59      	adds	r1, r3, #1
 800453a:	9103      	str	r1, [sp, #12]
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	e7f0      	b.n	8004522 <__cvt+0xa6>

08004540 <__exponent>:
 8004540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004542:	4603      	mov	r3, r0
 8004544:	2900      	cmp	r1, #0
 8004546:	bfb8      	it	lt
 8004548:	4249      	neglt	r1, r1
 800454a:	f803 2b02 	strb.w	r2, [r3], #2
 800454e:	bfb4      	ite	lt
 8004550:	222d      	movlt	r2, #45	; 0x2d
 8004552:	222b      	movge	r2, #43	; 0x2b
 8004554:	2909      	cmp	r1, #9
 8004556:	7042      	strb	r2, [r0, #1]
 8004558:	dd2a      	ble.n	80045b0 <__exponent+0x70>
 800455a:	f10d 0407 	add.w	r4, sp, #7
 800455e:	46a4      	mov	ip, r4
 8004560:	270a      	movs	r7, #10
 8004562:	46a6      	mov	lr, r4
 8004564:	460a      	mov	r2, r1
 8004566:	fb91 f6f7 	sdiv	r6, r1, r7
 800456a:	fb07 1516 	mls	r5, r7, r6, r1
 800456e:	3530      	adds	r5, #48	; 0x30
 8004570:	2a63      	cmp	r2, #99	; 0x63
 8004572:	f104 34ff 	add.w	r4, r4, #4294967295
 8004576:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800457a:	4631      	mov	r1, r6
 800457c:	dcf1      	bgt.n	8004562 <__exponent+0x22>
 800457e:	3130      	adds	r1, #48	; 0x30
 8004580:	f1ae 0502 	sub.w	r5, lr, #2
 8004584:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004588:	1c44      	adds	r4, r0, #1
 800458a:	4629      	mov	r1, r5
 800458c:	4561      	cmp	r1, ip
 800458e:	d30a      	bcc.n	80045a6 <__exponent+0x66>
 8004590:	f10d 0209 	add.w	r2, sp, #9
 8004594:	eba2 020e 	sub.w	r2, r2, lr
 8004598:	4565      	cmp	r5, ip
 800459a:	bf88      	it	hi
 800459c:	2200      	movhi	r2, #0
 800459e:	4413      	add	r3, r2
 80045a0:	1a18      	subs	r0, r3, r0
 80045a2:	b003      	add	sp, #12
 80045a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80045ae:	e7ed      	b.n	800458c <__exponent+0x4c>
 80045b0:	2330      	movs	r3, #48	; 0x30
 80045b2:	3130      	adds	r1, #48	; 0x30
 80045b4:	7083      	strb	r3, [r0, #2]
 80045b6:	70c1      	strb	r1, [r0, #3]
 80045b8:	1d03      	adds	r3, r0, #4
 80045ba:	e7f1      	b.n	80045a0 <__exponent+0x60>

080045bc <_printf_float>:
 80045bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c0:	ed2d 8b02 	vpush	{d8}
 80045c4:	b08d      	sub	sp, #52	; 0x34
 80045c6:	460c      	mov	r4, r1
 80045c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80045cc:	4616      	mov	r6, r2
 80045ce:	461f      	mov	r7, r3
 80045d0:	4605      	mov	r5, r0
 80045d2:	f001 fa57 	bl	8005a84 <_localeconv_r>
 80045d6:	f8d0 a000 	ldr.w	sl, [r0]
 80045da:	4650      	mov	r0, sl
 80045dc:	f7fb fdf8 	bl	80001d0 <strlen>
 80045e0:	2300      	movs	r3, #0
 80045e2:	930a      	str	r3, [sp, #40]	; 0x28
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	9305      	str	r3, [sp, #20]
 80045e8:	f8d8 3000 	ldr.w	r3, [r8]
 80045ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80045f0:	3307      	adds	r3, #7
 80045f2:	f023 0307 	bic.w	r3, r3, #7
 80045f6:	f103 0208 	add.w	r2, r3, #8
 80045fa:	f8c8 2000 	str.w	r2, [r8]
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004606:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800460a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800460e:	9307      	str	r3, [sp, #28]
 8004610:	f8cd 8018 	str.w	r8, [sp, #24]
 8004614:	ee08 0a10 	vmov	s16, r0
 8004618:	4b9f      	ldr	r3, [pc, #636]	; (8004898 <_printf_float+0x2dc>)
 800461a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800461e:	f04f 32ff 	mov.w	r2, #4294967295
 8004622:	f7fc fa83 	bl	8000b2c <__aeabi_dcmpun>
 8004626:	bb88      	cbnz	r0, 800468c <_printf_float+0xd0>
 8004628:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800462c:	4b9a      	ldr	r3, [pc, #616]	; (8004898 <_printf_float+0x2dc>)
 800462e:	f04f 32ff 	mov.w	r2, #4294967295
 8004632:	f7fc fa5d 	bl	8000af0 <__aeabi_dcmple>
 8004636:	bb48      	cbnz	r0, 800468c <_printf_float+0xd0>
 8004638:	2200      	movs	r2, #0
 800463a:	2300      	movs	r3, #0
 800463c:	4640      	mov	r0, r8
 800463e:	4649      	mov	r1, r9
 8004640:	f7fc fa4c 	bl	8000adc <__aeabi_dcmplt>
 8004644:	b110      	cbz	r0, 800464c <_printf_float+0x90>
 8004646:	232d      	movs	r3, #45	; 0x2d
 8004648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800464c:	4b93      	ldr	r3, [pc, #588]	; (800489c <_printf_float+0x2e0>)
 800464e:	4894      	ldr	r0, [pc, #592]	; (80048a0 <_printf_float+0x2e4>)
 8004650:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004654:	bf94      	ite	ls
 8004656:	4698      	movls	r8, r3
 8004658:	4680      	movhi	r8, r0
 800465a:	2303      	movs	r3, #3
 800465c:	6123      	str	r3, [r4, #16]
 800465e:	9b05      	ldr	r3, [sp, #20]
 8004660:	f023 0204 	bic.w	r2, r3, #4
 8004664:	6022      	str	r2, [r4, #0]
 8004666:	f04f 0900 	mov.w	r9, #0
 800466a:	9700      	str	r7, [sp, #0]
 800466c:	4633      	mov	r3, r6
 800466e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004670:	4621      	mov	r1, r4
 8004672:	4628      	mov	r0, r5
 8004674:	f000 f9d8 	bl	8004a28 <_printf_common>
 8004678:	3001      	adds	r0, #1
 800467a:	f040 8090 	bne.w	800479e <_printf_float+0x1e2>
 800467e:	f04f 30ff 	mov.w	r0, #4294967295
 8004682:	b00d      	add	sp, #52	; 0x34
 8004684:	ecbd 8b02 	vpop	{d8}
 8004688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800468c:	4642      	mov	r2, r8
 800468e:	464b      	mov	r3, r9
 8004690:	4640      	mov	r0, r8
 8004692:	4649      	mov	r1, r9
 8004694:	f7fc fa4a 	bl	8000b2c <__aeabi_dcmpun>
 8004698:	b140      	cbz	r0, 80046ac <_printf_float+0xf0>
 800469a:	464b      	mov	r3, r9
 800469c:	2b00      	cmp	r3, #0
 800469e:	bfbc      	itt	lt
 80046a0:	232d      	movlt	r3, #45	; 0x2d
 80046a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046a6:	487f      	ldr	r0, [pc, #508]	; (80048a4 <_printf_float+0x2e8>)
 80046a8:	4b7f      	ldr	r3, [pc, #508]	; (80048a8 <_printf_float+0x2ec>)
 80046aa:	e7d1      	b.n	8004650 <_printf_float+0x94>
 80046ac:	6863      	ldr	r3, [r4, #4]
 80046ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80046b2:	9206      	str	r2, [sp, #24]
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	d13f      	bne.n	8004738 <_printf_float+0x17c>
 80046b8:	2306      	movs	r3, #6
 80046ba:	6063      	str	r3, [r4, #4]
 80046bc:	9b05      	ldr	r3, [sp, #20]
 80046be:	6861      	ldr	r1, [r4, #4]
 80046c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80046c4:	2300      	movs	r3, #0
 80046c6:	9303      	str	r3, [sp, #12]
 80046c8:	ab0a      	add	r3, sp, #40	; 0x28
 80046ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80046ce:	ab09      	add	r3, sp, #36	; 0x24
 80046d0:	ec49 8b10 	vmov	d0, r8, r9
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	6022      	str	r2, [r4, #0]
 80046d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80046dc:	4628      	mov	r0, r5
 80046de:	f7ff fecd 	bl	800447c <__cvt>
 80046e2:	9b06      	ldr	r3, [sp, #24]
 80046e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046e6:	2b47      	cmp	r3, #71	; 0x47
 80046e8:	4680      	mov	r8, r0
 80046ea:	d108      	bne.n	80046fe <_printf_float+0x142>
 80046ec:	1cc8      	adds	r0, r1, #3
 80046ee:	db02      	blt.n	80046f6 <_printf_float+0x13a>
 80046f0:	6863      	ldr	r3, [r4, #4]
 80046f2:	4299      	cmp	r1, r3
 80046f4:	dd41      	ble.n	800477a <_printf_float+0x1be>
 80046f6:	f1ab 0b02 	sub.w	fp, fp, #2
 80046fa:	fa5f fb8b 	uxtb.w	fp, fp
 80046fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004702:	d820      	bhi.n	8004746 <_printf_float+0x18a>
 8004704:	3901      	subs	r1, #1
 8004706:	465a      	mov	r2, fp
 8004708:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800470c:	9109      	str	r1, [sp, #36]	; 0x24
 800470e:	f7ff ff17 	bl	8004540 <__exponent>
 8004712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004714:	1813      	adds	r3, r2, r0
 8004716:	2a01      	cmp	r2, #1
 8004718:	4681      	mov	r9, r0
 800471a:	6123      	str	r3, [r4, #16]
 800471c:	dc02      	bgt.n	8004724 <_printf_float+0x168>
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	07d2      	lsls	r2, r2, #31
 8004722:	d501      	bpl.n	8004728 <_printf_float+0x16c>
 8004724:	3301      	adds	r3, #1
 8004726:	6123      	str	r3, [r4, #16]
 8004728:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800472c:	2b00      	cmp	r3, #0
 800472e:	d09c      	beq.n	800466a <_printf_float+0xae>
 8004730:	232d      	movs	r3, #45	; 0x2d
 8004732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004736:	e798      	b.n	800466a <_printf_float+0xae>
 8004738:	9a06      	ldr	r2, [sp, #24]
 800473a:	2a47      	cmp	r2, #71	; 0x47
 800473c:	d1be      	bne.n	80046bc <_printf_float+0x100>
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1bc      	bne.n	80046bc <_printf_float+0x100>
 8004742:	2301      	movs	r3, #1
 8004744:	e7b9      	b.n	80046ba <_printf_float+0xfe>
 8004746:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800474a:	d118      	bne.n	800477e <_printf_float+0x1c2>
 800474c:	2900      	cmp	r1, #0
 800474e:	6863      	ldr	r3, [r4, #4]
 8004750:	dd0b      	ble.n	800476a <_printf_float+0x1ae>
 8004752:	6121      	str	r1, [r4, #16]
 8004754:	b913      	cbnz	r3, 800475c <_printf_float+0x1a0>
 8004756:	6822      	ldr	r2, [r4, #0]
 8004758:	07d0      	lsls	r0, r2, #31
 800475a:	d502      	bpl.n	8004762 <_printf_float+0x1a6>
 800475c:	3301      	adds	r3, #1
 800475e:	440b      	add	r3, r1
 8004760:	6123      	str	r3, [r4, #16]
 8004762:	65a1      	str	r1, [r4, #88]	; 0x58
 8004764:	f04f 0900 	mov.w	r9, #0
 8004768:	e7de      	b.n	8004728 <_printf_float+0x16c>
 800476a:	b913      	cbnz	r3, 8004772 <_printf_float+0x1b6>
 800476c:	6822      	ldr	r2, [r4, #0]
 800476e:	07d2      	lsls	r2, r2, #31
 8004770:	d501      	bpl.n	8004776 <_printf_float+0x1ba>
 8004772:	3302      	adds	r3, #2
 8004774:	e7f4      	b.n	8004760 <_printf_float+0x1a4>
 8004776:	2301      	movs	r3, #1
 8004778:	e7f2      	b.n	8004760 <_printf_float+0x1a4>
 800477a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800477e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004780:	4299      	cmp	r1, r3
 8004782:	db05      	blt.n	8004790 <_printf_float+0x1d4>
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	6121      	str	r1, [r4, #16]
 8004788:	07d8      	lsls	r0, r3, #31
 800478a:	d5ea      	bpl.n	8004762 <_printf_float+0x1a6>
 800478c:	1c4b      	adds	r3, r1, #1
 800478e:	e7e7      	b.n	8004760 <_printf_float+0x1a4>
 8004790:	2900      	cmp	r1, #0
 8004792:	bfd4      	ite	le
 8004794:	f1c1 0202 	rsble	r2, r1, #2
 8004798:	2201      	movgt	r2, #1
 800479a:	4413      	add	r3, r2
 800479c:	e7e0      	b.n	8004760 <_printf_float+0x1a4>
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	055a      	lsls	r2, r3, #21
 80047a2:	d407      	bmi.n	80047b4 <_printf_float+0x1f8>
 80047a4:	6923      	ldr	r3, [r4, #16]
 80047a6:	4642      	mov	r2, r8
 80047a8:	4631      	mov	r1, r6
 80047aa:	4628      	mov	r0, r5
 80047ac:	47b8      	blx	r7
 80047ae:	3001      	adds	r0, #1
 80047b0:	d12c      	bne.n	800480c <_printf_float+0x250>
 80047b2:	e764      	b.n	800467e <_printf_float+0xc2>
 80047b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047b8:	f240 80e0 	bls.w	800497c <_printf_float+0x3c0>
 80047bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047c0:	2200      	movs	r2, #0
 80047c2:	2300      	movs	r3, #0
 80047c4:	f7fc f980 	bl	8000ac8 <__aeabi_dcmpeq>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d034      	beq.n	8004836 <_printf_float+0x27a>
 80047cc:	4a37      	ldr	r2, [pc, #220]	; (80048ac <_printf_float+0x2f0>)
 80047ce:	2301      	movs	r3, #1
 80047d0:	4631      	mov	r1, r6
 80047d2:	4628      	mov	r0, r5
 80047d4:	47b8      	blx	r7
 80047d6:	3001      	adds	r0, #1
 80047d8:	f43f af51 	beq.w	800467e <_printf_float+0xc2>
 80047dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047e0:	429a      	cmp	r2, r3
 80047e2:	db02      	blt.n	80047ea <_printf_float+0x22e>
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	07d8      	lsls	r0, r3, #31
 80047e8:	d510      	bpl.n	800480c <_printf_float+0x250>
 80047ea:	ee18 3a10 	vmov	r3, s16
 80047ee:	4652      	mov	r2, sl
 80047f0:	4631      	mov	r1, r6
 80047f2:	4628      	mov	r0, r5
 80047f4:	47b8      	blx	r7
 80047f6:	3001      	adds	r0, #1
 80047f8:	f43f af41 	beq.w	800467e <_printf_float+0xc2>
 80047fc:	f04f 0800 	mov.w	r8, #0
 8004800:	f104 091a 	add.w	r9, r4, #26
 8004804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004806:	3b01      	subs	r3, #1
 8004808:	4543      	cmp	r3, r8
 800480a:	dc09      	bgt.n	8004820 <_printf_float+0x264>
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	079b      	lsls	r3, r3, #30
 8004810:	f100 8105 	bmi.w	8004a1e <_printf_float+0x462>
 8004814:	68e0      	ldr	r0, [r4, #12]
 8004816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004818:	4298      	cmp	r0, r3
 800481a:	bfb8      	it	lt
 800481c:	4618      	movlt	r0, r3
 800481e:	e730      	b.n	8004682 <_printf_float+0xc6>
 8004820:	2301      	movs	r3, #1
 8004822:	464a      	mov	r2, r9
 8004824:	4631      	mov	r1, r6
 8004826:	4628      	mov	r0, r5
 8004828:	47b8      	blx	r7
 800482a:	3001      	adds	r0, #1
 800482c:	f43f af27 	beq.w	800467e <_printf_float+0xc2>
 8004830:	f108 0801 	add.w	r8, r8, #1
 8004834:	e7e6      	b.n	8004804 <_printf_float+0x248>
 8004836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004838:	2b00      	cmp	r3, #0
 800483a:	dc39      	bgt.n	80048b0 <_printf_float+0x2f4>
 800483c:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <_printf_float+0x2f0>)
 800483e:	2301      	movs	r3, #1
 8004840:	4631      	mov	r1, r6
 8004842:	4628      	mov	r0, r5
 8004844:	47b8      	blx	r7
 8004846:	3001      	adds	r0, #1
 8004848:	f43f af19 	beq.w	800467e <_printf_float+0xc2>
 800484c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004850:	4313      	orrs	r3, r2
 8004852:	d102      	bne.n	800485a <_printf_float+0x29e>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	07d9      	lsls	r1, r3, #31
 8004858:	d5d8      	bpl.n	800480c <_printf_float+0x250>
 800485a:	ee18 3a10 	vmov	r3, s16
 800485e:	4652      	mov	r2, sl
 8004860:	4631      	mov	r1, r6
 8004862:	4628      	mov	r0, r5
 8004864:	47b8      	blx	r7
 8004866:	3001      	adds	r0, #1
 8004868:	f43f af09 	beq.w	800467e <_printf_float+0xc2>
 800486c:	f04f 0900 	mov.w	r9, #0
 8004870:	f104 0a1a 	add.w	sl, r4, #26
 8004874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004876:	425b      	negs	r3, r3
 8004878:	454b      	cmp	r3, r9
 800487a:	dc01      	bgt.n	8004880 <_printf_float+0x2c4>
 800487c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800487e:	e792      	b.n	80047a6 <_printf_float+0x1ea>
 8004880:	2301      	movs	r3, #1
 8004882:	4652      	mov	r2, sl
 8004884:	4631      	mov	r1, r6
 8004886:	4628      	mov	r0, r5
 8004888:	47b8      	blx	r7
 800488a:	3001      	adds	r0, #1
 800488c:	f43f aef7 	beq.w	800467e <_printf_float+0xc2>
 8004890:	f109 0901 	add.w	r9, r9, #1
 8004894:	e7ee      	b.n	8004874 <_printf_float+0x2b8>
 8004896:	bf00      	nop
 8004898:	7fefffff 	.word	0x7fefffff
 800489c:	080072b0 	.word	0x080072b0
 80048a0:	080072b4 	.word	0x080072b4
 80048a4:	080072bc 	.word	0x080072bc
 80048a8:	080072b8 	.word	0x080072b8
 80048ac:	080072c0 	.word	0x080072c0
 80048b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048b4:	429a      	cmp	r2, r3
 80048b6:	bfa8      	it	ge
 80048b8:	461a      	movge	r2, r3
 80048ba:	2a00      	cmp	r2, #0
 80048bc:	4691      	mov	r9, r2
 80048be:	dc37      	bgt.n	8004930 <_printf_float+0x374>
 80048c0:	f04f 0b00 	mov.w	fp, #0
 80048c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048c8:	f104 021a 	add.w	r2, r4, #26
 80048cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048ce:	9305      	str	r3, [sp, #20]
 80048d0:	eba3 0309 	sub.w	r3, r3, r9
 80048d4:	455b      	cmp	r3, fp
 80048d6:	dc33      	bgt.n	8004940 <_printf_float+0x384>
 80048d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048dc:	429a      	cmp	r2, r3
 80048de:	db3b      	blt.n	8004958 <_printf_float+0x39c>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	07da      	lsls	r2, r3, #31
 80048e4:	d438      	bmi.n	8004958 <_printf_float+0x39c>
 80048e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048e8:	9a05      	ldr	r2, [sp, #20]
 80048ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048ec:	1a9a      	subs	r2, r3, r2
 80048ee:	eba3 0901 	sub.w	r9, r3, r1
 80048f2:	4591      	cmp	r9, r2
 80048f4:	bfa8      	it	ge
 80048f6:	4691      	movge	r9, r2
 80048f8:	f1b9 0f00 	cmp.w	r9, #0
 80048fc:	dc35      	bgt.n	800496a <_printf_float+0x3ae>
 80048fe:	f04f 0800 	mov.w	r8, #0
 8004902:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004906:	f104 0a1a 	add.w	sl, r4, #26
 800490a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	eba3 0309 	sub.w	r3, r3, r9
 8004914:	4543      	cmp	r3, r8
 8004916:	f77f af79 	ble.w	800480c <_printf_float+0x250>
 800491a:	2301      	movs	r3, #1
 800491c:	4652      	mov	r2, sl
 800491e:	4631      	mov	r1, r6
 8004920:	4628      	mov	r0, r5
 8004922:	47b8      	blx	r7
 8004924:	3001      	adds	r0, #1
 8004926:	f43f aeaa 	beq.w	800467e <_printf_float+0xc2>
 800492a:	f108 0801 	add.w	r8, r8, #1
 800492e:	e7ec      	b.n	800490a <_printf_float+0x34e>
 8004930:	4613      	mov	r3, r2
 8004932:	4631      	mov	r1, r6
 8004934:	4642      	mov	r2, r8
 8004936:	4628      	mov	r0, r5
 8004938:	47b8      	blx	r7
 800493a:	3001      	adds	r0, #1
 800493c:	d1c0      	bne.n	80048c0 <_printf_float+0x304>
 800493e:	e69e      	b.n	800467e <_printf_float+0xc2>
 8004940:	2301      	movs	r3, #1
 8004942:	4631      	mov	r1, r6
 8004944:	4628      	mov	r0, r5
 8004946:	9205      	str	r2, [sp, #20]
 8004948:	47b8      	blx	r7
 800494a:	3001      	adds	r0, #1
 800494c:	f43f ae97 	beq.w	800467e <_printf_float+0xc2>
 8004950:	9a05      	ldr	r2, [sp, #20]
 8004952:	f10b 0b01 	add.w	fp, fp, #1
 8004956:	e7b9      	b.n	80048cc <_printf_float+0x310>
 8004958:	ee18 3a10 	vmov	r3, s16
 800495c:	4652      	mov	r2, sl
 800495e:	4631      	mov	r1, r6
 8004960:	4628      	mov	r0, r5
 8004962:	47b8      	blx	r7
 8004964:	3001      	adds	r0, #1
 8004966:	d1be      	bne.n	80048e6 <_printf_float+0x32a>
 8004968:	e689      	b.n	800467e <_printf_float+0xc2>
 800496a:	9a05      	ldr	r2, [sp, #20]
 800496c:	464b      	mov	r3, r9
 800496e:	4442      	add	r2, r8
 8004970:	4631      	mov	r1, r6
 8004972:	4628      	mov	r0, r5
 8004974:	47b8      	blx	r7
 8004976:	3001      	adds	r0, #1
 8004978:	d1c1      	bne.n	80048fe <_printf_float+0x342>
 800497a:	e680      	b.n	800467e <_printf_float+0xc2>
 800497c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800497e:	2a01      	cmp	r2, #1
 8004980:	dc01      	bgt.n	8004986 <_printf_float+0x3ca>
 8004982:	07db      	lsls	r3, r3, #31
 8004984:	d538      	bpl.n	80049f8 <_printf_float+0x43c>
 8004986:	2301      	movs	r3, #1
 8004988:	4642      	mov	r2, r8
 800498a:	4631      	mov	r1, r6
 800498c:	4628      	mov	r0, r5
 800498e:	47b8      	blx	r7
 8004990:	3001      	adds	r0, #1
 8004992:	f43f ae74 	beq.w	800467e <_printf_float+0xc2>
 8004996:	ee18 3a10 	vmov	r3, s16
 800499a:	4652      	mov	r2, sl
 800499c:	4631      	mov	r1, r6
 800499e:	4628      	mov	r0, r5
 80049a0:	47b8      	blx	r7
 80049a2:	3001      	adds	r0, #1
 80049a4:	f43f ae6b 	beq.w	800467e <_printf_float+0xc2>
 80049a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049ac:	2200      	movs	r2, #0
 80049ae:	2300      	movs	r3, #0
 80049b0:	f7fc f88a 	bl	8000ac8 <__aeabi_dcmpeq>
 80049b4:	b9d8      	cbnz	r0, 80049ee <_printf_float+0x432>
 80049b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049b8:	f108 0201 	add.w	r2, r8, #1
 80049bc:	3b01      	subs	r3, #1
 80049be:	4631      	mov	r1, r6
 80049c0:	4628      	mov	r0, r5
 80049c2:	47b8      	blx	r7
 80049c4:	3001      	adds	r0, #1
 80049c6:	d10e      	bne.n	80049e6 <_printf_float+0x42a>
 80049c8:	e659      	b.n	800467e <_printf_float+0xc2>
 80049ca:	2301      	movs	r3, #1
 80049cc:	4652      	mov	r2, sl
 80049ce:	4631      	mov	r1, r6
 80049d0:	4628      	mov	r0, r5
 80049d2:	47b8      	blx	r7
 80049d4:	3001      	adds	r0, #1
 80049d6:	f43f ae52 	beq.w	800467e <_printf_float+0xc2>
 80049da:	f108 0801 	add.w	r8, r8, #1
 80049de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e0:	3b01      	subs	r3, #1
 80049e2:	4543      	cmp	r3, r8
 80049e4:	dcf1      	bgt.n	80049ca <_printf_float+0x40e>
 80049e6:	464b      	mov	r3, r9
 80049e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049ec:	e6dc      	b.n	80047a8 <_printf_float+0x1ec>
 80049ee:	f04f 0800 	mov.w	r8, #0
 80049f2:	f104 0a1a 	add.w	sl, r4, #26
 80049f6:	e7f2      	b.n	80049de <_printf_float+0x422>
 80049f8:	2301      	movs	r3, #1
 80049fa:	4642      	mov	r2, r8
 80049fc:	e7df      	b.n	80049be <_printf_float+0x402>
 80049fe:	2301      	movs	r3, #1
 8004a00:	464a      	mov	r2, r9
 8004a02:	4631      	mov	r1, r6
 8004a04:	4628      	mov	r0, r5
 8004a06:	47b8      	blx	r7
 8004a08:	3001      	adds	r0, #1
 8004a0a:	f43f ae38 	beq.w	800467e <_printf_float+0xc2>
 8004a0e:	f108 0801 	add.w	r8, r8, #1
 8004a12:	68e3      	ldr	r3, [r4, #12]
 8004a14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a16:	1a5b      	subs	r3, r3, r1
 8004a18:	4543      	cmp	r3, r8
 8004a1a:	dcf0      	bgt.n	80049fe <_printf_float+0x442>
 8004a1c:	e6fa      	b.n	8004814 <_printf_float+0x258>
 8004a1e:	f04f 0800 	mov.w	r8, #0
 8004a22:	f104 0919 	add.w	r9, r4, #25
 8004a26:	e7f4      	b.n	8004a12 <_printf_float+0x456>

08004a28 <_printf_common>:
 8004a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a2c:	4616      	mov	r6, r2
 8004a2e:	4699      	mov	r9, r3
 8004a30:	688a      	ldr	r2, [r1, #8]
 8004a32:	690b      	ldr	r3, [r1, #16]
 8004a34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	bfb8      	it	lt
 8004a3c:	4613      	movlt	r3, r2
 8004a3e:	6033      	str	r3, [r6, #0]
 8004a40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a44:	4607      	mov	r7, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	b10a      	cbz	r2, 8004a4e <_printf_common+0x26>
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	6033      	str	r3, [r6, #0]
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	0699      	lsls	r1, r3, #26
 8004a52:	bf42      	ittt	mi
 8004a54:	6833      	ldrmi	r3, [r6, #0]
 8004a56:	3302      	addmi	r3, #2
 8004a58:	6033      	strmi	r3, [r6, #0]
 8004a5a:	6825      	ldr	r5, [r4, #0]
 8004a5c:	f015 0506 	ands.w	r5, r5, #6
 8004a60:	d106      	bne.n	8004a70 <_printf_common+0x48>
 8004a62:	f104 0a19 	add.w	sl, r4, #25
 8004a66:	68e3      	ldr	r3, [r4, #12]
 8004a68:	6832      	ldr	r2, [r6, #0]
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	42ab      	cmp	r3, r5
 8004a6e:	dc26      	bgt.n	8004abe <_printf_common+0x96>
 8004a70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a74:	1e13      	subs	r3, r2, #0
 8004a76:	6822      	ldr	r2, [r4, #0]
 8004a78:	bf18      	it	ne
 8004a7a:	2301      	movne	r3, #1
 8004a7c:	0692      	lsls	r2, r2, #26
 8004a7e:	d42b      	bmi.n	8004ad8 <_printf_common+0xb0>
 8004a80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a84:	4649      	mov	r1, r9
 8004a86:	4638      	mov	r0, r7
 8004a88:	47c0      	blx	r8
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d01e      	beq.n	8004acc <_printf_common+0xa4>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	68e5      	ldr	r5, [r4, #12]
 8004a92:	6832      	ldr	r2, [r6, #0]
 8004a94:	f003 0306 	and.w	r3, r3, #6
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	bf08      	it	eq
 8004a9c:	1aad      	subeq	r5, r5, r2
 8004a9e:	68a3      	ldr	r3, [r4, #8]
 8004aa0:	6922      	ldr	r2, [r4, #16]
 8004aa2:	bf0c      	ite	eq
 8004aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004aa8:	2500      	movne	r5, #0
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	bfc4      	itt	gt
 8004aae:	1a9b      	subgt	r3, r3, r2
 8004ab0:	18ed      	addgt	r5, r5, r3
 8004ab2:	2600      	movs	r6, #0
 8004ab4:	341a      	adds	r4, #26
 8004ab6:	42b5      	cmp	r5, r6
 8004ab8:	d11a      	bne.n	8004af0 <_printf_common+0xc8>
 8004aba:	2000      	movs	r0, #0
 8004abc:	e008      	b.n	8004ad0 <_printf_common+0xa8>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	4652      	mov	r2, sl
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	47c0      	blx	r8
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d103      	bne.n	8004ad4 <_printf_common+0xac>
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad4:	3501      	adds	r5, #1
 8004ad6:	e7c6      	b.n	8004a66 <_printf_common+0x3e>
 8004ad8:	18e1      	adds	r1, r4, r3
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	2030      	movs	r0, #48	; 0x30
 8004ade:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ae2:	4422      	add	r2, r4
 8004ae4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004aec:	3302      	adds	r3, #2
 8004aee:	e7c7      	b.n	8004a80 <_printf_common+0x58>
 8004af0:	2301      	movs	r3, #1
 8004af2:	4622      	mov	r2, r4
 8004af4:	4649      	mov	r1, r9
 8004af6:	4638      	mov	r0, r7
 8004af8:	47c0      	blx	r8
 8004afa:	3001      	adds	r0, #1
 8004afc:	d0e6      	beq.n	8004acc <_printf_common+0xa4>
 8004afe:	3601      	adds	r6, #1
 8004b00:	e7d9      	b.n	8004ab6 <_printf_common+0x8e>
	...

08004b04 <_printf_i>:
 8004b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b08:	7e0f      	ldrb	r7, [r1, #24]
 8004b0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b0c:	2f78      	cmp	r7, #120	; 0x78
 8004b0e:	4691      	mov	r9, r2
 8004b10:	4680      	mov	r8, r0
 8004b12:	460c      	mov	r4, r1
 8004b14:	469a      	mov	sl, r3
 8004b16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b1a:	d807      	bhi.n	8004b2c <_printf_i+0x28>
 8004b1c:	2f62      	cmp	r7, #98	; 0x62
 8004b1e:	d80a      	bhi.n	8004b36 <_printf_i+0x32>
 8004b20:	2f00      	cmp	r7, #0
 8004b22:	f000 80d8 	beq.w	8004cd6 <_printf_i+0x1d2>
 8004b26:	2f58      	cmp	r7, #88	; 0x58
 8004b28:	f000 80a3 	beq.w	8004c72 <_printf_i+0x16e>
 8004b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b34:	e03a      	b.n	8004bac <_printf_i+0xa8>
 8004b36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b3a:	2b15      	cmp	r3, #21
 8004b3c:	d8f6      	bhi.n	8004b2c <_printf_i+0x28>
 8004b3e:	a101      	add	r1, pc, #4	; (adr r1, 8004b44 <_printf_i+0x40>)
 8004b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b44:	08004b9d 	.word	0x08004b9d
 8004b48:	08004bb1 	.word	0x08004bb1
 8004b4c:	08004b2d 	.word	0x08004b2d
 8004b50:	08004b2d 	.word	0x08004b2d
 8004b54:	08004b2d 	.word	0x08004b2d
 8004b58:	08004b2d 	.word	0x08004b2d
 8004b5c:	08004bb1 	.word	0x08004bb1
 8004b60:	08004b2d 	.word	0x08004b2d
 8004b64:	08004b2d 	.word	0x08004b2d
 8004b68:	08004b2d 	.word	0x08004b2d
 8004b6c:	08004b2d 	.word	0x08004b2d
 8004b70:	08004cbd 	.word	0x08004cbd
 8004b74:	08004be1 	.word	0x08004be1
 8004b78:	08004c9f 	.word	0x08004c9f
 8004b7c:	08004b2d 	.word	0x08004b2d
 8004b80:	08004b2d 	.word	0x08004b2d
 8004b84:	08004cdf 	.word	0x08004cdf
 8004b88:	08004b2d 	.word	0x08004b2d
 8004b8c:	08004be1 	.word	0x08004be1
 8004b90:	08004b2d 	.word	0x08004b2d
 8004b94:	08004b2d 	.word	0x08004b2d
 8004b98:	08004ca7 	.word	0x08004ca7
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	1d1a      	adds	r2, r3, #4
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	602a      	str	r2, [r5, #0]
 8004ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bac:	2301      	movs	r3, #1
 8004bae:	e0a3      	b.n	8004cf8 <_printf_i+0x1f4>
 8004bb0:	6820      	ldr	r0, [r4, #0]
 8004bb2:	6829      	ldr	r1, [r5, #0]
 8004bb4:	0606      	lsls	r6, r0, #24
 8004bb6:	f101 0304 	add.w	r3, r1, #4
 8004bba:	d50a      	bpl.n	8004bd2 <_printf_i+0xce>
 8004bbc:	680e      	ldr	r6, [r1, #0]
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	2e00      	cmp	r6, #0
 8004bc2:	da03      	bge.n	8004bcc <_printf_i+0xc8>
 8004bc4:	232d      	movs	r3, #45	; 0x2d
 8004bc6:	4276      	negs	r6, r6
 8004bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bcc:	485e      	ldr	r0, [pc, #376]	; (8004d48 <_printf_i+0x244>)
 8004bce:	230a      	movs	r3, #10
 8004bd0:	e019      	b.n	8004c06 <_printf_i+0x102>
 8004bd2:	680e      	ldr	r6, [r1, #0]
 8004bd4:	602b      	str	r3, [r5, #0]
 8004bd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bda:	bf18      	it	ne
 8004bdc:	b236      	sxthne	r6, r6
 8004bde:	e7ef      	b.n	8004bc0 <_printf_i+0xbc>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	6820      	ldr	r0, [r4, #0]
 8004be4:	1d19      	adds	r1, r3, #4
 8004be6:	6029      	str	r1, [r5, #0]
 8004be8:	0601      	lsls	r1, r0, #24
 8004bea:	d501      	bpl.n	8004bf0 <_printf_i+0xec>
 8004bec:	681e      	ldr	r6, [r3, #0]
 8004bee:	e002      	b.n	8004bf6 <_printf_i+0xf2>
 8004bf0:	0646      	lsls	r6, r0, #25
 8004bf2:	d5fb      	bpl.n	8004bec <_printf_i+0xe8>
 8004bf4:	881e      	ldrh	r6, [r3, #0]
 8004bf6:	4854      	ldr	r0, [pc, #336]	; (8004d48 <_printf_i+0x244>)
 8004bf8:	2f6f      	cmp	r7, #111	; 0x6f
 8004bfa:	bf0c      	ite	eq
 8004bfc:	2308      	moveq	r3, #8
 8004bfe:	230a      	movne	r3, #10
 8004c00:	2100      	movs	r1, #0
 8004c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c06:	6865      	ldr	r5, [r4, #4]
 8004c08:	60a5      	str	r5, [r4, #8]
 8004c0a:	2d00      	cmp	r5, #0
 8004c0c:	bfa2      	ittt	ge
 8004c0e:	6821      	ldrge	r1, [r4, #0]
 8004c10:	f021 0104 	bicge.w	r1, r1, #4
 8004c14:	6021      	strge	r1, [r4, #0]
 8004c16:	b90e      	cbnz	r6, 8004c1c <_printf_i+0x118>
 8004c18:	2d00      	cmp	r5, #0
 8004c1a:	d04d      	beq.n	8004cb8 <_printf_i+0x1b4>
 8004c1c:	4615      	mov	r5, r2
 8004c1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c22:	fb03 6711 	mls	r7, r3, r1, r6
 8004c26:	5dc7      	ldrb	r7, [r0, r7]
 8004c28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c2c:	4637      	mov	r7, r6
 8004c2e:	42bb      	cmp	r3, r7
 8004c30:	460e      	mov	r6, r1
 8004c32:	d9f4      	bls.n	8004c1e <_printf_i+0x11a>
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d10b      	bne.n	8004c50 <_printf_i+0x14c>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	07de      	lsls	r6, r3, #31
 8004c3c:	d508      	bpl.n	8004c50 <_printf_i+0x14c>
 8004c3e:	6923      	ldr	r3, [r4, #16]
 8004c40:	6861      	ldr	r1, [r4, #4]
 8004c42:	4299      	cmp	r1, r3
 8004c44:	bfde      	ittt	le
 8004c46:	2330      	movle	r3, #48	; 0x30
 8004c48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c50:	1b52      	subs	r2, r2, r5
 8004c52:	6122      	str	r2, [r4, #16]
 8004c54:	f8cd a000 	str.w	sl, [sp]
 8004c58:	464b      	mov	r3, r9
 8004c5a:	aa03      	add	r2, sp, #12
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	4640      	mov	r0, r8
 8004c60:	f7ff fee2 	bl	8004a28 <_printf_common>
 8004c64:	3001      	adds	r0, #1
 8004c66:	d14c      	bne.n	8004d02 <_printf_i+0x1fe>
 8004c68:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6c:	b004      	add	sp, #16
 8004c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c72:	4835      	ldr	r0, [pc, #212]	; (8004d48 <_printf_i+0x244>)
 8004c74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c78:	6829      	ldr	r1, [r5, #0]
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c80:	6029      	str	r1, [r5, #0]
 8004c82:	061d      	lsls	r5, r3, #24
 8004c84:	d514      	bpl.n	8004cb0 <_printf_i+0x1ac>
 8004c86:	07df      	lsls	r7, r3, #31
 8004c88:	bf44      	itt	mi
 8004c8a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c8e:	6023      	strmi	r3, [r4, #0]
 8004c90:	b91e      	cbnz	r6, 8004c9a <_printf_i+0x196>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	f023 0320 	bic.w	r3, r3, #32
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	2310      	movs	r3, #16
 8004c9c:	e7b0      	b.n	8004c00 <_printf_i+0xfc>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	f043 0320 	orr.w	r3, r3, #32
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	2378      	movs	r3, #120	; 0x78
 8004ca8:	4828      	ldr	r0, [pc, #160]	; (8004d4c <_printf_i+0x248>)
 8004caa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cae:	e7e3      	b.n	8004c78 <_printf_i+0x174>
 8004cb0:	0659      	lsls	r1, r3, #25
 8004cb2:	bf48      	it	mi
 8004cb4:	b2b6      	uxthmi	r6, r6
 8004cb6:	e7e6      	b.n	8004c86 <_printf_i+0x182>
 8004cb8:	4615      	mov	r5, r2
 8004cba:	e7bb      	b.n	8004c34 <_printf_i+0x130>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	6826      	ldr	r6, [r4, #0]
 8004cc0:	6961      	ldr	r1, [r4, #20]
 8004cc2:	1d18      	adds	r0, r3, #4
 8004cc4:	6028      	str	r0, [r5, #0]
 8004cc6:	0635      	lsls	r5, r6, #24
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	d501      	bpl.n	8004cd0 <_printf_i+0x1cc>
 8004ccc:	6019      	str	r1, [r3, #0]
 8004cce:	e002      	b.n	8004cd6 <_printf_i+0x1d2>
 8004cd0:	0670      	lsls	r0, r6, #25
 8004cd2:	d5fb      	bpl.n	8004ccc <_printf_i+0x1c8>
 8004cd4:	8019      	strh	r1, [r3, #0]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	6123      	str	r3, [r4, #16]
 8004cda:	4615      	mov	r5, r2
 8004cdc:	e7ba      	b.n	8004c54 <_printf_i+0x150>
 8004cde:	682b      	ldr	r3, [r5, #0]
 8004ce0:	1d1a      	adds	r2, r3, #4
 8004ce2:	602a      	str	r2, [r5, #0]
 8004ce4:	681d      	ldr	r5, [r3, #0]
 8004ce6:	6862      	ldr	r2, [r4, #4]
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4628      	mov	r0, r5
 8004cec:	f7fb fa78 	bl	80001e0 <memchr>
 8004cf0:	b108      	cbz	r0, 8004cf6 <_printf_i+0x1f2>
 8004cf2:	1b40      	subs	r0, r0, r5
 8004cf4:	6060      	str	r0, [r4, #4]
 8004cf6:	6863      	ldr	r3, [r4, #4]
 8004cf8:	6123      	str	r3, [r4, #16]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d00:	e7a8      	b.n	8004c54 <_printf_i+0x150>
 8004d02:	6923      	ldr	r3, [r4, #16]
 8004d04:	462a      	mov	r2, r5
 8004d06:	4649      	mov	r1, r9
 8004d08:	4640      	mov	r0, r8
 8004d0a:	47d0      	blx	sl
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d0ab      	beq.n	8004c68 <_printf_i+0x164>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	079b      	lsls	r3, r3, #30
 8004d14:	d413      	bmi.n	8004d3e <_printf_i+0x23a>
 8004d16:	68e0      	ldr	r0, [r4, #12]
 8004d18:	9b03      	ldr	r3, [sp, #12]
 8004d1a:	4298      	cmp	r0, r3
 8004d1c:	bfb8      	it	lt
 8004d1e:	4618      	movlt	r0, r3
 8004d20:	e7a4      	b.n	8004c6c <_printf_i+0x168>
 8004d22:	2301      	movs	r3, #1
 8004d24:	4632      	mov	r2, r6
 8004d26:	4649      	mov	r1, r9
 8004d28:	4640      	mov	r0, r8
 8004d2a:	47d0      	blx	sl
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d09b      	beq.n	8004c68 <_printf_i+0x164>
 8004d30:	3501      	adds	r5, #1
 8004d32:	68e3      	ldr	r3, [r4, #12]
 8004d34:	9903      	ldr	r1, [sp, #12]
 8004d36:	1a5b      	subs	r3, r3, r1
 8004d38:	42ab      	cmp	r3, r5
 8004d3a:	dcf2      	bgt.n	8004d22 <_printf_i+0x21e>
 8004d3c:	e7eb      	b.n	8004d16 <_printf_i+0x212>
 8004d3e:	2500      	movs	r5, #0
 8004d40:	f104 0619 	add.w	r6, r4, #25
 8004d44:	e7f5      	b.n	8004d32 <_printf_i+0x22e>
 8004d46:	bf00      	nop
 8004d48:	080072c2 	.word	0x080072c2
 8004d4c:	080072d3 	.word	0x080072d3

08004d50 <siprintf>:
 8004d50:	b40e      	push	{r1, r2, r3}
 8004d52:	b500      	push	{lr}
 8004d54:	b09c      	sub	sp, #112	; 0x70
 8004d56:	ab1d      	add	r3, sp, #116	; 0x74
 8004d58:	9002      	str	r0, [sp, #8]
 8004d5a:	9006      	str	r0, [sp, #24]
 8004d5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d60:	4809      	ldr	r0, [pc, #36]	; (8004d88 <siprintf+0x38>)
 8004d62:	9107      	str	r1, [sp, #28]
 8004d64:	9104      	str	r1, [sp, #16]
 8004d66:	4909      	ldr	r1, [pc, #36]	; (8004d8c <siprintf+0x3c>)
 8004d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d6c:	9105      	str	r1, [sp, #20]
 8004d6e:	6800      	ldr	r0, [r0, #0]
 8004d70:	9301      	str	r3, [sp, #4]
 8004d72:	a902      	add	r1, sp, #8
 8004d74:	f001 fb76 	bl	8006464 <_svfiprintf_r>
 8004d78:	9b02      	ldr	r3, [sp, #8]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	b01c      	add	sp, #112	; 0x70
 8004d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d84:	b003      	add	sp, #12
 8004d86:	4770      	bx	lr
 8004d88:	20000010 	.word	0x20000010
 8004d8c:	ffff0208 	.word	0xffff0208

08004d90 <quorem>:
 8004d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d94:	6903      	ldr	r3, [r0, #16]
 8004d96:	690c      	ldr	r4, [r1, #16]
 8004d98:	42a3      	cmp	r3, r4
 8004d9a:	4607      	mov	r7, r0
 8004d9c:	f2c0 8081 	blt.w	8004ea2 <quorem+0x112>
 8004da0:	3c01      	subs	r4, #1
 8004da2:	f101 0814 	add.w	r8, r1, #20
 8004da6:	f100 0514 	add.w	r5, r0, #20
 8004daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004dae:	9301      	str	r3, [sp, #4]
 8004db0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004db4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004db8:	3301      	adds	r3, #1
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004dc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004dc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004dc8:	d331      	bcc.n	8004e2e <quorem+0x9e>
 8004dca:	f04f 0e00 	mov.w	lr, #0
 8004dce:	4640      	mov	r0, r8
 8004dd0:	46ac      	mov	ip, r5
 8004dd2:	46f2      	mov	sl, lr
 8004dd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8004dd8:	b293      	uxth	r3, r2
 8004dda:	fb06 e303 	mla	r3, r6, r3, lr
 8004dde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	ebaa 0303 	sub.w	r3, sl, r3
 8004de8:	f8dc a000 	ldr.w	sl, [ip]
 8004dec:	0c12      	lsrs	r2, r2, #16
 8004dee:	fa13 f38a 	uxtah	r3, r3, sl
 8004df2:	fb06 e202 	mla	r2, r6, r2, lr
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	9b00      	ldr	r3, [sp, #0]
 8004dfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004dfe:	b292      	uxth	r2, r2
 8004e00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004e04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e08:	f8bd 3000 	ldrh.w	r3, [sp]
 8004e0c:	4581      	cmp	r9, r0
 8004e0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e12:	f84c 3b04 	str.w	r3, [ip], #4
 8004e16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e1a:	d2db      	bcs.n	8004dd4 <quorem+0x44>
 8004e1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e20:	b92b      	cbnz	r3, 8004e2e <quorem+0x9e>
 8004e22:	9b01      	ldr	r3, [sp, #4]
 8004e24:	3b04      	subs	r3, #4
 8004e26:	429d      	cmp	r5, r3
 8004e28:	461a      	mov	r2, r3
 8004e2a:	d32e      	bcc.n	8004e8a <quorem+0xfa>
 8004e2c:	613c      	str	r4, [r7, #16]
 8004e2e:	4638      	mov	r0, r7
 8004e30:	f001 f8c4 	bl	8005fbc <__mcmp>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	db24      	blt.n	8004e82 <quorem+0xf2>
 8004e38:	3601      	adds	r6, #1
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f04f 0c00 	mov.w	ip, #0
 8004e40:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e44:	f8d0 e000 	ldr.w	lr, [r0]
 8004e48:	b293      	uxth	r3, r2
 8004e4a:	ebac 0303 	sub.w	r3, ip, r3
 8004e4e:	0c12      	lsrs	r2, r2, #16
 8004e50:	fa13 f38e 	uxtah	r3, r3, lr
 8004e54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004e58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e62:	45c1      	cmp	r9, r8
 8004e64:	f840 3b04 	str.w	r3, [r0], #4
 8004e68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e6c:	d2e8      	bcs.n	8004e40 <quorem+0xb0>
 8004e6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e76:	b922      	cbnz	r2, 8004e82 <quorem+0xf2>
 8004e78:	3b04      	subs	r3, #4
 8004e7a:	429d      	cmp	r5, r3
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	d30a      	bcc.n	8004e96 <quorem+0x106>
 8004e80:	613c      	str	r4, [r7, #16]
 8004e82:	4630      	mov	r0, r6
 8004e84:	b003      	add	sp, #12
 8004e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8a:	6812      	ldr	r2, [r2, #0]
 8004e8c:	3b04      	subs	r3, #4
 8004e8e:	2a00      	cmp	r2, #0
 8004e90:	d1cc      	bne.n	8004e2c <quorem+0x9c>
 8004e92:	3c01      	subs	r4, #1
 8004e94:	e7c7      	b.n	8004e26 <quorem+0x96>
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	3b04      	subs	r3, #4
 8004e9a:	2a00      	cmp	r2, #0
 8004e9c:	d1f0      	bne.n	8004e80 <quorem+0xf0>
 8004e9e:	3c01      	subs	r4, #1
 8004ea0:	e7eb      	b.n	8004e7a <quorem+0xea>
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	e7ee      	b.n	8004e84 <quorem+0xf4>
	...

08004ea8 <_dtoa_r>:
 8004ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eac:	ed2d 8b04 	vpush	{d8-d9}
 8004eb0:	ec57 6b10 	vmov	r6, r7, d0
 8004eb4:	b093      	sub	sp, #76	; 0x4c
 8004eb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004eb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004ebc:	9106      	str	r1, [sp, #24]
 8004ebe:	ee10 aa10 	vmov	sl, s0
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ec6:	930c      	str	r3, [sp, #48]	; 0x30
 8004ec8:	46bb      	mov	fp, r7
 8004eca:	b975      	cbnz	r5, 8004eea <_dtoa_r+0x42>
 8004ecc:	2010      	movs	r0, #16
 8004ece:	f000 fddd 	bl	8005a8c <malloc>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	6260      	str	r0, [r4, #36]	; 0x24
 8004ed6:	b920      	cbnz	r0, 8004ee2 <_dtoa_r+0x3a>
 8004ed8:	4ba7      	ldr	r3, [pc, #668]	; (8005178 <_dtoa_r+0x2d0>)
 8004eda:	21ea      	movs	r1, #234	; 0xea
 8004edc:	48a7      	ldr	r0, [pc, #668]	; (800517c <_dtoa_r+0x2d4>)
 8004ede:	f001 fbd1 	bl	8006684 <__assert_func>
 8004ee2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004ee6:	6005      	str	r5, [r0, #0]
 8004ee8:	60c5      	str	r5, [r0, #12]
 8004eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eec:	6819      	ldr	r1, [r3, #0]
 8004eee:	b151      	cbz	r1, 8004f06 <_dtoa_r+0x5e>
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	604a      	str	r2, [r1, #4]
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	4093      	lsls	r3, r2
 8004ef8:	608b      	str	r3, [r1, #8]
 8004efa:	4620      	mov	r0, r4
 8004efc:	f000 fe1c 	bl	8005b38 <_Bfree>
 8004f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	1e3b      	subs	r3, r7, #0
 8004f08:	bfaa      	itet	ge
 8004f0a:	2300      	movge	r3, #0
 8004f0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004f10:	f8c8 3000 	strge.w	r3, [r8]
 8004f14:	4b9a      	ldr	r3, [pc, #616]	; (8005180 <_dtoa_r+0x2d8>)
 8004f16:	bfbc      	itt	lt
 8004f18:	2201      	movlt	r2, #1
 8004f1a:	f8c8 2000 	strlt.w	r2, [r8]
 8004f1e:	ea33 030b 	bics.w	r3, r3, fp
 8004f22:	d11b      	bne.n	8004f5c <_dtoa_r+0xb4>
 8004f24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f26:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f30:	4333      	orrs	r3, r6
 8004f32:	f000 8592 	beq.w	8005a5a <_dtoa_r+0xbb2>
 8004f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f38:	b963      	cbnz	r3, 8004f54 <_dtoa_r+0xac>
 8004f3a:	4b92      	ldr	r3, [pc, #584]	; (8005184 <_dtoa_r+0x2dc>)
 8004f3c:	e022      	b.n	8004f84 <_dtoa_r+0xdc>
 8004f3e:	4b92      	ldr	r3, [pc, #584]	; (8005188 <_dtoa_r+0x2e0>)
 8004f40:	9301      	str	r3, [sp, #4]
 8004f42:	3308      	adds	r3, #8
 8004f44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	9801      	ldr	r0, [sp, #4]
 8004f4a:	b013      	add	sp, #76	; 0x4c
 8004f4c:	ecbd 8b04 	vpop	{d8-d9}
 8004f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f54:	4b8b      	ldr	r3, [pc, #556]	; (8005184 <_dtoa_r+0x2dc>)
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	3303      	adds	r3, #3
 8004f5a:	e7f3      	b.n	8004f44 <_dtoa_r+0x9c>
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2300      	movs	r3, #0
 8004f60:	4650      	mov	r0, sl
 8004f62:	4659      	mov	r1, fp
 8004f64:	f7fb fdb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f68:	ec4b ab19 	vmov	d9, sl, fp
 8004f6c:	4680      	mov	r8, r0
 8004f6e:	b158      	cbz	r0, 8004f88 <_dtoa_r+0xe0>
 8004f70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f72:	2301      	movs	r3, #1
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 856b 	beq.w	8005a54 <_dtoa_r+0xbac>
 8004f7e:	4883      	ldr	r0, [pc, #524]	; (800518c <_dtoa_r+0x2e4>)
 8004f80:	6018      	str	r0, [r3, #0]
 8004f82:	1e43      	subs	r3, r0, #1
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	e7df      	b.n	8004f48 <_dtoa_r+0xa0>
 8004f88:	ec4b ab10 	vmov	d0, sl, fp
 8004f8c:	aa10      	add	r2, sp, #64	; 0x40
 8004f8e:	a911      	add	r1, sp, #68	; 0x44
 8004f90:	4620      	mov	r0, r4
 8004f92:	f001 f8b9 	bl	8006108 <__d2b>
 8004f96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004f9a:	ee08 0a10 	vmov	s16, r0
 8004f9e:	2d00      	cmp	r5, #0
 8004fa0:	f000 8084 	beq.w	80050ac <_dtoa_r+0x204>
 8004fa4:	ee19 3a90 	vmov	r3, s19
 8004fa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004fb0:	4656      	mov	r6, sl
 8004fb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004fb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004fba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004fbe:	4b74      	ldr	r3, [pc, #464]	; (8005190 <_dtoa_r+0x2e8>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	4639      	mov	r1, r7
 8004fc6:	f7fb f95f 	bl	8000288 <__aeabi_dsub>
 8004fca:	a365      	add	r3, pc, #404	; (adr r3, 8005160 <_dtoa_r+0x2b8>)
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	f7fb fb12 	bl	80005f8 <__aeabi_dmul>
 8004fd4:	a364      	add	r3, pc, #400	; (adr r3, 8005168 <_dtoa_r+0x2c0>)
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	f7fb f957 	bl	800028c <__adddf3>
 8004fde:	4606      	mov	r6, r0
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	460f      	mov	r7, r1
 8004fe4:	f7fb fa9e 	bl	8000524 <__aeabi_i2d>
 8004fe8:	a361      	add	r3, pc, #388	; (adr r3, 8005170 <_dtoa_r+0x2c8>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	f7fb fb03 	bl	80005f8 <__aeabi_dmul>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	4639      	mov	r1, r7
 8004ffa:	f7fb f947 	bl	800028c <__adddf3>
 8004ffe:	4606      	mov	r6, r0
 8005000:	460f      	mov	r7, r1
 8005002:	f7fb fda9 	bl	8000b58 <__aeabi_d2iz>
 8005006:	2200      	movs	r2, #0
 8005008:	9000      	str	r0, [sp, #0]
 800500a:	2300      	movs	r3, #0
 800500c:	4630      	mov	r0, r6
 800500e:	4639      	mov	r1, r7
 8005010:	f7fb fd64 	bl	8000adc <__aeabi_dcmplt>
 8005014:	b150      	cbz	r0, 800502c <_dtoa_r+0x184>
 8005016:	9800      	ldr	r0, [sp, #0]
 8005018:	f7fb fa84 	bl	8000524 <__aeabi_i2d>
 800501c:	4632      	mov	r2, r6
 800501e:	463b      	mov	r3, r7
 8005020:	f7fb fd52 	bl	8000ac8 <__aeabi_dcmpeq>
 8005024:	b910      	cbnz	r0, 800502c <_dtoa_r+0x184>
 8005026:	9b00      	ldr	r3, [sp, #0]
 8005028:	3b01      	subs	r3, #1
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	9b00      	ldr	r3, [sp, #0]
 800502e:	2b16      	cmp	r3, #22
 8005030:	d85a      	bhi.n	80050e8 <_dtoa_r+0x240>
 8005032:	9a00      	ldr	r2, [sp, #0]
 8005034:	4b57      	ldr	r3, [pc, #348]	; (8005194 <_dtoa_r+0x2ec>)
 8005036:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	ec51 0b19 	vmov	r0, r1, d9
 8005042:	f7fb fd4b 	bl	8000adc <__aeabi_dcmplt>
 8005046:	2800      	cmp	r0, #0
 8005048:	d050      	beq.n	80050ec <_dtoa_r+0x244>
 800504a:	9b00      	ldr	r3, [sp, #0]
 800504c:	3b01      	subs	r3, #1
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	2300      	movs	r3, #0
 8005052:	930b      	str	r3, [sp, #44]	; 0x2c
 8005054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005056:	1b5d      	subs	r5, r3, r5
 8005058:	1e6b      	subs	r3, r5, #1
 800505a:	9305      	str	r3, [sp, #20]
 800505c:	bf45      	ittet	mi
 800505e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005062:	9304      	strmi	r3, [sp, #16]
 8005064:	2300      	movpl	r3, #0
 8005066:	2300      	movmi	r3, #0
 8005068:	bf4c      	ite	mi
 800506a:	9305      	strmi	r3, [sp, #20]
 800506c:	9304      	strpl	r3, [sp, #16]
 800506e:	9b00      	ldr	r3, [sp, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	db3d      	blt.n	80050f0 <_dtoa_r+0x248>
 8005074:	9b05      	ldr	r3, [sp, #20]
 8005076:	9a00      	ldr	r2, [sp, #0]
 8005078:	920a      	str	r2, [sp, #40]	; 0x28
 800507a:	4413      	add	r3, r2
 800507c:	9305      	str	r3, [sp, #20]
 800507e:	2300      	movs	r3, #0
 8005080:	9307      	str	r3, [sp, #28]
 8005082:	9b06      	ldr	r3, [sp, #24]
 8005084:	2b09      	cmp	r3, #9
 8005086:	f200 8089 	bhi.w	800519c <_dtoa_r+0x2f4>
 800508a:	2b05      	cmp	r3, #5
 800508c:	bfc4      	itt	gt
 800508e:	3b04      	subgt	r3, #4
 8005090:	9306      	strgt	r3, [sp, #24]
 8005092:	9b06      	ldr	r3, [sp, #24]
 8005094:	f1a3 0302 	sub.w	r3, r3, #2
 8005098:	bfcc      	ite	gt
 800509a:	2500      	movgt	r5, #0
 800509c:	2501      	movle	r5, #1
 800509e:	2b03      	cmp	r3, #3
 80050a0:	f200 8087 	bhi.w	80051b2 <_dtoa_r+0x30a>
 80050a4:	e8df f003 	tbb	[pc, r3]
 80050a8:	59383a2d 	.word	0x59383a2d
 80050ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80050b0:	441d      	add	r5, r3
 80050b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	bfc1      	itttt	gt
 80050ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80050be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80050c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80050c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80050ca:	bfda      	itte	le
 80050cc:	f1c3 0320 	rsble	r3, r3, #32
 80050d0:	fa06 f003 	lslle.w	r0, r6, r3
 80050d4:	4318      	orrgt	r0, r3
 80050d6:	f7fb fa15 	bl	8000504 <__aeabi_ui2d>
 80050da:	2301      	movs	r3, #1
 80050dc:	4606      	mov	r6, r0
 80050de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80050e2:	3d01      	subs	r5, #1
 80050e4:	930e      	str	r3, [sp, #56]	; 0x38
 80050e6:	e76a      	b.n	8004fbe <_dtoa_r+0x116>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e7b2      	b.n	8005052 <_dtoa_r+0x1aa>
 80050ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80050ee:	e7b1      	b.n	8005054 <_dtoa_r+0x1ac>
 80050f0:	9b04      	ldr	r3, [sp, #16]
 80050f2:	9a00      	ldr	r2, [sp, #0]
 80050f4:	1a9b      	subs	r3, r3, r2
 80050f6:	9304      	str	r3, [sp, #16]
 80050f8:	4253      	negs	r3, r2
 80050fa:	9307      	str	r3, [sp, #28]
 80050fc:	2300      	movs	r3, #0
 80050fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005100:	e7bf      	b.n	8005082 <_dtoa_r+0x1da>
 8005102:	2300      	movs	r3, #0
 8005104:	9308      	str	r3, [sp, #32]
 8005106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005108:	2b00      	cmp	r3, #0
 800510a:	dc55      	bgt.n	80051b8 <_dtoa_r+0x310>
 800510c:	2301      	movs	r3, #1
 800510e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005112:	461a      	mov	r2, r3
 8005114:	9209      	str	r2, [sp, #36]	; 0x24
 8005116:	e00c      	b.n	8005132 <_dtoa_r+0x28a>
 8005118:	2301      	movs	r3, #1
 800511a:	e7f3      	b.n	8005104 <_dtoa_r+0x25c>
 800511c:	2300      	movs	r3, #0
 800511e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005120:	9308      	str	r3, [sp, #32]
 8005122:	9b00      	ldr	r3, [sp, #0]
 8005124:	4413      	add	r3, r2
 8005126:	9302      	str	r3, [sp, #8]
 8005128:	3301      	adds	r3, #1
 800512a:	2b01      	cmp	r3, #1
 800512c:	9303      	str	r3, [sp, #12]
 800512e:	bfb8      	it	lt
 8005130:	2301      	movlt	r3, #1
 8005132:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005134:	2200      	movs	r2, #0
 8005136:	6042      	str	r2, [r0, #4]
 8005138:	2204      	movs	r2, #4
 800513a:	f102 0614 	add.w	r6, r2, #20
 800513e:	429e      	cmp	r6, r3
 8005140:	6841      	ldr	r1, [r0, #4]
 8005142:	d93d      	bls.n	80051c0 <_dtoa_r+0x318>
 8005144:	4620      	mov	r0, r4
 8005146:	f000 fcb7 	bl	8005ab8 <_Balloc>
 800514a:	9001      	str	r0, [sp, #4]
 800514c:	2800      	cmp	r0, #0
 800514e:	d13b      	bne.n	80051c8 <_dtoa_r+0x320>
 8005150:	4b11      	ldr	r3, [pc, #68]	; (8005198 <_dtoa_r+0x2f0>)
 8005152:	4602      	mov	r2, r0
 8005154:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005158:	e6c0      	b.n	8004edc <_dtoa_r+0x34>
 800515a:	2301      	movs	r3, #1
 800515c:	e7df      	b.n	800511e <_dtoa_r+0x276>
 800515e:	bf00      	nop
 8005160:	636f4361 	.word	0x636f4361
 8005164:	3fd287a7 	.word	0x3fd287a7
 8005168:	8b60c8b3 	.word	0x8b60c8b3
 800516c:	3fc68a28 	.word	0x3fc68a28
 8005170:	509f79fb 	.word	0x509f79fb
 8005174:	3fd34413 	.word	0x3fd34413
 8005178:	080072f1 	.word	0x080072f1
 800517c:	08007308 	.word	0x08007308
 8005180:	7ff00000 	.word	0x7ff00000
 8005184:	080072ed 	.word	0x080072ed
 8005188:	080072e4 	.word	0x080072e4
 800518c:	080072c1 	.word	0x080072c1
 8005190:	3ff80000 	.word	0x3ff80000
 8005194:	080073f8 	.word	0x080073f8
 8005198:	08007363 	.word	0x08007363
 800519c:	2501      	movs	r5, #1
 800519e:	2300      	movs	r3, #0
 80051a0:	9306      	str	r3, [sp, #24]
 80051a2:	9508      	str	r5, [sp, #32]
 80051a4:	f04f 33ff 	mov.w	r3, #4294967295
 80051a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80051ac:	2200      	movs	r2, #0
 80051ae:	2312      	movs	r3, #18
 80051b0:	e7b0      	b.n	8005114 <_dtoa_r+0x26c>
 80051b2:	2301      	movs	r3, #1
 80051b4:	9308      	str	r3, [sp, #32]
 80051b6:	e7f5      	b.n	80051a4 <_dtoa_r+0x2fc>
 80051b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80051be:	e7b8      	b.n	8005132 <_dtoa_r+0x28a>
 80051c0:	3101      	adds	r1, #1
 80051c2:	6041      	str	r1, [r0, #4]
 80051c4:	0052      	lsls	r2, r2, #1
 80051c6:	e7b8      	b.n	800513a <_dtoa_r+0x292>
 80051c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051ca:	9a01      	ldr	r2, [sp, #4]
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	9b03      	ldr	r3, [sp, #12]
 80051d0:	2b0e      	cmp	r3, #14
 80051d2:	f200 809d 	bhi.w	8005310 <_dtoa_r+0x468>
 80051d6:	2d00      	cmp	r5, #0
 80051d8:	f000 809a 	beq.w	8005310 <_dtoa_r+0x468>
 80051dc:	9b00      	ldr	r3, [sp, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	dd32      	ble.n	8005248 <_dtoa_r+0x3a0>
 80051e2:	4ab7      	ldr	r2, [pc, #732]	; (80054c0 <_dtoa_r+0x618>)
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80051ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051f0:	9b00      	ldr	r3, [sp, #0]
 80051f2:	05d8      	lsls	r0, r3, #23
 80051f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80051f8:	d516      	bpl.n	8005228 <_dtoa_r+0x380>
 80051fa:	4bb2      	ldr	r3, [pc, #712]	; (80054c4 <_dtoa_r+0x61c>)
 80051fc:	ec51 0b19 	vmov	r0, r1, d9
 8005200:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005204:	f7fb fb22 	bl	800084c <__aeabi_ddiv>
 8005208:	f007 070f 	and.w	r7, r7, #15
 800520c:	4682      	mov	sl, r0
 800520e:	468b      	mov	fp, r1
 8005210:	2503      	movs	r5, #3
 8005212:	4eac      	ldr	r6, [pc, #688]	; (80054c4 <_dtoa_r+0x61c>)
 8005214:	b957      	cbnz	r7, 800522c <_dtoa_r+0x384>
 8005216:	4642      	mov	r2, r8
 8005218:	464b      	mov	r3, r9
 800521a:	4650      	mov	r0, sl
 800521c:	4659      	mov	r1, fp
 800521e:	f7fb fb15 	bl	800084c <__aeabi_ddiv>
 8005222:	4682      	mov	sl, r0
 8005224:	468b      	mov	fp, r1
 8005226:	e028      	b.n	800527a <_dtoa_r+0x3d2>
 8005228:	2502      	movs	r5, #2
 800522a:	e7f2      	b.n	8005212 <_dtoa_r+0x36a>
 800522c:	07f9      	lsls	r1, r7, #31
 800522e:	d508      	bpl.n	8005242 <_dtoa_r+0x39a>
 8005230:	4640      	mov	r0, r8
 8005232:	4649      	mov	r1, r9
 8005234:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005238:	f7fb f9de 	bl	80005f8 <__aeabi_dmul>
 800523c:	3501      	adds	r5, #1
 800523e:	4680      	mov	r8, r0
 8005240:	4689      	mov	r9, r1
 8005242:	107f      	asrs	r7, r7, #1
 8005244:	3608      	adds	r6, #8
 8005246:	e7e5      	b.n	8005214 <_dtoa_r+0x36c>
 8005248:	f000 809b 	beq.w	8005382 <_dtoa_r+0x4da>
 800524c:	9b00      	ldr	r3, [sp, #0]
 800524e:	4f9d      	ldr	r7, [pc, #628]	; (80054c4 <_dtoa_r+0x61c>)
 8005250:	425e      	negs	r6, r3
 8005252:	4b9b      	ldr	r3, [pc, #620]	; (80054c0 <_dtoa_r+0x618>)
 8005254:	f006 020f 	and.w	r2, r6, #15
 8005258:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	ec51 0b19 	vmov	r0, r1, d9
 8005264:	f7fb f9c8 	bl	80005f8 <__aeabi_dmul>
 8005268:	1136      	asrs	r6, r6, #4
 800526a:	4682      	mov	sl, r0
 800526c:	468b      	mov	fp, r1
 800526e:	2300      	movs	r3, #0
 8005270:	2502      	movs	r5, #2
 8005272:	2e00      	cmp	r6, #0
 8005274:	d17a      	bne.n	800536c <_dtoa_r+0x4c4>
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1d3      	bne.n	8005222 <_dtoa_r+0x37a>
 800527a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8082 	beq.w	8005386 <_dtoa_r+0x4de>
 8005282:	4b91      	ldr	r3, [pc, #580]	; (80054c8 <_dtoa_r+0x620>)
 8005284:	2200      	movs	r2, #0
 8005286:	4650      	mov	r0, sl
 8005288:	4659      	mov	r1, fp
 800528a:	f7fb fc27 	bl	8000adc <__aeabi_dcmplt>
 800528e:	2800      	cmp	r0, #0
 8005290:	d079      	beq.n	8005386 <_dtoa_r+0x4de>
 8005292:	9b03      	ldr	r3, [sp, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d076      	beq.n	8005386 <_dtoa_r+0x4de>
 8005298:	9b02      	ldr	r3, [sp, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	dd36      	ble.n	800530c <_dtoa_r+0x464>
 800529e:	9b00      	ldr	r3, [sp, #0]
 80052a0:	4650      	mov	r0, sl
 80052a2:	4659      	mov	r1, fp
 80052a4:	1e5f      	subs	r7, r3, #1
 80052a6:	2200      	movs	r2, #0
 80052a8:	4b88      	ldr	r3, [pc, #544]	; (80054cc <_dtoa_r+0x624>)
 80052aa:	f7fb f9a5 	bl	80005f8 <__aeabi_dmul>
 80052ae:	9e02      	ldr	r6, [sp, #8]
 80052b0:	4682      	mov	sl, r0
 80052b2:	468b      	mov	fp, r1
 80052b4:	3501      	adds	r5, #1
 80052b6:	4628      	mov	r0, r5
 80052b8:	f7fb f934 	bl	8000524 <__aeabi_i2d>
 80052bc:	4652      	mov	r2, sl
 80052be:	465b      	mov	r3, fp
 80052c0:	f7fb f99a 	bl	80005f8 <__aeabi_dmul>
 80052c4:	4b82      	ldr	r3, [pc, #520]	; (80054d0 <_dtoa_r+0x628>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	f7fa ffe0 	bl	800028c <__adddf3>
 80052cc:	46d0      	mov	r8, sl
 80052ce:	46d9      	mov	r9, fp
 80052d0:	4682      	mov	sl, r0
 80052d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80052d6:	2e00      	cmp	r6, #0
 80052d8:	d158      	bne.n	800538c <_dtoa_r+0x4e4>
 80052da:	4b7e      	ldr	r3, [pc, #504]	; (80054d4 <_dtoa_r+0x62c>)
 80052dc:	2200      	movs	r2, #0
 80052de:	4640      	mov	r0, r8
 80052e0:	4649      	mov	r1, r9
 80052e2:	f7fa ffd1 	bl	8000288 <__aeabi_dsub>
 80052e6:	4652      	mov	r2, sl
 80052e8:	465b      	mov	r3, fp
 80052ea:	4680      	mov	r8, r0
 80052ec:	4689      	mov	r9, r1
 80052ee:	f7fb fc13 	bl	8000b18 <__aeabi_dcmpgt>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	f040 8295 	bne.w	8005822 <_dtoa_r+0x97a>
 80052f8:	4652      	mov	r2, sl
 80052fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80052fe:	4640      	mov	r0, r8
 8005300:	4649      	mov	r1, r9
 8005302:	f7fb fbeb 	bl	8000adc <__aeabi_dcmplt>
 8005306:	2800      	cmp	r0, #0
 8005308:	f040 8289 	bne.w	800581e <_dtoa_r+0x976>
 800530c:	ec5b ab19 	vmov	sl, fp, d9
 8005310:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005312:	2b00      	cmp	r3, #0
 8005314:	f2c0 8148 	blt.w	80055a8 <_dtoa_r+0x700>
 8005318:	9a00      	ldr	r2, [sp, #0]
 800531a:	2a0e      	cmp	r2, #14
 800531c:	f300 8144 	bgt.w	80055a8 <_dtoa_r+0x700>
 8005320:	4b67      	ldr	r3, [pc, #412]	; (80054c0 <_dtoa_r+0x618>)
 8005322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005326:	e9d3 8900 	ldrd	r8, r9, [r3]
 800532a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800532c:	2b00      	cmp	r3, #0
 800532e:	f280 80d5 	bge.w	80054dc <_dtoa_r+0x634>
 8005332:	9b03      	ldr	r3, [sp, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f300 80d1 	bgt.w	80054dc <_dtoa_r+0x634>
 800533a:	f040 826f 	bne.w	800581c <_dtoa_r+0x974>
 800533e:	4b65      	ldr	r3, [pc, #404]	; (80054d4 <_dtoa_r+0x62c>)
 8005340:	2200      	movs	r2, #0
 8005342:	4640      	mov	r0, r8
 8005344:	4649      	mov	r1, r9
 8005346:	f7fb f957 	bl	80005f8 <__aeabi_dmul>
 800534a:	4652      	mov	r2, sl
 800534c:	465b      	mov	r3, fp
 800534e:	f7fb fbd9 	bl	8000b04 <__aeabi_dcmpge>
 8005352:	9e03      	ldr	r6, [sp, #12]
 8005354:	4637      	mov	r7, r6
 8005356:	2800      	cmp	r0, #0
 8005358:	f040 8245 	bne.w	80057e6 <_dtoa_r+0x93e>
 800535c:	9d01      	ldr	r5, [sp, #4]
 800535e:	2331      	movs	r3, #49	; 0x31
 8005360:	f805 3b01 	strb.w	r3, [r5], #1
 8005364:	9b00      	ldr	r3, [sp, #0]
 8005366:	3301      	adds	r3, #1
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	e240      	b.n	80057ee <_dtoa_r+0x946>
 800536c:	07f2      	lsls	r2, r6, #31
 800536e:	d505      	bpl.n	800537c <_dtoa_r+0x4d4>
 8005370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005374:	f7fb f940 	bl	80005f8 <__aeabi_dmul>
 8005378:	3501      	adds	r5, #1
 800537a:	2301      	movs	r3, #1
 800537c:	1076      	asrs	r6, r6, #1
 800537e:	3708      	adds	r7, #8
 8005380:	e777      	b.n	8005272 <_dtoa_r+0x3ca>
 8005382:	2502      	movs	r5, #2
 8005384:	e779      	b.n	800527a <_dtoa_r+0x3d2>
 8005386:	9f00      	ldr	r7, [sp, #0]
 8005388:	9e03      	ldr	r6, [sp, #12]
 800538a:	e794      	b.n	80052b6 <_dtoa_r+0x40e>
 800538c:	9901      	ldr	r1, [sp, #4]
 800538e:	4b4c      	ldr	r3, [pc, #304]	; (80054c0 <_dtoa_r+0x618>)
 8005390:	4431      	add	r1, r6
 8005392:	910d      	str	r1, [sp, #52]	; 0x34
 8005394:	9908      	ldr	r1, [sp, #32]
 8005396:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800539a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800539e:	2900      	cmp	r1, #0
 80053a0:	d043      	beq.n	800542a <_dtoa_r+0x582>
 80053a2:	494d      	ldr	r1, [pc, #308]	; (80054d8 <_dtoa_r+0x630>)
 80053a4:	2000      	movs	r0, #0
 80053a6:	f7fb fa51 	bl	800084c <__aeabi_ddiv>
 80053aa:	4652      	mov	r2, sl
 80053ac:	465b      	mov	r3, fp
 80053ae:	f7fa ff6b 	bl	8000288 <__aeabi_dsub>
 80053b2:	9d01      	ldr	r5, [sp, #4]
 80053b4:	4682      	mov	sl, r0
 80053b6:	468b      	mov	fp, r1
 80053b8:	4649      	mov	r1, r9
 80053ba:	4640      	mov	r0, r8
 80053bc:	f7fb fbcc 	bl	8000b58 <__aeabi_d2iz>
 80053c0:	4606      	mov	r6, r0
 80053c2:	f7fb f8af 	bl	8000524 <__aeabi_i2d>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4640      	mov	r0, r8
 80053cc:	4649      	mov	r1, r9
 80053ce:	f7fa ff5b 	bl	8000288 <__aeabi_dsub>
 80053d2:	3630      	adds	r6, #48	; 0x30
 80053d4:	f805 6b01 	strb.w	r6, [r5], #1
 80053d8:	4652      	mov	r2, sl
 80053da:	465b      	mov	r3, fp
 80053dc:	4680      	mov	r8, r0
 80053de:	4689      	mov	r9, r1
 80053e0:	f7fb fb7c 	bl	8000adc <__aeabi_dcmplt>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d163      	bne.n	80054b0 <_dtoa_r+0x608>
 80053e8:	4642      	mov	r2, r8
 80053ea:	464b      	mov	r3, r9
 80053ec:	4936      	ldr	r1, [pc, #216]	; (80054c8 <_dtoa_r+0x620>)
 80053ee:	2000      	movs	r0, #0
 80053f0:	f7fa ff4a 	bl	8000288 <__aeabi_dsub>
 80053f4:	4652      	mov	r2, sl
 80053f6:	465b      	mov	r3, fp
 80053f8:	f7fb fb70 	bl	8000adc <__aeabi_dcmplt>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	f040 80b5 	bne.w	800556c <_dtoa_r+0x6c4>
 8005402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005404:	429d      	cmp	r5, r3
 8005406:	d081      	beq.n	800530c <_dtoa_r+0x464>
 8005408:	4b30      	ldr	r3, [pc, #192]	; (80054cc <_dtoa_r+0x624>)
 800540a:	2200      	movs	r2, #0
 800540c:	4650      	mov	r0, sl
 800540e:	4659      	mov	r1, fp
 8005410:	f7fb f8f2 	bl	80005f8 <__aeabi_dmul>
 8005414:	4b2d      	ldr	r3, [pc, #180]	; (80054cc <_dtoa_r+0x624>)
 8005416:	4682      	mov	sl, r0
 8005418:	468b      	mov	fp, r1
 800541a:	4640      	mov	r0, r8
 800541c:	4649      	mov	r1, r9
 800541e:	2200      	movs	r2, #0
 8005420:	f7fb f8ea 	bl	80005f8 <__aeabi_dmul>
 8005424:	4680      	mov	r8, r0
 8005426:	4689      	mov	r9, r1
 8005428:	e7c6      	b.n	80053b8 <_dtoa_r+0x510>
 800542a:	4650      	mov	r0, sl
 800542c:	4659      	mov	r1, fp
 800542e:	f7fb f8e3 	bl	80005f8 <__aeabi_dmul>
 8005432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005434:	9d01      	ldr	r5, [sp, #4]
 8005436:	930f      	str	r3, [sp, #60]	; 0x3c
 8005438:	4682      	mov	sl, r0
 800543a:	468b      	mov	fp, r1
 800543c:	4649      	mov	r1, r9
 800543e:	4640      	mov	r0, r8
 8005440:	f7fb fb8a 	bl	8000b58 <__aeabi_d2iz>
 8005444:	4606      	mov	r6, r0
 8005446:	f7fb f86d 	bl	8000524 <__aeabi_i2d>
 800544a:	3630      	adds	r6, #48	; 0x30
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4640      	mov	r0, r8
 8005452:	4649      	mov	r1, r9
 8005454:	f7fa ff18 	bl	8000288 <__aeabi_dsub>
 8005458:	f805 6b01 	strb.w	r6, [r5], #1
 800545c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800545e:	429d      	cmp	r5, r3
 8005460:	4680      	mov	r8, r0
 8005462:	4689      	mov	r9, r1
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	d124      	bne.n	80054b4 <_dtoa_r+0x60c>
 800546a:	4b1b      	ldr	r3, [pc, #108]	; (80054d8 <_dtoa_r+0x630>)
 800546c:	4650      	mov	r0, sl
 800546e:	4659      	mov	r1, fp
 8005470:	f7fa ff0c 	bl	800028c <__adddf3>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4640      	mov	r0, r8
 800547a:	4649      	mov	r1, r9
 800547c:	f7fb fb4c 	bl	8000b18 <__aeabi_dcmpgt>
 8005480:	2800      	cmp	r0, #0
 8005482:	d173      	bne.n	800556c <_dtoa_r+0x6c4>
 8005484:	4652      	mov	r2, sl
 8005486:	465b      	mov	r3, fp
 8005488:	4913      	ldr	r1, [pc, #76]	; (80054d8 <_dtoa_r+0x630>)
 800548a:	2000      	movs	r0, #0
 800548c:	f7fa fefc 	bl	8000288 <__aeabi_dsub>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4640      	mov	r0, r8
 8005496:	4649      	mov	r1, r9
 8005498:	f7fb fb20 	bl	8000adc <__aeabi_dcmplt>
 800549c:	2800      	cmp	r0, #0
 800549e:	f43f af35 	beq.w	800530c <_dtoa_r+0x464>
 80054a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80054a4:	1e6b      	subs	r3, r5, #1
 80054a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80054a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80054ac:	2b30      	cmp	r3, #48	; 0x30
 80054ae:	d0f8      	beq.n	80054a2 <_dtoa_r+0x5fa>
 80054b0:	9700      	str	r7, [sp, #0]
 80054b2:	e049      	b.n	8005548 <_dtoa_r+0x6a0>
 80054b4:	4b05      	ldr	r3, [pc, #20]	; (80054cc <_dtoa_r+0x624>)
 80054b6:	f7fb f89f 	bl	80005f8 <__aeabi_dmul>
 80054ba:	4680      	mov	r8, r0
 80054bc:	4689      	mov	r9, r1
 80054be:	e7bd      	b.n	800543c <_dtoa_r+0x594>
 80054c0:	080073f8 	.word	0x080073f8
 80054c4:	080073d0 	.word	0x080073d0
 80054c8:	3ff00000 	.word	0x3ff00000
 80054cc:	40240000 	.word	0x40240000
 80054d0:	401c0000 	.word	0x401c0000
 80054d4:	40140000 	.word	0x40140000
 80054d8:	3fe00000 	.word	0x3fe00000
 80054dc:	9d01      	ldr	r5, [sp, #4]
 80054de:	4656      	mov	r6, sl
 80054e0:	465f      	mov	r7, fp
 80054e2:	4642      	mov	r2, r8
 80054e4:	464b      	mov	r3, r9
 80054e6:	4630      	mov	r0, r6
 80054e8:	4639      	mov	r1, r7
 80054ea:	f7fb f9af 	bl	800084c <__aeabi_ddiv>
 80054ee:	f7fb fb33 	bl	8000b58 <__aeabi_d2iz>
 80054f2:	4682      	mov	sl, r0
 80054f4:	f7fb f816 	bl	8000524 <__aeabi_i2d>
 80054f8:	4642      	mov	r2, r8
 80054fa:	464b      	mov	r3, r9
 80054fc:	f7fb f87c 	bl	80005f8 <__aeabi_dmul>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4630      	mov	r0, r6
 8005506:	4639      	mov	r1, r7
 8005508:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800550c:	f7fa febc 	bl	8000288 <__aeabi_dsub>
 8005510:	f805 6b01 	strb.w	r6, [r5], #1
 8005514:	9e01      	ldr	r6, [sp, #4]
 8005516:	9f03      	ldr	r7, [sp, #12]
 8005518:	1bae      	subs	r6, r5, r6
 800551a:	42b7      	cmp	r7, r6
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	d135      	bne.n	800558e <_dtoa_r+0x6e6>
 8005522:	f7fa feb3 	bl	800028c <__adddf3>
 8005526:	4642      	mov	r2, r8
 8005528:	464b      	mov	r3, r9
 800552a:	4606      	mov	r6, r0
 800552c:	460f      	mov	r7, r1
 800552e:	f7fb faf3 	bl	8000b18 <__aeabi_dcmpgt>
 8005532:	b9d0      	cbnz	r0, 800556a <_dtoa_r+0x6c2>
 8005534:	4642      	mov	r2, r8
 8005536:	464b      	mov	r3, r9
 8005538:	4630      	mov	r0, r6
 800553a:	4639      	mov	r1, r7
 800553c:	f7fb fac4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005540:	b110      	cbz	r0, 8005548 <_dtoa_r+0x6a0>
 8005542:	f01a 0f01 	tst.w	sl, #1
 8005546:	d110      	bne.n	800556a <_dtoa_r+0x6c2>
 8005548:	4620      	mov	r0, r4
 800554a:	ee18 1a10 	vmov	r1, s16
 800554e:	f000 faf3 	bl	8005b38 <_Bfree>
 8005552:	2300      	movs	r3, #0
 8005554:	9800      	ldr	r0, [sp, #0]
 8005556:	702b      	strb	r3, [r5, #0]
 8005558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800555a:	3001      	adds	r0, #1
 800555c:	6018      	str	r0, [r3, #0]
 800555e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005560:	2b00      	cmp	r3, #0
 8005562:	f43f acf1 	beq.w	8004f48 <_dtoa_r+0xa0>
 8005566:	601d      	str	r5, [r3, #0]
 8005568:	e4ee      	b.n	8004f48 <_dtoa_r+0xa0>
 800556a:	9f00      	ldr	r7, [sp, #0]
 800556c:	462b      	mov	r3, r5
 800556e:	461d      	mov	r5, r3
 8005570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005574:	2a39      	cmp	r2, #57	; 0x39
 8005576:	d106      	bne.n	8005586 <_dtoa_r+0x6de>
 8005578:	9a01      	ldr	r2, [sp, #4]
 800557a:	429a      	cmp	r2, r3
 800557c:	d1f7      	bne.n	800556e <_dtoa_r+0x6c6>
 800557e:	9901      	ldr	r1, [sp, #4]
 8005580:	2230      	movs	r2, #48	; 0x30
 8005582:	3701      	adds	r7, #1
 8005584:	700a      	strb	r2, [r1, #0]
 8005586:	781a      	ldrb	r2, [r3, #0]
 8005588:	3201      	adds	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	e790      	b.n	80054b0 <_dtoa_r+0x608>
 800558e:	4ba6      	ldr	r3, [pc, #664]	; (8005828 <_dtoa_r+0x980>)
 8005590:	2200      	movs	r2, #0
 8005592:	f7fb f831 	bl	80005f8 <__aeabi_dmul>
 8005596:	2200      	movs	r2, #0
 8005598:	2300      	movs	r3, #0
 800559a:	4606      	mov	r6, r0
 800559c:	460f      	mov	r7, r1
 800559e:	f7fb fa93 	bl	8000ac8 <__aeabi_dcmpeq>
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d09d      	beq.n	80054e2 <_dtoa_r+0x63a>
 80055a6:	e7cf      	b.n	8005548 <_dtoa_r+0x6a0>
 80055a8:	9a08      	ldr	r2, [sp, #32]
 80055aa:	2a00      	cmp	r2, #0
 80055ac:	f000 80d7 	beq.w	800575e <_dtoa_r+0x8b6>
 80055b0:	9a06      	ldr	r2, [sp, #24]
 80055b2:	2a01      	cmp	r2, #1
 80055b4:	f300 80ba 	bgt.w	800572c <_dtoa_r+0x884>
 80055b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055ba:	2a00      	cmp	r2, #0
 80055bc:	f000 80b2 	beq.w	8005724 <_dtoa_r+0x87c>
 80055c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055c4:	9e07      	ldr	r6, [sp, #28]
 80055c6:	9d04      	ldr	r5, [sp, #16]
 80055c8:	9a04      	ldr	r2, [sp, #16]
 80055ca:	441a      	add	r2, r3
 80055cc:	9204      	str	r2, [sp, #16]
 80055ce:	9a05      	ldr	r2, [sp, #20]
 80055d0:	2101      	movs	r1, #1
 80055d2:	441a      	add	r2, r3
 80055d4:	4620      	mov	r0, r4
 80055d6:	9205      	str	r2, [sp, #20]
 80055d8:	f000 fb66 	bl	8005ca8 <__i2b>
 80055dc:	4607      	mov	r7, r0
 80055de:	2d00      	cmp	r5, #0
 80055e0:	dd0c      	ble.n	80055fc <_dtoa_r+0x754>
 80055e2:	9b05      	ldr	r3, [sp, #20]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	dd09      	ble.n	80055fc <_dtoa_r+0x754>
 80055e8:	42ab      	cmp	r3, r5
 80055ea:	9a04      	ldr	r2, [sp, #16]
 80055ec:	bfa8      	it	ge
 80055ee:	462b      	movge	r3, r5
 80055f0:	1ad2      	subs	r2, r2, r3
 80055f2:	9204      	str	r2, [sp, #16]
 80055f4:	9a05      	ldr	r2, [sp, #20]
 80055f6:	1aed      	subs	r5, r5, r3
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	9305      	str	r3, [sp, #20]
 80055fc:	9b07      	ldr	r3, [sp, #28]
 80055fe:	b31b      	cbz	r3, 8005648 <_dtoa_r+0x7a0>
 8005600:	9b08      	ldr	r3, [sp, #32]
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 80af 	beq.w	8005766 <_dtoa_r+0x8be>
 8005608:	2e00      	cmp	r6, #0
 800560a:	dd13      	ble.n	8005634 <_dtoa_r+0x78c>
 800560c:	4639      	mov	r1, r7
 800560e:	4632      	mov	r2, r6
 8005610:	4620      	mov	r0, r4
 8005612:	f000 fc09 	bl	8005e28 <__pow5mult>
 8005616:	ee18 2a10 	vmov	r2, s16
 800561a:	4601      	mov	r1, r0
 800561c:	4607      	mov	r7, r0
 800561e:	4620      	mov	r0, r4
 8005620:	f000 fb58 	bl	8005cd4 <__multiply>
 8005624:	ee18 1a10 	vmov	r1, s16
 8005628:	4680      	mov	r8, r0
 800562a:	4620      	mov	r0, r4
 800562c:	f000 fa84 	bl	8005b38 <_Bfree>
 8005630:	ee08 8a10 	vmov	s16, r8
 8005634:	9b07      	ldr	r3, [sp, #28]
 8005636:	1b9a      	subs	r2, r3, r6
 8005638:	d006      	beq.n	8005648 <_dtoa_r+0x7a0>
 800563a:	ee18 1a10 	vmov	r1, s16
 800563e:	4620      	mov	r0, r4
 8005640:	f000 fbf2 	bl	8005e28 <__pow5mult>
 8005644:	ee08 0a10 	vmov	s16, r0
 8005648:	2101      	movs	r1, #1
 800564a:	4620      	mov	r0, r4
 800564c:	f000 fb2c 	bl	8005ca8 <__i2b>
 8005650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005652:	2b00      	cmp	r3, #0
 8005654:	4606      	mov	r6, r0
 8005656:	f340 8088 	ble.w	800576a <_dtoa_r+0x8c2>
 800565a:	461a      	mov	r2, r3
 800565c:	4601      	mov	r1, r0
 800565e:	4620      	mov	r0, r4
 8005660:	f000 fbe2 	bl	8005e28 <__pow5mult>
 8005664:	9b06      	ldr	r3, [sp, #24]
 8005666:	2b01      	cmp	r3, #1
 8005668:	4606      	mov	r6, r0
 800566a:	f340 8081 	ble.w	8005770 <_dtoa_r+0x8c8>
 800566e:	f04f 0800 	mov.w	r8, #0
 8005672:	6933      	ldr	r3, [r6, #16]
 8005674:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005678:	6918      	ldr	r0, [r3, #16]
 800567a:	f000 fac5 	bl	8005c08 <__hi0bits>
 800567e:	f1c0 0020 	rsb	r0, r0, #32
 8005682:	9b05      	ldr	r3, [sp, #20]
 8005684:	4418      	add	r0, r3
 8005686:	f010 001f 	ands.w	r0, r0, #31
 800568a:	f000 8092 	beq.w	80057b2 <_dtoa_r+0x90a>
 800568e:	f1c0 0320 	rsb	r3, r0, #32
 8005692:	2b04      	cmp	r3, #4
 8005694:	f340 808a 	ble.w	80057ac <_dtoa_r+0x904>
 8005698:	f1c0 001c 	rsb	r0, r0, #28
 800569c:	9b04      	ldr	r3, [sp, #16]
 800569e:	4403      	add	r3, r0
 80056a0:	9304      	str	r3, [sp, #16]
 80056a2:	9b05      	ldr	r3, [sp, #20]
 80056a4:	4403      	add	r3, r0
 80056a6:	4405      	add	r5, r0
 80056a8:	9305      	str	r3, [sp, #20]
 80056aa:	9b04      	ldr	r3, [sp, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	dd07      	ble.n	80056c0 <_dtoa_r+0x818>
 80056b0:	ee18 1a10 	vmov	r1, s16
 80056b4:	461a      	mov	r2, r3
 80056b6:	4620      	mov	r0, r4
 80056b8:	f000 fc10 	bl	8005edc <__lshift>
 80056bc:	ee08 0a10 	vmov	s16, r0
 80056c0:	9b05      	ldr	r3, [sp, #20]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	dd05      	ble.n	80056d2 <_dtoa_r+0x82a>
 80056c6:	4631      	mov	r1, r6
 80056c8:	461a      	mov	r2, r3
 80056ca:	4620      	mov	r0, r4
 80056cc:	f000 fc06 	bl	8005edc <__lshift>
 80056d0:	4606      	mov	r6, r0
 80056d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d06e      	beq.n	80057b6 <_dtoa_r+0x90e>
 80056d8:	ee18 0a10 	vmov	r0, s16
 80056dc:	4631      	mov	r1, r6
 80056de:	f000 fc6d 	bl	8005fbc <__mcmp>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	da67      	bge.n	80057b6 <_dtoa_r+0x90e>
 80056e6:	9b00      	ldr	r3, [sp, #0]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	ee18 1a10 	vmov	r1, s16
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	220a      	movs	r2, #10
 80056f2:	2300      	movs	r3, #0
 80056f4:	4620      	mov	r0, r4
 80056f6:	f000 fa41 	bl	8005b7c <__multadd>
 80056fa:	9b08      	ldr	r3, [sp, #32]
 80056fc:	ee08 0a10 	vmov	s16, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 81b1 	beq.w	8005a68 <_dtoa_r+0xbc0>
 8005706:	2300      	movs	r3, #0
 8005708:	4639      	mov	r1, r7
 800570a:	220a      	movs	r2, #10
 800570c:	4620      	mov	r0, r4
 800570e:	f000 fa35 	bl	8005b7c <__multadd>
 8005712:	9b02      	ldr	r3, [sp, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	4607      	mov	r7, r0
 8005718:	f300 808e 	bgt.w	8005838 <_dtoa_r+0x990>
 800571c:	9b06      	ldr	r3, [sp, #24]
 800571e:	2b02      	cmp	r3, #2
 8005720:	dc51      	bgt.n	80057c6 <_dtoa_r+0x91e>
 8005722:	e089      	b.n	8005838 <_dtoa_r+0x990>
 8005724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005726:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800572a:	e74b      	b.n	80055c4 <_dtoa_r+0x71c>
 800572c:	9b03      	ldr	r3, [sp, #12]
 800572e:	1e5e      	subs	r6, r3, #1
 8005730:	9b07      	ldr	r3, [sp, #28]
 8005732:	42b3      	cmp	r3, r6
 8005734:	bfbf      	itttt	lt
 8005736:	9b07      	ldrlt	r3, [sp, #28]
 8005738:	9607      	strlt	r6, [sp, #28]
 800573a:	1af2      	sublt	r2, r6, r3
 800573c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800573e:	bfb6      	itet	lt
 8005740:	189b      	addlt	r3, r3, r2
 8005742:	1b9e      	subge	r6, r3, r6
 8005744:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005746:	9b03      	ldr	r3, [sp, #12]
 8005748:	bfb8      	it	lt
 800574a:	2600      	movlt	r6, #0
 800574c:	2b00      	cmp	r3, #0
 800574e:	bfb7      	itett	lt
 8005750:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005754:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005758:	1a9d      	sublt	r5, r3, r2
 800575a:	2300      	movlt	r3, #0
 800575c:	e734      	b.n	80055c8 <_dtoa_r+0x720>
 800575e:	9e07      	ldr	r6, [sp, #28]
 8005760:	9d04      	ldr	r5, [sp, #16]
 8005762:	9f08      	ldr	r7, [sp, #32]
 8005764:	e73b      	b.n	80055de <_dtoa_r+0x736>
 8005766:	9a07      	ldr	r2, [sp, #28]
 8005768:	e767      	b.n	800563a <_dtoa_r+0x792>
 800576a:	9b06      	ldr	r3, [sp, #24]
 800576c:	2b01      	cmp	r3, #1
 800576e:	dc18      	bgt.n	80057a2 <_dtoa_r+0x8fa>
 8005770:	f1ba 0f00 	cmp.w	sl, #0
 8005774:	d115      	bne.n	80057a2 <_dtoa_r+0x8fa>
 8005776:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800577a:	b993      	cbnz	r3, 80057a2 <_dtoa_r+0x8fa>
 800577c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005780:	0d1b      	lsrs	r3, r3, #20
 8005782:	051b      	lsls	r3, r3, #20
 8005784:	b183      	cbz	r3, 80057a8 <_dtoa_r+0x900>
 8005786:	9b04      	ldr	r3, [sp, #16]
 8005788:	3301      	adds	r3, #1
 800578a:	9304      	str	r3, [sp, #16]
 800578c:	9b05      	ldr	r3, [sp, #20]
 800578e:	3301      	adds	r3, #1
 8005790:	9305      	str	r3, [sp, #20]
 8005792:	f04f 0801 	mov.w	r8, #1
 8005796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005798:	2b00      	cmp	r3, #0
 800579a:	f47f af6a 	bne.w	8005672 <_dtoa_r+0x7ca>
 800579e:	2001      	movs	r0, #1
 80057a0:	e76f      	b.n	8005682 <_dtoa_r+0x7da>
 80057a2:	f04f 0800 	mov.w	r8, #0
 80057a6:	e7f6      	b.n	8005796 <_dtoa_r+0x8ee>
 80057a8:	4698      	mov	r8, r3
 80057aa:	e7f4      	b.n	8005796 <_dtoa_r+0x8ee>
 80057ac:	f43f af7d 	beq.w	80056aa <_dtoa_r+0x802>
 80057b0:	4618      	mov	r0, r3
 80057b2:	301c      	adds	r0, #28
 80057b4:	e772      	b.n	800569c <_dtoa_r+0x7f4>
 80057b6:	9b03      	ldr	r3, [sp, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	dc37      	bgt.n	800582c <_dtoa_r+0x984>
 80057bc:	9b06      	ldr	r3, [sp, #24]
 80057be:	2b02      	cmp	r3, #2
 80057c0:	dd34      	ble.n	800582c <_dtoa_r+0x984>
 80057c2:	9b03      	ldr	r3, [sp, #12]
 80057c4:	9302      	str	r3, [sp, #8]
 80057c6:	9b02      	ldr	r3, [sp, #8]
 80057c8:	b96b      	cbnz	r3, 80057e6 <_dtoa_r+0x93e>
 80057ca:	4631      	mov	r1, r6
 80057cc:	2205      	movs	r2, #5
 80057ce:	4620      	mov	r0, r4
 80057d0:	f000 f9d4 	bl	8005b7c <__multadd>
 80057d4:	4601      	mov	r1, r0
 80057d6:	4606      	mov	r6, r0
 80057d8:	ee18 0a10 	vmov	r0, s16
 80057dc:	f000 fbee 	bl	8005fbc <__mcmp>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	f73f adbb 	bgt.w	800535c <_dtoa_r+0x4b4>
 80057e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e8:	9d01      	ldr	r5, [sp, #4]
 80057ea:	43db      	mvns	r3, r3
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	f04f 0800 	mov.w	r8, #0
 80057f2:	4631      	mov	r1, r6
 80057f4:	4620      	mov	r0, r4
 80057f6:	f000 f99f 	bl	8005b38 <_Bfree>
 80057fa:	2f00      	cmp	r7, #0
 80057fc:	f43f aea4 	beq.w	8005548 <_dtoa_r+0x6a0>
 8005800:	f1b8 0f00 	cmp.w	r8, #0
 8005804:	d005      	beq.n	8005812 <_dtoa_r+0x96a>
 8005806:	45b8      	cmp	r8, r7
 8005808:	d003      	beq.n	8005812 <_dtoa_r+0x96a>
 800580a:	4641      	mov	r1, r8
 800580c:	4620      	mov	r0, r4
 800580e:	f000 f993 	bl	8005b38 <_Bfree>
 8005812:	4639      	mov	r1, r7
 8005814:	4620      	mov	r0, r4
 8005816:	f000 f98f 	bl	8005b38 <_Bfree>
 800581a:	e695      	b.n	8005548 <_dtoa_r+0x6a0>
 800581c:	2600      	movs	r6, #0
 800581e:	4637      	mov	r7, r6
 8005820:	e7e1      	b.n	80057e6 <_dtoa_r+0x93e>
 8005822:	9700      	str	r7, [sp, #0]
 8005824:	4637      	mov	r7, r6
 8005826:	e599      	b.n	800535c <_dtoa_r+0x4b4>
 8005828:	40240000 	.word	0x40240000
 800582c:	9b08      	ldr	r3, [sp, #32]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 80ca 	beq.w	80059c8 <_dtoa_r+0xb20>
 8005834:	9b03      	ldr	r3, [sp, #12]
 8005836:	9302      	str	r3, [sp, #8]
 8005838:	2d00      	cmp	r5, #0
 800583a:	dd05      	ble.n	8005848 <_dtoa_r+0x9a0>
 800583c:	4639      	mov	r1, r7
 800583e:	462a      	mov	r2, r5
 8005840:	4620      	mov	r0, r4
 8005842:	f000 fb4b 	bl	8005edc <__lshift>
 8005846:	4607      	mov	r7, r0
 8005848:	f1b8 0f00 	cmp.w	r8, #0
 800584c:	d05b      	beq.n	8005906 <_dtoa_r+0xa5e>
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	4620      	mov	r0, r4
 8005852:	f000 f931 	bl	8005ab8 <_Balloc>
 8005856:	4605      	mov	r5, r0
 8005858:	b928      	cbnz	r0, 8005866 <_dtoa_r+0x9be>
 800585a:	4b87      	ldr	r3, [pc, #540]	; (8005a78 <_dtoa_r+0xbd0>)
 800585c:	4602      	mov	r2, r0
 800585e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005862:	f7ff bb3b 	b.w	8004edc <_dtoa_r+0x34>
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	3202      	adds	r2, #2
 800586a:	0092      	lsls	r2, r2, #2
 800586c:	f107 010c 	add.w	r1, r7, #12
 8005870:	300c      	adds	r0, #12
 8005872:	f000 f913 	bl	8005a9c <memcpy>
 8005876:	2201      	movs	r2, #1
 8005878:	4629      	mov	r1, r5
 800587a:	4620      	mov	r0, r4
 800587c:	f000 fb2e 	bl	8005edc <__lshift>
 8005880:	9b01      	ldr	r3, [sp, #4]
 8005882:	f103 0901 	add.w	r9, r3, #1
 8005886:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800588a:	4413      	add	r3, r2
 800588c:	9305      	str	r3, [sp, #20]
 800588e:	f00a 0301 	and.w	r3, sl, #1
 8005892:	46b8      	mov	r8, r7
 8005894:	9304      	str	r3, [sp, #16]
 8005896:	4607      	mov	r7, r0
 8005898:	4631      	mov	r1, r6
 800589a:	ee18 0a10 	vmov	r0, s16
 800589e:	f7ff fa77 	bl	8004d90 <quorem>
 80058a2:	4641      	mov	r1, r8
 80058a4:	9002      	str	r0, [sp, #8]
 80058a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80058aa:	ee18 0a10 	vmov	r0, s16
 80058ae:	f000 fb85 	bl	8005fbc <__mcmp>
 80058b2:	463a      	mov	r2, r7
 80058b4:	9003      	str	r0, [sp, #12]
 80058b6:	4631      	mov	r1, r6
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 fb9b 	bl	8005ff4 <__mdiff>
 80058be:	68c2      	ldr	r2, [r0, #12]
 80058c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80058c4:	4605      	mov	r5, r0
 80058c6:	bb02      	cbnz	r2, 800590a <_dtoa_r+0xa62>
 80058c8:	4601      	mov	r1, r0
 80058ca:	ee18 0a10 	vmov	r0, s16
 80058ce:	f000 fb75 	bl	8005fbc <__mcmp>
 80058d2:	4602      	mov	r2, r0
 80058d4:	4629      	mov	r1, r5
 80058d6:	4620      	mov	r0, r4
 80058d8:	9207      	str	r2, [sp, #28]
 80058da:	f000 f92d 	bl	8005b38 <_Bfree>
 80058de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80058e2:	ea43 0102 	orr.w	r1, r3, r2
 80058e6:	9b04      	ldr	r3, [sp, #16]
 80058e8:	430b      	orrs	r3, r1
 80058ea:	464d      	mov	r5, r9
 80058ec:	d10f      	bne.n	800590e <_dtoa_r+0xa66>
 80058ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80058f2:	d02a      	beq.n	800594a <_dtoa_r+0xaa2>
 80058f4:	9b03      	ldr	r3, [sp, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	dd02      	ble.n	8005900 <_dtoa_r+0xa58>
 80058fa:	9b02      	ldr	r3, [sp, #8]
 80058fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005900:	f88b a000 	strb.w	sl, [fp]
 8005904:	e775      	b.n	80057f2 <_dtoa_r+0x94a>
 8005906:	4638      	mov	r0, r7
 8005908:	e7ba      	b.n	8005880 <_dtoa_r+0x9d8>
 800590a:	2201      	movs	r2, #1
 800590c:	e7e2      	b.n	80058d4 <_dtoa_r+0xa2c>
 800590e:	9b03      	ldr	r3, [sp, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	db04      	blt.n	800591e <_dtoa_r+0xa76>
 8005914:	9906      	ldr	r1, [sp, #24]
 8005916:	430b      	orrs	r3, r1
 8005918:	9904      	ldr	r1, [sp, #16]
 800591a:	430b      	orrs	r3, r1
 800591c:	d122      	bne.n	8005964 <_dtoa_r+0xabc>
 800591e:	2a00      	cmp	r2, #0
 8005920:	ddee      	ble.n	8005900 <_dtoa_r+0xa58>
 8005922:	ee18 1a10 	vmov	r1, s16
 8005926:	2201      	movs	r2, #1
 8005928:	4620      	mov	r0, r4
 800592a:	f000 fad7 	bl	8005edc <__lshift>
 800592e:	4631      	mov	r1, r6
 8005930:	ee08 0a10 	vmov	s16, r0
 8005934:	f000 fb42 	bl	8005fbc <__mcmp>
 8005938:	2800      	cmp	r0, #0
 800593a:	dc03      	bgt.n	8005944 <_dtoa_r+0xa9c>
 800593c:	d1e0      	bne.n	8005900 <_dtoa_r+0xa58>
 800593e:	f01a 0f01 	tst.w	sl, #1
 8005942:	d0dd      	beq.n	8005900 <_dtoa_r+0xa58>
 8005944:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005948:	d1d7      	bne.n	80058fa <_dtoa_r+0xa52>
 800594a:	2339      	movs	r3, #57	; 0x39
 800594c:	f88b 3000 	strb.w	r3, [fp]
 8005950:	462b      	mov	r3, r5
 8005952:	461d      	mov	r5, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800595a:	2a39      	cmp	r2, #57	; 0x39
 800595c:	d071      	beq.n	8005a42 <_dtoa_r+0xb9a>
 800595e:	3201      	adds	r2, #1
 8005960:	701a      	strb	r2, [r3, #0]
 8005962:	e746      	b.n	80057f2 <_dtoa_r+0x94a>
 8005964:	2a00      	cmp	r2, #0
 8005966:	dd07      	ble.n	8005978 <_dtoa_r+0xad0>
 8005968:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800596c:	d0ed      	beq.n	800594a <_dtoa_r+0xaa2>
 800596e:	f10a 0301 	add.w	r3, sl, #1
 8005972:	f88b 3000 	strb.w	r3, [fp]
 8005976:	e73c      	b.n	80057f2 <_dtoa_r+0x94a>
 8005978:	9b05      	ldr	r3, [sp, #20]
 800597a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800597e:	4599      	cmp	r9, r3
 8005980:	d047      	beq.n	8005a12 <_dtoa_r+0xb6a>
 8005982:	ee18 1a10 	vmov	r1, s16
 8005986:	2300      	movs	r3, #0
 8005988:	220a      	movs	r2, #10
 800598a:	4620      	mov	r0, r4
 800598c:	f000 f8f6 	bl	8005b7c <__multadd>
 8005990:	45b8      	cmp	r8, r7
 8005992:	ee08 0a10 	vmov	s16, r0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	f04f 020a 	mov.w	r2, #10
 800599e:	4641      	mov	r1, r8
 80059a0:	4620      	mov	r0, r4
 80059a2:	d106      	bne.n	80059b2 <_dtoa_r+0xb0a>
 80059a4:	f000 f8ea 	bl	8005b7c <__multadd>
 80059a8:	4680      	mov	r8, r0
 80059aa:	4607      	mov	r7, r0
 80059ac:	f109 0901 	add.w	r9, r9, #1
 80059b0:	e772      	b.n	8005898 <_dtoa_r+0x9f0>
 80059b2:	f000 f8e3 	bl	8005b7c <__multadd>
 80059b6:	4639      	mov	r1, r7
 80059b8:	4680      	mov	r8, r0
 80059ba:	2300      	movs	r3, #0
 80059bc:	220a      	movs	r2, #10
 80059be:	4620      	mov	r0, r4
 80059c0:	f000 f8dc 	bl	8005b7c <__multadd>
 80059c4:	4607      	mov	r7, r0
 80059c6:	e7f1      	b.n	80059ac <_dtoa_r+0xb04>
 80059c8:	9b03      	ldr	r3, [sp, #12]
 80059ca:	9302      	str	r3, [sp, #8]
 80059cc:	9d01      	ldr	r5, [sp, #4]
 80059ce:	ee18 0a10 	vmov	r0, s16
 80059d2:	4631      	mov	r1, r6
 80059d4:	f7ff f9dc 	bl	8004d90 <quorem>
 80059d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80059dc:	9b01      	ldr	r3, [sp, #4]
 80059de:	f805 ab01 	strb.w	sl, [r5], #1
 80059e2:	1aea      	subs	r2, r5, r3
 80059e4:	9b02      	ldr	r3, [sp, #8]
 80059e6:	4293      	cmp	r3, r2
 80059e8:	dd09      	ble.n	80059fe <_dtoa_r+0xb56>
 80059ea:	ee18 1a10 	vmov	r1, s16
 80059ee:	2300      	movs	r3, #0
 80059f0:	220a      	movs	r2, #10
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 f8c2 	bl	8005b7c <__multadd>
 80059f8:	ee08 0a10 	vmov	s16, r0
 80059fc:	e7e7      	b.n	80059ce <_dtoa_r+0xb26>
 80059fe:	9b02      	ldr	r3, [sp, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	bfc8      	it	gt
 8005a04:	461d      	movgt	r5, r3
 8005a06:	9b01      	ldr	r3, [sp, #4]
 8005a08:	bfd8      	it	le
 8005a0a:	2501      	movle	r5, #1
 8005a0c:	441d      	add	r5, r3
 8005a0e:	f04f 0800 	mov.w	r8, #0
 8005a12:	ee18 1a10 	vmov	r1, s16
 8005a16:	2201      	movs	r2, #1
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 fa5f 	bl	8005edc <__lshift>
 8005a1e:	4631      	mov	r1, r6
 8005a20:	ee08 0a10 	vmov	s16, r0
 8005a24:	f000 faca 	bl	8005fbc <__mcmp>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	dc91      	bgt.n	8005950 <_dtoa_r+0xaa8>
 8005a2c:	d102      	bne.n	8005a34 <_dtoa_r+0xb8c>
 8005a2e:	f01a 0f01 	tst.w	sl, #1
 8005a32:	d18d      	bne.n	8005950 <_dtoa_r+0xaa8>
 8005a34:	462b      	mov	r3, r5
 8005a36:	461d      	mov	r5, r3
 8005a38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a3c:	2a30      	cmp	r2, #48	; 0x30
 8005a3e:	d0fa      	beq.n	8005a36 <_dtoa_r+0xb8e>
 8005a40:	e6d7      	b.n	80057f2 <_dtoa_r+0x94a>
 8005a42:	9a01      	ldr	r2, [sp, #4]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d184      	bne.n	8005952 <_dtoa_r+0xaaa>
 8005a48:	9b00      	ldr	r3, [sp, #0]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	2331      	movs	r3, #49	; 0x31
 8005a50:	7013      	strb	r3, [r2, #0]
 8005a52:	e6ce      	b.n	80057f2 <_dtoa_r+0x94a>
 8005a54:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <_dtoa_r+0xbd4>)
 8005a56:	f7ff ba95 	b.w	8004f84 <_dtoa_r+0xdc>
 8005a5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f47f aa6e 	bne.w	8004f3e <_dtoa_r+0x96>
 8005a62:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <_dtoa_r+0xbd8>)
 8005a64:	f7ff ba8e 	b.w	8004f84 <_dtoa_r+0xdc>
 8005a68:	9b02      	ldr	r3, [sp, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	dcae      	bgt.n	80059cc <_dtoa_r+0xb24>
 8005a6e:	9b06      	ldr	r3, [sp, #24]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	f73f aea8 	bgt.w	80057c6 <_dtoa_r+0x91e>
 8005a76:	e7a9      	b.n	80059cc <_dtoa_r+0xb24>
 8005a78:	08007363 	.word	0x08007363
 8005a7c:	080072c0 	.word	0x080072c0
 8005a80:	080072e4 	.word	0x080072e4

08005a84 <_localeconv_r>:
 8005a84:	4800      	ldr	r0, [pc, #0]	; (8005a88 <_localeconv_r+0x4>)
 8005a86:	4770      	bx	lr
 8005a88:	20000164 	.word	0x20000164

08005a8c <malloc>:
 8005a8c:	4b02      	ldr	r3, [pc, #8]	; (8005a98 <malloc+0xc>)
 8005a8e:	4601      	mov	r1, r0
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	f000 bc17 	b.w	80062c4 <_malloc_r>
 8005a96:	bf00      	nop
 8005a98:	20000010 	.word	0x20000010

08005a9c <memcpy>:
 8005a9c:	440a      	add	r2, r1
 8005a9e:	4291      	cmp	r1, r2
 8005aa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005aa4:	d100      	bne.n	8005aa8 <memcpy+0xc>
 8005aa6:	4770      	bx	lr
 8005aa8:	b510      	push	{r4, lr}
 8005aaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ab2:	4291      	cmp	r1, r2
 8005ab4:	d1f9      	bne.n	8005aaa <memcpy+0xe>
 8005ab6:	bd10      	pop	{r4, pc}

08005ab8 <_Balloc>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005abc:	4604      	mov	r4, r0
 8005abe:	460d      	mov	r5, r1
 8005ac0:	b976      	cbnz	r6, 8005ae0 <_Balloc+0x28>
 8005ac2:	2010      	movs	r0, #16
 8005ac4:	f7ff ffe2 	bl	8005a8c <malloc>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	6260      	str	r0, [r4, #36]	; 0x24
 8005acc:	b920      	cbnz	r0, 8005ad8 <_Balloc+0x20>
 8005ace:	4b18      	ldr	r3, [pc, #96]	; (8005b30 <_Balloc+0x78>)
 8005ad0:	4818      	ldr	r0, [pc, #96]	; (8005b34 <_Balloc+0x7c>)
 8005ad2:	2166      	movs	r1, #102	; 0x66
 8005ad4:	f000 fdd6 	bl	8006684 <__assert_func>
 8005ad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005adc:	6006      	str	r6, [r0, #0]
 8005ade:	60c6      	str	r6, [r0, #12]
 8005ae0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005ae2:	68f3      	ldr	r3, [r6, #12]
 8005ae4:	b183      	cbz	r3, 8005b08 <_Balloc+0x50>
 8005ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005aee:	b9b8      	cbnz	r0, 8005b20 <_Balloc+0x68>
 8005af0:	2101      	movs	r1, #1
 8005af2:	fa01 f605 	lsl.w	r6, r1, r5
 8005af6:	1d72      	adds	r2, r6, #5
 8005af8:	0092      	lsls	r2, r2, #2
 8005afa:	4620      	mov	r0, r4
 8005afc:	f000 fb60 	bl	80061c0 <_calloc_r>
 8005b00:	b160      	cbz	r0, 8005b1c <_Balloc+0x64>
 8005b02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b06:	e00e      	b.n	8005b26 <_Balloc+0x6e>
 8005b08:	2221      	movs	r2, #33	; 0x21
 8005b0a:	2104      	movs	r1, #4
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f000 fb57 	bl	80061c0 <_calloc_r>
 8005b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b14:	60f0      	str	r0, [r6, #12]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e4      	bne.n	8005ae6 <_Balloc+0x2e>
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	6802      	ldr	r2, [r0, #0]
 8005b22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b26:	2300      	movs	r3, #0
 8005b28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b2c:	e7f7      	b.n	8005b1e <_Balloc+0x66>
 8005b2e:	bf00      	nop
 8005b30:	080072f1 	.word	0x080072f1
 8005b34:	08007374 	.word	0x08007374

08005b38 <_Bfree>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	460c      	mov	r4, r1
 8005b40:	b976      	cbnz	r6, 8005b60 <_Bfree+0x28>
 8005b42:	2010      	movs	r0, #16
 8005b44:	f7ff ffa2 	bl	8005a8c <malloc>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	6268      	str	r0, [r5, #36]	; 0x24
 8005b4c:	b920      	cbnz	r0, 8005b58 <_Bfree+0x20>
 8005b4e:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <_Bfree+0x3c>)
 8005b50:	4809      	ldr	r0, [pc, #36]	; (8005b78 <_Bfree+0x40>)
 8005b52:	218a      	movs	r1, #138	; 0x8a
 8005b54:	f000 fd96 	bl	8006684 <__assert_func>
 8005b58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b5c:	6006      	str	r6, [r0, #0]
 8005b5e:	60c6      	str	r6, [r0, #12]
 8005b60:	b13c      	cbz	r4, 8005b72 <_Bfree+0x3a>
 8005b62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b64:	6862      	ldr	r2, [r4, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b6c:	6021      	str	r1, [r4, #0]
 8005b6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	080072f1 	.word	0x080072f1
 8005b78:	08007374 	.word	0x08007374

08005b7c <__multadd>:
 8005b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b80:	690d      	ldr	r5, [r1, #16]
 8005b82:	4607      	mov	r7, r0
 8005b84:	460c      	mov	r4, r1
 8005b86:	461e      	mov	r6, r3
 8005b88:	f101 0c14 	add.w	ip, r1, #20
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	f8dc 3000 	ldr.w	r3, [ip]
 8005b92:	b299      	uxth	r1, r3
 8005b94:	fb02 6101 	mla	r1, r2, r1, r6
 8005b98:	0c1e      	lsrs	r6, r3, #16
 8005b9a:	0c0b      	lsrs	r3, r1, #16
 8005b9c:	fb02 3306 	mla	r3, r2, r6, r3
 8005ba0:	b289      	uxth	r1, r1
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ba8:	4285      	cmp	r5, r0
 8005baa:	f84c 1b04 	str.w	r1, [ip], #4
 8005bae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005bb2:	dcec      	bgt.n	8005b8e <__multadd+0x12>
 8005bb4:	b30e      	cbz	r6, 8005bfa <__multadd+0x7e>
 8005bb6:	68a3      	ldr	r3, [r4, #8]
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	dc19      	bgt.n	8005bf0 <__multadd+0x74>
 8005bbc:	6861      	ldr	r1, [r4, #4]
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	3101      	adds	r1, #1
 8005bc2:	f7ff ff79 	bl	8005ab8 <_Balloc>
 8005bc6:	4680      	mov	r8, r0
 8005bc8:	b928      	cbnz	r0, 8005bd6 <__multadd+0x5a>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	4b0c      	ldr	r3, [pc, #48]	; (8005c00 <__multadd+0x84>)
 8005bce:	480d      	ldr	r0, [pc, #52]	; (8005c04 <__multadd+0x88>)
 8005bd0:	21b5      	movs	r1, #181	; 0xb5
 8005bd2:	f000 fd57 	bl	8006684 <__assert_func>
 8005bd6:	6922      	ldr	r2, [r4, #16]
 8005bd8:	3202      	adds	r2, #2
 8005bda:	f104 010c 	add.w	r1, r4, #12
 8005bde:	0092      	lsls	r2, r2, #2
 8005be0:	300c      	adds	r0, #12
 8005be2:	f7ff ff5b 	bl	8005a9c <memcpy>
 8005be6:	4621      	mov	r1, r4
 8005be8:	4638      	mov	r0, r7
 8005bea:	f7ff ffa5 	bl	8005b38 <_Bfree>
 8005bee:	4644      	mov	r4, r8
 8005bf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bf4:	3501      	adds	r5, #1
 8005bf6:	615e      	str	r6, [r3, #20]
 8005bf8:	6125      	str	r5, [r4, #16]
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c00:	08007363 	.word	0x08007363
 8005c04:	08007374 	.word	0x08007374

08005c08 <__hi0bits>:
 8005c08:	0c03      	lsrs	r3, r0, #16
 8005c0a:	041b      	lsls	r3, r3, #16
 8005c0c:	b9d3      	cbnz	r3, 8005c44 <__hi0bits+0x3c>
 8005c0e:	0400      	lsls	r0, r0, #16
 8005c10:	2310      	movs	r3, #16
 8005c12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005c16:	bf04      	itt	eq
 8005c18:	0200      	lsleq	r0, r0, #8
 8005c1a:	3308      	addeq	r3, #8
 8005c1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005c20:	bf04      	itt	eq
 8005c22:	0100      	lsleq	r0, r0, #4
 8005c24:	3304      	addeq	r3, #4
 8005c26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005c2a:	bf04      	itt	eq
 8005c2c:	0080      	lsleq	r0, r0, #2
 8005c2e:	3302      	addeq	r3, #2
 8005c30:	2800      	cmp	r0, #0
 8005c32:	db05      	blt.n	8005c40 <__hi0bits+0x38>
 8005c34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005c38:	f103 0301 	add.w	r3, r3, #1
 8005c3c:	bf08      	it	eq
 8005c3e:	2320      	moveq	r3, #32
 8005c40:	4618      	mov	r0, r3
 8005c42:	4770      	bx	lr
 8005c44:	2300      	movs	r3, #0
 8005c46:	e7e4      	b.n	8005c12 <__hi0bits+0xa>

08005c48 <__lo0bits>:
 8005c48:	6803      	ldr	r3, [r0, #0]
 8005c4a:	f013 0207 	ands.w	r2, r3, #7
 8005c4e:	4601      	mov	r1, r0
 8005c50:	d00b      	beq.n	8005c6a <__lo0bits+0x22>
 8005c52:	07da      	lsls	r2, r3, #31
 8005c54:	d423      	bmi.n	8005c9e <__lo0bits+0x56>
 8005c56:	0798      	lsls	r0, r3, #30
 8005c58:	bf49      	itett	mi
 8005c5a:	085b      	lsrmi	r3, r3, #1
 8005c5c:	089b      	lsrpl	r3, r3, #2
 8005c5e:	2001      	movmi	r0, #1
 8005c60:	600b      	strmi	r3, [r1, #0]
 8005c62:	bf5c      	itt	pl
 8005c64:	600b      	strpl	r3, [r1, #0]
 8005c66:	2002      	movpl	r0, #2
 8005c68:	4770      	bx	lr
 8005c6a:	b298      	uxth	r0, r3
 8005c6c:	b9a8      	cbnz	r0, 8005c9a <__lo0bits+0x52>
 8005c6e:	0c1b      	lsrs	r3, r3, #16
 8005c70:	2010      	movs	r0, #16
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	b90a      	cbnz	r2, 8005c7a <__lo0bits+0x32>
 8005c76:	3008      	adds	r0, #8
 8005c78:	0a1b      	lsrs	r3, r3, #8
 8005c7a:	071a      	lsls	r2, r3, #28
 8005c7c:	bf04      	itt	eq
 8005c7e:	091b      	lsreq	r3, r3, #4
 8005c80:	3004      	addeq	r0, #4
 8005c82:	079a      	lsls	r2, r3, #30
 8005c84:	bf04      	itt	eq
 8005c86:	089b      	lsreq	r3, r3, #2
 8005c88:	3002      	addeq	r0, #2
 8005c8a:	07da      	lsls	r2, r3, #31
 8005c8c:	d403      	bmi.n	8005c96 <__lo0bits+0x4e>
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	f100 0001 	add.w	r0, r0, #1
 8005c94:	d005      	beq.n	8005ca2 <__lo0bits+0x5a>
 8005c96:	600b      	str	r3, [r1, #0]
 8005c98:	4770      	bx	lr
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	e7e9      	b.n	8005c72 <__lo0bits+0x2a>
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	4770      	bx	lr
 8005ca2:	2020      	movs	r0, #32
 8005ca4:	4770      	bx	lr
	...

08005ca8 <__i2b>:
 8005ca8:	b510      	push	{r4, lr}
 8005caa:	460c      	mov	r4, r1
 8005cac:	2101      	movs	r1, #1
 8005cae:	f7ff ff03 	bl	8005ab8 <_Balloc>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	b928      	cbnz	r0, 8005cc2 <__i2b+0x1a>
 8005cb6:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <__i2b+0x24>)
 8005cb8:	4805      	ldr	r0, [pc, #20]	; (8005cd0 <__i2b+0x28>)
 8005cba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005cbe:	f000 fce1 	bl	8006684 <__assert_func>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	6144      	str	r4, [r0, #20]
 8005cc6:	6103      	str	r3, [r0, #16]
 8005cc8:	bd10      	pop	{r4, pc}
 8005cca:	bf00      	nop
 8005ccc:	08007363 	.word	0x08007363
 8005cd0:	08007374 	.word	0x08007374

08005cd4 <__multiply>:
 8005cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd8:	4691      	mov	r9, r2
 8005cda:	690a      	ldr	r2, [r1, #16]
 8005cdc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	bfb8      	it	lt
 8005ce4:	460b      	movlt	r3, r1
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	bfbc      	itt	lt
 8005cea:	464c      	movlt	r4, r9
 8005cec:	4699      	movlt	r9, r3
 8005cee:	6927      	ldr	r7, [r4, #16]
 8005cf0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005cf4:	68a3      	ldr	r3, [r4, #8]
 8005cf6:	6861      	ldr	r1, [r4, #4]
 8005cf8:	eb07 060a 	add.w	r6, r7, sl
 8005cfc:	42b3      	cmp	r3, r6
 8005cfe:	b085      	sub	sp, #20
 8005d00:	bfb8      	it	lt
 8005d02:	3101      	addlt	r1, #1
 8005d04:	f7ff fed8 	bl	8005ab8 <_Balloc>
 8005d08:	b930      	cbnz	r0, 8005d18 <__multiply+0x44>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	4b44      	ldr	r3, [pc, #272]	; (8005e20 <__multiply+0x14c>)
 8005d0e:	4845      	ldr	r0, [pc, #276]	; (8005e24 <__multiply+0x150>)
 8005d10:	f240 115d 	movw	r1, #349	; 0x15d
 8005d14:	f000 fcb6 	bl	8006684 <__assert_func>
 8005d18:	f100 0514 	add.w	r5, r0, #20
 8005d1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d20:	462b      	mov	r3, r5
 8005d22:	2200      	movs	r2, #0
 8005d24:	4543      	cmp	r3, r8
 8005d26:	d321      	bcc.n	8005d6c <__multiply+0x98>
 8005d28:	f104 0314 	add.w	r3, r4, #20
 8005d2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005d30:	f109 0314 	add.w	r3, r9, #20
 8005d34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005d38:	9202      	str	r2, [sp, #8]
 8005d3a:	1b3a      	subs	r2, r7, r4
 8005d3c:	3a15      	subs	r2, #21
 8005d3e:	f022 0203 	bic.w	r2, r2, #3
 8005d42:	3204      	adds	r2, #4
 8005d44:	f104 0115 	add.w	r1, r4, #21
 8005d48:	428f      	cmp	r7, r1
 8005d4a:	bf38      	it	cc
 8005d4c:	2204      	movcc	r2, #4
 8005d4e:	9201      	str	r2, [sp, #4]
 8005d50:	9a02      	ldr	r2, [sp, #8]
 8005d52:	9303      	str	r3, [sp, #12]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d80c      	bhi.n	8005d72 <__multiply+0x9e>
 8005d58:	2e00      	cmp	r6, #0
 8005d5a:	dd03      	ble.n	8005d64 <__multiply+0x90>
 8005d5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d05a      	beq.n	8005e1a <__multiply+0x146>
 8005d64:	6106      	str	r6, [r0, #16]
 8005d66:	b005      	add	sp, #20
 8005d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6c:	f843 2b04 	str.w	r2, [r3], #4
 8005d70:	e7d8      	b.n	8005d24 <__multiply+0x50>
 8005d72:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d76:	f1ba 0f00 	cmp.w	sl, #0
 8005d7a:	d024      	beq.n	8005dc6 <__multiply+0xf2>
 8005d7c:	f104 0e14 	add.w	lr, r4, #20
 8005d80:	46a9      	mov	r9, r5
 8005d82:	f04f 0c00 	mov.w	ip, #0
 8005d86:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d8a:	f8d9 1000 	ldr.w	r1, [r9]
 8005d8e:	fa1f fb82 	uxth.w	fp, r2
 8005d92:	b289      	uxth	r1, r1
 8005d94:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005d9c:	f8d9 2000 	ldr.w	r2, [r9]
 8005da0:	4461      	add	r1, ip
 8005da2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005da6:	fb0a c20b 	mla	r2, sl, fp, ip
 8005daa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005dae:	b289      	uxth	r1, r1
 8005db0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005db4:	4577      	cmp	r7, lr
 8005db6:	f849 1b04 	str.w	r1, [r9], #4
 8005dba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005dbe:	d8e2      	bhi.n	8005d86 <__multiply+0xb2>
 8005dc0:	9a01      	ldr	r2, [sp, #4]
 8005dc2:	f845 c002 	str.w	ip, [r5, r2]
 8005dc6:	9a03      	ldr	r2, [sp, #12]
 8005dc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005dcc:	3304      	adds	r3, #4
 8005dce:	f1b9 0f00 	cmp.w	r9, #0
 8005dd2:	d020      	beq.n	8005e16 <__multiply+0x142>
 8005dd4:	6829      	ldr	r1, [r5, #0]
 8005dd6:	f104 0c14 	add.w	ip, r4, #20
 8005dda:	46ae      	mov	lr, r5
 8005ddc:	f04f 0a00 	mov.w	sl, #0
 8005de0:	f8bc b000 	ldrh.w	fp, [ip]
 8005de4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005de8:	fb09 220b 	mla	r2, r9, fp, r2
 8005dec:	4492      	add	sl, r2
 8005dee:	b289      	uxth	r1, r1
 8005df0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005df4:	f84e 1b04 	str.w	r1, [lr], #4
 8005df8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005dfc:	f8be 1000 	ldrh.w	r1, [lr]
 8005e00:	0c12      	lsrs	r2, r2, #16
 8005e02:	fb09 1102 	mla	r1, r9, r2, r1
 8005e06:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005e0a:	4567      	cmp	r7, ip
 8005e0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005e10:	d8e6      	bhi.n	8005de0 <__multiply+0x10c>
 8005e12:	9a01      	ldr	r2, [sp, #4]
 8005e14:	50a9      	str	r1, [r5, r2]
 8005e16:	3504      	adds	r5, #4
 8005e18:	e79a      	b.n	8005d50 <__multiply+0x7c>
 8005e1a:	3e01      	subs	r6, #1
 8005e1c:	e79c      	b.n	8005d58 <__multiply+0x84>
 8005e1e:	bf00      	nop
 8005e20:	08007363 	.word	0x08007363
 8005e24:	08007374 	.word	0x08007374

08005e28 <__pow5mult>:
 8005e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e2c:	4615      	mov	r5, r2
 8005e2e:	f012 0203 	ands.w	r2, r2, #3
 8005e32:	4606      	mov	r6, r0
 8005e34:	460f      	mov	r7, r1
 8005e36:	d007      	beq.n	8005e48 <__pow5mult+0x20>
 8005e38:	4c25      	ldr	r4, [pc, #148]	; (8005ed0 <__pow5mult+0xa8>)
 8005e3a:	3a01      	subs	r2, #1
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e42:	f7ff fe9b 	bl	8005b7c <__multadd>
 8005e46:	4607      	mov	r7, r0
 8005e48:	10ad      	asrs	r5, r5, #2
 8005e4a:	d03d      	beq.n	8005ec8 <__pow5mult+0xa0>
 8005e4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e4e:	b97c      	cbnz	r4, 8005e70 <__pow5mult+0x48>
 8005e50:	2010      	movs	r0, #16
 8005e52:	f7ff fe1b 	bl	8005a8c <malloc>
 8005e56:	4602      	mov	r2, r0
 8005e58:	6270      	str	r0, [r6, #36]	; 0x24
 8005e5a:	b928      	cbnz	r0, 8005e68 <__pow5mult+0x40>
 8005e5c:	4b1d      	ldr	r3, [pc, #116]	; (8005ed4 <__pow5mult+0xac>)
 8005e5e:	481e      	ldr	r0, [pc, #120]	; (8005ed8 <__pow5mult+0xb0>)
 8005e60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005e64:	f000 fc0e 	bl	8006684 <__assert_func>
 8005e68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e6c:	6004      	str	r4, [r0, #0]
 8005e6e:	60c4      	str	r4, [r0, #12]
 8005e70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e78:	b94c      	cbnz	r4, 8005e8e <__pow5mult+0x66>
 8005e7a:	f240 2171 	movw	r1, #625	; 0x271
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f7ff ff12 	bl	8005ca8 <__i2b>
 8005e84:	2300      	movs	r3, #0
 8005e86:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	6003      	str	r3, [r0, #0]
 8005e8e:	f04f 0900 	mov.w	r9, #0
 8005e92:	07eb      	lsls	r3, r5, #31
 8005e94:	d50a      	bpl.n	8005eac <__pow5mult+0x84>
 8005e96:	4639      	mov	r1, r7
 8005e98:	4622      	mov	r2, r4
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f7ff ff1a 	bl	8005cd4 <__multiply>
 8005ea0:	4639      	mov	r1, r7
 8005ea2:	4680      	mov	r8, r0
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f7ff fe47 	bl	8005b38 <_Bfree>
 8005eaa:	4647      	mov	r7, r8
 8005eac:	106d      	asrs	r5, r5, #1
 8005eae:	d00b      	beq.n	8005ec8 <__pow5mult+0xa0>
 8005eb0:	6820      	ldr	r0, [r4, #0]
 8005eb2:	b938      	cbnz	r0, 8005ec4 <__pow5mult+0x9c>
 8005eb4:	4622      	mov	r2, r4
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f7ff ff0b 	bl	8005cd4 <__multiply>
 8005ebe:	6020      	str	r0, [r4, #0]
 8005ec0:	f8c0 9000 	str.w	r9, [r0]
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	e7e4      	b.n	8005e92 <__pow5mult+0x6a>
 8005ec8:	4638      	mov	r0, r7
 8005eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ece:	bf00      	nop
 8005ed0:	080074c0 	.word	0x080074c0
 8005ed4:	080072f1 	.word	0x080072f1
 8005ed8:	08007374 	.word	0x08007374

08005edc <__lshift>:
 8005edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	6849      	ldr	r1, [r1, #4]
 8005ee4:	6923      	ldr	r3, [r4, #16]
 8005ee6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005eea:	68a3      	ldr	r3, [r4, #8]
 8005eec:	4607      	mov	r7, r0
 8005eee:	4691      	mov	r9, r2
 8005ef0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ef4:	f108 0601 	add.w	r6, r8, #1
 8005ef8:	42b3      	cmp	r3, r6
 8005efa:	db0b      	blt.n	8005f14 <__lshift+0x38>
 8005efc:	4638      	mov	r0, r7
 8005efe:	f7ff fddb 	bl	8005ab8 <_Balloc>
 8005f02:	4605      	mov	r5, r0
 8005f04:	b948      	cbnz	r0, 8005f1a <__lshift+0x3e>
 8005f06:	4602      	mov	r2, r0
 8005f08:	4b2a      	ldr	r3, [pc, #168]	; (8005fb4 <__lshift+0xd8>)
 8005f0a:	482b      	ldr	r0, [pc, #172]	; (8005fb8 <__lshift+0xdc>)
 8005f0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005f10:	f000 fbb8 	bl	8006684 <__assert_func>
 8005f14:	3101      	adds	r1, #1
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	e7ee      	b.n	8005ef8 <__lshift+0x1c>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f100 0114 	add.w	r1, r0, #20
 8005f20:	f100 0210 	add.w	r2, r0, #16
 8005f24:	4618      	mov	r0, r3
 8005f26:	4553      	cmp	r3, sl
 8005f28:	db37      	blt.n	8005f9a <__lshift+0xbe>
 8005f2a:	6920      	ldr	r0, [r4, #16]
 8005f2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f30:	f104 0314 	add.w	r3, r4, #20
 8005f34:	f019 091f 	ands.w	r9, r9, #31
 8005f38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f40:	d02f      	beq.n	8005fa2 <__lshift+0xc6>
 8005f42:	f1c9 0e20 	rsb	lr, r9, #32
 8005f46:	468a      	mov	sl, r1
 8005f48:	f04f 0c00 	mov.w	ip, #0
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	fa02 f209 	lsl.w	r2, r2, r9
 8005f52:	ea42 020c 	orr.w	r2, r2, ip
 8005f56:	f84a 2b04 	str.w	r2, [sl], #4
 8005f5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f5e:	4298      	cmp	r0, r3
 8005f60:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005f64:	d8f2      	bhi.n	8005f4c <__lshift+0x70>
 8005f66:	1b03      	subs	r3, r0, r4
 8005f68:	3b15      	subs	r3, #21
 8005f6a:	f023 0303 	bic.w	r3, r3, #3
 8005f6e:	3304      	adds	r3, #4
 8005f70:	f104 0215 	add.w	r2, r4, #21
 8005f74:	4290      	cmp	r0, r2
 8005f76:	bf38      	it	cc
 8005f78:	2304      	movcc	r3, #4
 8005f7a:	f841 c003 	str.w	ip, [r1, r3]
 8005f7e:	f1bc 0f00 	cmp.w	ip, #0
 8005f82:	d001      	beq.n	8005f88 <__lshift+0xac>
 8005f84:	f108 0602 	add.w	r6, r8, #2
 8005f88:	3e01      	subs	r6, #1
 8005f8a:	4638      	mov	r0, r7
 8005f8c:	612e      	str	r6, [r5, #16]
 8005f8e:	4621      	mov	r1, r4
 8005f90:	f7ff fdd2 	bl	8005b38 <_Bfree>
 8005f94:	4628      	mov	r0, r5
 8005f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	e7c1      	b.n	8005f26 <__lshift+0x4a>
 8005fa2:	3904      	subs	r1, #4
 8005fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fa8:	f841 2f04 	str.w	r2, [r1, #4]!
 8005fac:	4298      	cmp	r0, r3
 8005fae:	d8f9      	bhi.n	8005fa4 <__lshift+0xc8>
 8005fb0:	e7ea      	b.n	8005f88 <__lshift+0xac>
 8005fb2:	bf00      	nop
 8005fb4:	08007363 	.word	0x08007363
 8005fb8:	08007374 	.word	0x08007374

08005fbc <__mcmp>:
 8005fbc:	b530      	push	{r4, r5, lr}
 8005fbe:	6902      	ldr	r2, [r0, #16]
 8005fc0:	690c      	ldr	r4, [r1, #16]
 8005fc2:	1b12      	subs	r2, r2, r4
 8005fc4:	d10e      	bne.n	8005fe4 <__mcmp+0x28>
 8005fc6:	f100 0314 	add.w	r3, r0, #20
 8005fca:	3114      	adds	r1, #20
 8005fcc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005fd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005fd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005fd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005fdc:	42a5      	cmp	r5, r4
 8005fde:	d003      	beq.n	8005fe8 <__mcmp+0x2c>
 8005fe0:	d305      	bcc.n	8005fee <__mcmp+0x32>
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	bd30      	pop	{r4, r5, pc}
 8005fe8:	4283      	cmp	r3, r0
 8005fea:	d3f3      	bcc.n	8005fd4 <__mcmp+0x18>
 8005fec:	e7fa      	b.n	8005fe4 <__mcmp+0x28>
 8005fee:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff2:	e7f7      	b.n	8005fe4 <__mcmp+0x28>

08005ff4 <__mdiff>:
 8005ff4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	4620      	mov	r0, r4
 8006000:	4690      	mov	r8, r2
 8006002:	f7ff ffdb 	bl	8005fbc <__mcmp>
 8006006:	1e05      	subs	r5, r0, #0
 8006008:	d110      	bne.n	800602c <__mdiff+0x38>
 800600a:	4629      	mov	r1, r5
 800600c:	4630      	mov	r0, r6
 800600e:	f7ff fd53 	bl	8005ab8 <_Balloc>
 8006012:	b930      	cbnz	r0, 8006022 <__mdiff+0x2e>
 8006014:	4b3a      	ldr	r3, [pc, #232]	; (8006100 <__mdiff+0x10c>)
 8006016:	4602      	mov	r2, r0
 8006018:	f240 2132 	movw	r1, #562	; 0x232
 800601c:	4839      	ldr	r0, [pc, #228]	; (8006104 <__mdiff+0x110>)
 800601e:	f000 fb31 	bl	8006684 <__assert_func>
 8006022:	2301      	movs	r3, #1
 8006024:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602c:	bfa4      	itt	ge
 800602e:	4643      	movge	r3, r8
 8006030:	46a0      	movge	r8, r4
 8006032:	4630      	mov	r0, r6
 8006034:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006038:	bfa6      	itte	ge
 800603a:	461c      	movge	r4, r3
 800603c:	2500      	movge	r5, #0
 800603e:	2501      	movlt	r5, #1
 8006040:	f7ff fd3a 	bl	8005ab8 <_Balloc>
 8006044:	b920      	cbnz	r0, 8006050 <__mdiff+0x5c>
 8006046:	4b2e      	ldr	r3, [pc, #184]	; (8006100 <__mdiff+0x10c>)
 8006048:	4602      	mov	r2, r0
 800604a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800604e:	e7e5      	b.n	800601c <__mdiff+0x28>
 8006050:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006054:	6926      	ldr	r6, [r4, #16]
 8006056:	60c5      	str	r5, [r0, #12]
 8006058:	f104 0914 	add.w	r9, r4, #20
 800605c:	f108 0514 	add.w	r5, r8, #20
 8006060:	f100 0e14 	add.w	lr, r0, #20
 8006064:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006068:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800606c:	f108 0210 	add.w	r2, r8, #16
 8006070:	46f2      	mov	sl, lr
 8006072:	2100      	movs	r1, #0
 8006074:	f859 3b04 	ldr.w	r3, [r9], #4
 8006078:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800607c:	fa1f f883 	uxth.w	r8, r3
 8006080:	fa11 f18b 	uxtah	r1, r1, fp
 8006084:	0c1b      	lsrs	r3, r3, #16
 8006086:	eba1 0808 	sub.w	r8, r1, r8
 800608a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800608e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006092:	fa1f f888 	uxth.w	r8, r8
 8006096:	1419      	asrs	r1, r3, #16
 8006098:	454e      	cmp	r6, r9
 800609a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800609e:	f84a 3b04 	str.w	r3, [sl], #4
 80060a2:	d8e7      	bhi.n	8006074 <__mdiff+0x80>
 80060a4:	1b33      	subs	r3, r6, r4
 80060a6:	3b15      	subs	r3, #21
 80060a8:	f023 0303 	bic.w	r3, r3, #3
 80060ac:	3304      	adds	r3, #4
 80060ae:	3415      	adds	r4, #21
 80060b0:	42a6      	cmp	r6, r4
 80060b2:	bf38      	it	cc
 80060b4:	2304      	movcc	r3, #4
 80060b6:	441d      	add	r5, r3
 80060b8:	4473      	add	r3, lr
 80060ba:	469e      	mov	lr, r3
 80060bc:	462e      	mov	r6, r5
 80060be:	4566      	cmp	r6, ip
 80060c0:	d30e      	bcc.n	80060e0 <__mdiff+0xec>
 80060c2:	f10c 0203 	add.w	r2, ip, #3
 80060c6:	1b52      	subs	r2, r2, r5
 80060c8:	f022 0203 	bic.w	r2, r2, #3
 80060cc:	3d03      	subs	r5, #3
 80060ce:	45ac      	cmp	ip, r5
 80060d0:	bf38      	it	cc
 80060d2:	2200      	movcc	r2, #0
 80060d4:	441a      	add	r2, r3
 80060d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80060da:	b17b      	cbz	r3, 80060fc <__mdiff+0x108>
 80060dc:	6107      	str	r7, [r0, #16]
 80060de:	e7a3      	b.n	8006028 <__mdiff+0x34>
 80060e0:	f856 8b04 	ldr.w	r8, [r6], #4
 80060e4:	fa11 f288 	uxtah	r2, r1, r8
 80060e8:	1414      	asrs	r4, r2, #16
 80060ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80060ee:	b292      	uxth	r2, r2
 80060f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80060f4:	f84e 2b04 	str.w	r2, [lr], #4
 80060f8:	1421      	asrs	r1, r4, #16
 80060fa:	e7e0      	b.n	80060be <__mdiff+0xca>
 80060fc:	3f01      	subs	r7, #1
 80060fe:	e7ea      	b.n	80060d6 <__mdiff+0xe2>
 8006100:	08007363 	.word	0x08007363
 8006104:	08007374 	.word	0x08007374

08006108 <__d2b>:
 8006108:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800610c:	4689      	mov	r9, r1
 800610e:	2101      	movs	r1, #1
 8006110:	ec57 6b10 	vmov	r6, r7, d0
 8006114:	4690      	mov	r8, r2
 8006116:	f7ff fccf 	bl	8005ab8 <_Balloc>
 800611a:	4604      	mov	r4, r0
 800611c:	b930      	cbnz	r0, 800612c <__d2b+0x24>
 800611e:	4602      	mov	r2, r0
 8006120:	4b25      	ldr	r3, [pc, #148]	; (80061b8 <__d2b+0xb0>)
 8006122:	4826      	ldr	r0, [pc, #152]	; (80061bc <__d2b+0xb4>)
 8006124:	f240 310a 	movw	r1, #778	; 0x30a
 8006128:	f000 faac 	bl	8006684 <__assert_func>
 800612c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006130:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006134:	bb35      	cbnz	r5, 8006184 <__d2b+0x7c>
 8006136:	2e00      	cmp	r6, #0
 8006138:	9301      	str	r3, [sp, #4]
 800613a:	d028      	beq.n	800618e <__d2b+0x86>
 800613c:	4668      	mov	r0, sp
 800613e:	9600      	str	r6, [sp, #0]
 8006140:	f7ff fd82 	bl	8005c48 <__lo0bits>
 8006144:	9900      	ldr	r1, [sp, #0]
 8006146:	b300      	cbz	r0, 800618a <__d2b+0x82>
 8006148:	9a01      	ldr	r2, [sp, #4]
 800614a:	f1c0 0320 	rsb	r3, r0, #32
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	430b      	orrs	r3, r1
 8006154:	40c2      	lsrs	r2, r0
 8006156:	6163      	str	r3, [r4, #20]
 8006158:	9201      	str	r2, [sp, #4]
 800615a:	9b01      	ldr	r3, [sp, #4]
 800615c:	61a3      	str	r3, [r4, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	bf14      	ite	ne
 8006162:	2202      	movne	r2, #2
 8006164:	2201      	moveq	r2, #1
 8006166:	6122      	str	r2, [r4, #16]
 8006168:	b1d5      	cbz	r5, 80061a0 <__d2b+0x98>
 800616a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800616e:	4405      	add	r5, r0
 8006170:	f8c9 5000 	str.w	r5, [r9]
 8006174:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006178:	f8c8 0000 	str.w	r0, [r8]
 800617c:	4620      	mov	r0, r4
 800617e:	b003      	add	sp, #12
 8006180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006184:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006188:	e7d5      	b.n	8006136 <__d2b+0x2e>
 800618a:	6161      	str	r1, [r4, #20]
 800618c:	e7e5      	b.n	800615a <__d2b+0x52>
 800618e:	a801      	add	r0, sp, #4
 8006190:	f7ff fd5a 	bl	8005c48 <__lo0bits>
 8006194:	9b01      	ldr	r3, [sp, #4]
 8006196:	6163      	str	r3, [r4, #20]
 8006198:	2201      	movs	r2, #1
 800619a:	6122      	str	r2, [r4, #16]
 800619c:	3020      	adds	r0, #32
 800619e:	e7e3      	b.n	8006168 <__d2b+0x60>
 80061a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80061a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80061a8:	f8c9 0000 	str.w	r0, [r9]
 80061ac:	6918      	ldr	r0, [r3, #16]
 80061ae:	f7ff fd2b 	bl	8005c08 <__hi0bits>
 80061b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80061b6:	e7df      	b.n	8006178 <__d2b+0x70>
 80061b8:	08007363 	.word	0x08007363
 80061bc:	08007374 	.word	0x08007374

080061c0 <_calloc_r>:
 80061c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061c2:	fba1 2402 	umull	r2, r4, r1, r2
 80061c6:	b94c      	cbnz	r4, 80061dc <_calloc_r+0x1c>
 80061c8:	4611      	mov	r1, r2
 80061ca:	9201      	str	r2, [sp, #4]
 80061cc:	f000 f87a 	bl	80062c4 <_malloc_r>
 80061d0:	9a01      	ldr	r2, [sp, #4]
 80061d2:	4605      	mov	r5, r0
 80061d4:	b930      	cbnz	r0, 80061e4 <_calloc_r+0x24>
 80061d6:	4628      	mov	r0, r5
 80061d8:	b003      	add	sp, #12
 80061da:	bd30      	pop	{r4, r5, pc}
 80061dc:	220c      	movs	r2, #12
 80061de:	6002      	str	r2, [r0, #0]
 80061e0:	2500      	movs	r5, #0
 80061e2:	e7f8      	b.n	80061d6 <_calloc_r+0x16>
 80061e4:	4621      	mov	r1, r4
 80061e6:	f7fe f941 	bl	800446c <memset>
 80061ea:	e7f4      	b.n	80061d6 <_calloc_r+0x16>

080061ec <_free_r>:
 80061ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061ee:	2900      	cmp	r1, #0
 80061f0:	d044      	beq.n	800627c <_free_r+0x90>
 80061f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f6:	9001      	str	r0, [sp, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f1a1 0404 	sub.w	r4, r1, #4
 80061fe:	bfb8      	it	lt
 8006200:	18e4      	addlt	r4, r4, r3
 8006202:	f000 fa9b 	bl	800673c <__malloc_lock>
 8006206:	4a1e      	ldr	r2, [pc, #120]	; (8006280 <_free_r+0x94>)
 8006208:	9801      	ldr	r0, [sp, #4]
 800620a:	6813      	ldr	r3, [r2, #0]
 800620c:	b933      	cbnz	r3, 800621c <_free_r+0x30>
 800620e:	6063      	str	r3, [r4, #4]
 8006210:	6014      	str	r4, [r2, #0]
 8006212:	b003      	add	sp, #12
 8006214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006218:	f000 ba96 	b.w	8006748 <__malloc_unlock>
 800621c:	42a3      	cmp	r3, r4
 800621e:	d908      	bls.n	8006232 <_free_r+0x46>
 8006220:	6825      	ldr	r5, [r4, #0]
 8006222:	1961      	adds	r1, r4, r5
 8006224:	428b      	cmp	r3, r1
 8006226:	bf01      	itttt	eq
 8006228:	6819      	ldreq	r1, [r3, #0]
 800622a:	685b      	ldreq	r3, [r3, #4]
 800622c:	1949      	addeq	r1, r1, r5
 800622e:	6021      	streq	r1, [r4, #0]
 8006230:	e7ed      	b.n	800620e <_free_r+0x22>
 8006232:	461a      	mov	r2, r3
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	b10b      	cbz	r3, 800623c <_free_r+0x50>
 8006238:	42a3      	cmp	r3, r4
 800623a:	d9fa      	bls.n	8006232 <_free_r+0x46>
 800623c:	6811      	ldr	r1, [r2, #0]
 800623e:	1855      	adds	r5, r2, r1
 8006240:	42a5      	cmp	r5, r4
 8006242:	d10b      	bne.n	800625c <_free_r+0x70>
 8006244:	6824      	ldr	r4, [r4, #0]
 8006246:	4421      	add	r1, r4
 8006248:	1854      	adds	r4, r2, r1
 800624a:	42a3      	cmp	r3, r4
 800624c:	6011      	str	r1, [r2, #0]
 800624e:	d1e0      	bne.n	8006212 <_free_r+0x26>
 8006250:	681c      	ldr	r4, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	6053      	str	r3, [r2, #4]
 8006256:	4421      	add	r1, r4
 8006258:	6011      	str	r1, [r2, #0]
 800625a:	e7da      	b.n	8006212 <_free_r+0x26>
 800625c:	d902      	bls.n	8006264 <_free_r+0x78>
 800625e:	230c      	movs	r3, #12
 8006260:	6003      	str	r3, [r0, #0]
 8006262:	e7d6      	b.n	8006212 <_free_r+0x26>
 8006264:	6825      	ldr	r5, [r4, #0]
 8006266:	1961      	adds	r1, r4, r5
 8006268:	428b      	cmp	r3, r1
 800626a:	bf04      	itt	eq
 800626c:	6819      	ldreq	r1, [r3, #0]
 800626e:	685b      	ldreq	r3, [r3, #4]
 8006270:	6063      	str	r3, [r4, #4]
 8006272:	bf04      	itt	eq
 8006274:	1949      	addeq	r1, r1, r5
 8006276:	6021      	streq	r1, [r4, #0]
 8006278:	6054      	str	r4, [r2, #4]
 800627a:	e7ca      	b.n	8006212 <_free_r+0x26>
 800627c:	b003      	add	sp, #12
 800627e:	bd30      	pop	{r4, r5, pc}
 8006280:	200003a4 	.word	0x200003a4

08006284 <sbrk_aligned>:
 8006284:	b570      	push	{r4, r5, r6, lr}
 8006286:	4e0e      	ldr	r6, [pc, #56]	; (80062c0 <sbrk_aligned+0x3c>)
 8006288:	460c      	mov	r4, r1
 800628a:	6831      	ldr	r1, [r6, #0]
 800628c:	4605      	mov	r5, r0
 800628e:	b911      	cbnz	r1, 8006296 <sbrk_aligned+0x12>
 8006290:	f000 f9e8 	bl	8006664 <_sbrk_r>
 8006294:	6030      	str	r0, [r6, #0]
 8006296:	4621      	mov	r1, r4
 8006298:	4628      	mov	r0, r5
 800629a:	f000 f9e3 	bl	8006664 <_sbrk_r>
 800629e:	1c43      	adds	r3, r0, #1
 80062a0:	d00a      	beq.n	80062b8 <sbrk_aligned+0x34>
 80062a2:	1cc4      	adds	r4, r0, #3
 80062a4:	f024 0403 	bic.w	r4, r4, #3
 80062a8:	42a0      	cmp	r0, r4
 80062aa:	d007      	beq.n	80062bc <sbrk_aligned+0x38>
 80062ac:	1a21      	subs	r1, r4, r0
 80062ae:	4628      	mov	r0, r5
 80062b0:	f000 f9d8 	bl	8006664 <_sbrk_r>
 80062b4:	3001      	adds	r0, #1
 80062b6:	d101      	bne.n	80062bc <sbrk_aligned+0x38>
 80062b8:	f04f 34ff 	mov.w	r4, #4294967295
 80062bc:	4620      	mov	r0, r4
 80062be:	bd70      	pop	{r4, r5, r6, pc}
 80062c0:	200003a8 	.word	0x200003a8

080062c4 <_malloc_r>:
 80062c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c8:	1ccd      	adds	r5, r1, #3
 80062ca:	f025 0503 	bic.w	r5, r5, #3
 80062ce:	3508      	adds	r5, #8
 80062d0:	2d0c      	cmp	r5, #12
 80062d2:	bf38      	it	cc
 80062d4:	250c      	movcc	r5, #12
 80062d6:	2d00      	cmp	r5, #0
 80062d8:	4607      	mov	r7, r0
 80062da:	db01      	blt.n	80062e0 <_malloc_r+0x1c>
 80062dc:	42a9      	cmp	r1, r5
 80062de:	d905      	bls.n	80062ec <_malloc_r+0x28>
 80062e0:	230c      	movs	r3, #12
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	2600      	movs	r6, #0
 80062e6:	4630      	mov	r0, r6
 80062e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062ec:	4e2e      	ldr	r6, [pc, #184]	; (80063a8 <_malloc_r+0xe4>)
 80062ee:	f000 fa25 	bl	800673c <__malloc_lock>
 80062f2:	6833      	ldr	r3, [r6, #0]
 80062f4:	461c      	mov	r4, r3
 80062f6:	bb34      	cbnz	r4, 8006346 <_malloc_r+0x82>
 80062f8:	4629      	mov	r1, r5
 80062fa:	4638      	mov	r0, r7
 80062fc:	f7ff ffc2 	bl	8006284 <sbrk_aligned>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	4604      	mov	r4, r0
 8006304:	d14d      	bne.n	80063a2 <_malloc_r+0xde>
 8006306:	6834      	ldr	r4, [r6, #0]
 8006308:	4626      	mov	r6, r4
 800630a:	2e00      	cmp	r6, #0
 800630c:	d140      	bne.n	8006390 <_malloc_r+0xcc>
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	4631      	mov	r1, r6
 8006312:	4638      	mov	r0, r7
 8006314:	eb04 0803 	add.w	r8, r4, r3
 8006318:	f000 f9a4 	bl	8006664 <_sbrk_r>
 800631c:	4580      	cmp	r8, r0
 800631e:	d13a      	bne.n	8006396 <_malloc_r+0xd2>
 8006320:	6821      	ldr	r1, [r4, #0]
 8006322:	3503      	adds	r5, #3
 8006324:	1a6d      	subs	r5, r5, r1
 8006326:	f025 0503 	bic.w	r5, r5, #3
 800632a:	3508      	adds	r5, #8
 800632c:	2d0c      	cmp	r5, #12
 800632e:	bf38      	it	cc
 8006330:	250c      	movcc	r5, #12
 8006332:	4629      	mov	r1, r5
 8006334:	4638      	mov	r0, r7
 8006336:	f7ff ffa5 	bl	8006284 <sbrk_aligned>
 800633a:	3001      	adds	r0, #1
 800633c:	d02b      	beq.n	8006396 <_malloc_r+0xd2>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	442b      	add	r3, r5
 8006342:	6023      	str	r3, [r4, #0]
 8006344:	e00e      	b.n	8006364 <_malloc_r+0xa0>
 8006346:	6822      	ldr	r2, [r4, #0]
 8006348:	1b52      	subs	r2, r2, r5
 800634a:	d41e      	bmi.n	800638a <_malloc_r+0xc6>
 800634c:	2a0b      	cmp	r2, #11
 800634e:	d916      	bls.n	800637e <_malloc_r+0xba>
 8006350:	1961      	adds	r1, r4, r5
 8006352:	42a3      	cmp	r3, r4
 8006354:	6025      	str	r5, [r4, #0]
 8006356:	bf18      	it	ne
 8006358:	6059      	strne	r1, [r3, #4]
 800635a:	6863      	ldr	r3, [r4, #4]
 800635c:	bf08      	it	eq
 800635e:	6031      	streq	r1, [r6, #0]
 8006360:	5162      	str	r2, [r4, r5]
 8006362:	604b      	str	r3, [r1, #4]
 8006364:	4638      	mov	r0, r7
 8006366:	f104 060b 	add.w	r6, r4, #11
 800636a:	f000 f9ed 	bl	8006748 <__malloc_unlock>
 800636e:	f026 0607 	bic.w	r6, r6, #7
 8006372:	1d23      	adds	r3, r4, #4
 8006374:	1af2      	subs	r2, r6, r3
 8006376:	d0b6      	beq.n	80062e6 <_malloc_r+0x22>
 8006378:	1b9b      	subs	r3, r3, r6
 800637a:	50a3      	str	r3, [r4, r2]
 800637c:	e7b3      	b.n	80062e6 <_malloc_r+0x22>
 800637e:	6862      	ldr	r2, [r4, #4]
 8006380:	42a3      	cmp	r3, r4
 8006382:	bf0c      	ite	eq
 8006384:	6032      	streq	r2, [r6, #0]
 8006386:	605a      	strne	r2, [r3, #4]
 8006388:	e7ec      	b.n	8006364 <_malloc_r+0xa0>
 800638a:	4623      	mov	r3, r4
 800638c:	6864      	ldr	r4, [r4, #4]
 800638e:	e7b2      	b.n	80062f6 <_malloc_r+0x32>
 8006390:	4634      	mov	r4, r6
 8006392:	6876      	ldr	r6, [r6, #4]
 8006394:	e7b9      	b.n	800630a <_malloc_r+0x46>
 8006396:	230c      	movs	r3, #12
 8006398:	603b      	str	r3, [r7, #0]
 800639a:	4638      	mov	r0, r7
 800639c:	f000 f9d4 	bl	8006748 <__malloc_unlock>
 80063a0:	e7a1      	b.n	80062e6 <_malloc_r+0x22>
 80063a2:	6025      	str	r5, [r4, #0]
 80063a4:	e7de      	b.n	8006364 <_malloc_r+0xa0>
 80063a6:	bf00      	nop
 80063a8:	200003a4 	.word	0x200003a4

080063ac <__ssputs_r>:
 80063ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	688e      	ldr	r6, [r1, #8]
 80063b2:	429e      	cmp	r6, r3
 80063b4:	4682      	mov	sl, r0
 80063b6:	460c      	mov	r4, r1
 80063b8:	4690      	mov	r8, r2
 80063ba:	461f      	mov	r7, r3
 80063bc:	d838      	bhi.n	8006430 <__ssputs_r+0x84>
 80063be:	898a      	ldrh	r2, [r1, #12]
 80063c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063c4:	d032      	beq.n	800642c <__ssputs_r+0x80>
 80063c6:	6825      	ldr	r5, [r4, #0]
 80063c8:	6909      	ldr	r1, [r1, #16]
 80063ca:	eba5 0901 	sub.w	r9, r5, r1
 80063ce:	6965      	ldr	r5, [r4, #20]
 80063d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063d8:	3301      	adds	r3, #1
 80063da:	444b      	add	r3, r9
 80063dc:	106d      	asrs	r5, r5, #1
 80063de:	429d      	cmp	r5, r3
 80063e0:	bf38      	it	cc
 80063e2:	461d      	movcc	r5, r3
 80063e4:	0553      	lsls	r3, r2, #21
 80063e6:	d531      	bpl.n	800644c <__ssputs_r+0xa0>
 80063e8:	4629      	mov	r1, r5
 80063ea:	f7ff ff6b 	bl	80062c4 <_malloc_r>
 80063ee:	4606      	mov	r6, r0
 80063f0:	b950      	cbnz	r0, 8006408 <__ssputs_r+0x5c>
 80063f2:	230c      	movs	r3, #12
 80063f4:	f8ca 3000 	str.w	r3, [sl]
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063fe:	81a3      	strh	r3, [r4, #12]
 8006400:	f04f 30ff 	mov.w	r0, #4294967295
 8006404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006408:	6921      	ldr	r1, [r4, #16]
 800640a:	464a      	mov	r2, r9
 800640c:	f7ff fb46 	bl	8005a9c <memcpy>
 8006410:	89a3      	ldrh	r3, [r4, #12]
 8006412:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641a:	81a3      	strh	r3, [r4, #12]
 800641c:	6126      	str	r6, [r4, #16]
 800641e:	6165      	str	r5, [r4, #20]
 8006420:	444e      	add	r6, r9
 8006422:	eba5 0509 	sub.w	r5, r5, r9
 8006426:	6026      	str	r6, [r4, #0]
 8006428:	60a5      	str	r5, [r4, #8]
 800642a:	463e      	mov	r6, r7
 800642c:	42be      	cmp	r6, r7
 800642e:	d900      	bls.n	8006432 <__ssputs_r+0x86>
 8006430:	463e      	mov	r6, r7
 8006432:	6820      	ldr	r0, [r4, #0]
 8006434:	4632      	mov	r2, r6
 8006436:	4641      	mov	r1, r8
 8006438:	f000 f966 	bl	8006708 <memmove>
 800643c:	68a3      	ldr	r3, [r4, #8]
 800643e:	1b9b      	subs	r3, r3, r6
 8006440:	60a3      	str	r3, [r4, #8]
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	4433      	add	r3, r6
 8006446:	6023      	str	r3, [r4, #0]
 8006448:	2000      	movs	r0, #0
 800644a:	e7db      	b.n	8006404 <__ssputs_r+0x58>
 800644c:	462a      	mov	r2, r5
 800644e:	f000 f981 	bl	8006754 <_realloc_r>
 8006452:	4606      	mov	r6, r0
 8006454:	2800      	cmp	r0, #0
 8006456:	d1e1      	bne.n	800641c <__ssputs_r+0x70>
 8006458:	6921      	ldr	r1, [r4, #16]
 800645a:	4650      	mov	r0, sl
 800645c:	f7ff fec6 	bl	80061ec <_free_r>
 8006460:	e7c7      	b.n	80063f2 <__ssputs_r+0x46>
	...

08006464 <_svfiprintf_r>:
 8006464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006468:	4698      	mov	r8, r3
 800646a:	898b      	ldrh	r3, [r1, #12]
 800646c:	061b      	lsls	r3, r3, #24
 800646e:	b09d      	sub	sp, #116	; 0x74
 8006470:	4607      	mov	r7, r0
 8006472:	460d      	mov	r5, r1
 8006474:	4614      	mov	r4, r2
 8006476:	d50e      	bpl.n	8006496 <_svfiprintf_r+0x32>
 8006478:	690b      	ldr	r3, [r1, #16]
 800647a:	b963      	cbnz	r3, 8006496 <_svfiprintf_r+0x32>
 800647c:	2140      	movs	r1, #64	; 0x40
 800647e:	f7ff ff21 	bl	80062c4 <_malloc_r>
 8006482:	6028      	str	r0, [r5, #0]
 8006484:	6128      	str	r0, [r5, #16]
 8006486:	b920      	cbnz	r0, 8006492 <_svfiprintf_r+0x2e>
 8006488:	230c      	movs	r3, #12
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	e0d1      	b.n	8006636 <_svfiprintf_r+0x1d2>
 8006492:	2340      	movs	r3, #64	; 0x40
 8006494:	616b      	str	r3, [r5, #20]
 8006496:	2300      	movs	r3, #0
 8006498:	9309      	str	r3, [sp, #36]	; 0x24
 800649a:	2320      	movs	r3, #32
 800649c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80064a4:	2330      	movs	r3, #48	; 0x30
 80064a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006650 <_svfiprintf_r+0x1ec>
 80064aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064ae:	f04f 0901 	mov.w	r9, #1
 80064b2:	4623      	mov	r3, r4
 80064b4:	469a      	mov	sl, r3
 80064b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064ba:	b10a      	cbz	r2, 80064c0 <_svfiprintf_r+0x5c>
 80064bc:	2a25      	cmp	r2, #37	; 0x25
 80064be:	d1f9      	bne.n	80064b4 <_svfiprintf_r+0x50>
 80064c0:	ebba 0b04 	subs.w	fp, sl, r4
 80064c4:	d00b      	beq.n	80064de <_svfiprintf_r+0x7a>
 80064c6:	465b      	mov	r3, fp
 80064c8:	4622      	mov	r2, r4
 80064ca:	4629      	mov	r1, r5
 80064cc:	4638      	mov	r0, r7
 80064ce:	f7ff ff6d 	bl	80063ac <__ssputs_r>
 80064d2:	3001      	adds	r0, #1
 80064d4:	f000 80aa 	beq.w	800662c <_svfiprintf_r+0x1c8>
 80064d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064da:	445a      	add	r2, fp
 80064dc:	9209      	str	r2, [sp, #36]	; 0x24
 80064de:	f89a 3000 	ldrb.w	r3, [sl]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 80a2 	beq.w	800662c <_svfiprintf_r+0x1c8>
 80064e8:	2300      	movs	r3, #0
 80064ea:	f04f 32ff 	mov.w	r2, #4294967295
 80064ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064f2:	f10a 0a01 	add.w	sl, sl, #1
 80064f6:	9304      	str	r3, [sp, #16]
 80064f8:	9307      	str	r3, [sp, #28]
 80064fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064fe:	931a      	str	r3, [sp, #104]	; 0x68
 8006500:	4654      	mov	r4, sl
 8006502:	2205      	movs	r2, #5
 8006504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006508:	4851      	ldr	r0, [pc, #324]	; (8006650 <_svfiprintf_r+0x1ec>)
 800650a:	f7f9 fe69 	bl	80001e0 <memchr>
 800650e:	9a04      	ldr	r2, [sp, #16]
 8006510:	b9d8      	cbnz	r0, 800654a <_svfiprintf_r+0xe6>
 8006512:	06d0      	lsls	r0, r2, #27
 8006514:	bf44      	itt	mi
 8006516:	2320      	movmi	r3, #32
 8006518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800651c:	0711      	lsls	r1, r2, #28
 800651e:	bf44      	itt	mi
 8006520:	232b      	movmi	r3, #43	; 0x2b
 8006522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006526:	f89a 3000 	ldrb.w	r3, [sl]
 800652a:	2b2a      	cmp	r3, #42	; 0x2a
 800652c:	d015      	beq.n	800655a <_svfiprintf_r+0xf6>
 800652e:	9a07      	ldr	r2, [sp, #28]
 8006530:	4654      	mov	r4, sl
 8006532:	2000      	movs	r0, #0
 8006534:	f04f 0c0a 	mov.w	ip, #10
 8006538:	4621      	mov	r1, r4
 800653a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800653e:	3b30      	subs	r3, #48	; 0x30
 8006540:	2b09      	cmp	r3, #9
 8006542:	d94e      	bls.n	80065e2 <_svfiprintf_r+0x17e>
 8006544:	b1b0      	cbz	r0, 8006574 <_svfiprintf_r+0x110>
 8006546:	9207      	str	r2, [sp, #28]
 8006548:	e014      	b.n	8006574 <_svfiprintf_r+0x110>
 800654a:	eba0 0308 	sub.w	r3, r0, r8
 800654e:	fa09 f303 	lsl.w	r3, r9, r3
 8006552:	4313      	orrs	r3, r2
 8006554:	9304      	str	r3, [sp, #16]
 8006556:	46a2      	mov	sl, r4
 8006558:	e7d2      	b.n	8006500 <_svfiprintf_r+0x9c>
 800655a:	9b03      	ldr	r3, [sp, #12]
 800655c:	1d19      	adds	r1, r3, #4
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	9103      	str	r1, [sp, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	bfbb      	ittet	lt
 8006566:	425b      	neglt	r3, r3
 8006568:	f042 0202 	orrlt.w	r2, r2, #2
 800656c:	9307      	strge	r3, [sp, #28]
 800656e:	9307      	strlt	r3, [sp, #28]
 8006570:	bfb8      	it	lt
 8006572:	9204      	strlt	r2, [sp, #16]
 8006574:	7823      	ldrb	r3, [r4, #0]
 8006576:	2b2e      	cmp	r3, #46	; 0x2e
 8006578:	d10c      	bne.n	8006594 <_svfiprintf_r+0x130>
 800657a:	7863      	ldrb	r3, [r4, #1]
 800657c:	2b2a      	cmp	r3, #42	; 0x2a
 800657e:	d135      	bne.n	80065ec <_svfiprintf_r+0x188>
 8006580:	9b03      	ldr	r3, [sp, #12]
 8006582:	1d1a      	adds	r2, r3, #4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	9203      	str	r2, [sp, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	bfb8      	it	lt
 800658c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006590:	3402      	adds	r4, #2
 8006592:	9305      	str	r3, [sp, #20]
 8006594:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006660 <_svfiprintf_r+0x1fc>
 8006598:	7821      	ldrb	r1, [r4, #0]
 800659a:	2203      	movs	r2, #3
 800659c:	4650      	mov	r0, sl
 800659e:	f7f9 fe1f 	bl	80001e0 <memchr>
 80065a2:	b140      	cbz	r0, 80065b6 <_svfiprintf_r+0x152>
 80065a4:	2340      	movs	r3, #64	; 0x40
 80065a6:	eba0 000a 	sub.w	r0, r0, sl
 80065aa:	fa03 f000 	lsl.w	r0, r3, r0
 80065ae:	9b04      	ldr	r3, [sp, #16]
 80065b0:	4303      	orrs	r3, r0
 80065b2:	3401      	adds	r4, #1
 80065b4:	9304      	str	r3, [sp, #16]
 80065b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ba:	4826      	ldr	r0, [pc, #152]	; (8006654 <_svfiprintf_r+0x1f0>)
 80065bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065c0:	2206      	movs	r2, #6
 80065c2:	f7f9 fe0d 	bl	80001e0 <memchr>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d038      	beq.n	800663c <_svfiprintf_r+0x1d8>
 80065ca:	4b23      	ldr	r3, [pc, #140]	; (8006658 <_svfiprintf_r+0x1f4>)
 80065cc:	bb1b      	cbnz	r3, 8006616 <_svfiprintf_r+0x1b2>
 80065ce:	9b03      	ldr	r3, [sp, #12]
 80065d0:	3307      	adds	r3, #7
 80065d2:	f023 0307 	bic.w	r3, r3, #7
 80065d6:	3308      	adds	r3, #8
 80065d8:	9303      	str	r3, [sp, #12]
 80065da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065dc:	4433      	add	r3, r6
 80065de:	9309      	str	r3, [sp, #36]	; 0x24
 80065e0:	e767      	b.n	80064b2 <_svfiprintf_r+0x4e>
 80065e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80065e6:	460c      	mov	r4, r1
 80065e8:	2001      	movs	r0, #1
 80065ea:	e7a5      	b.n	8006538 <_svfiprintf_r+0xd4>
 80065ec:	2300      	movs	r3, #0
 80065ee:	3401      	adds	r4, #1
 80065f0:	9305      	str	r3, [sp, #20]
 80065f2:	4619      	mov	r1, r3
 80065f4:	f04f 0c0a 	mov.w	ip, #10
 80065f8:	4620      	mov	r0, r4
 80065fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065fe:	3a30      	subs	r2, #48	; 0x30
 8006600:	2a09      	cmp	r2, #9
 8006602:	d903      	bls.n	800660c <_svfiprintf_r+0x1a8>
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0c5      	beq.n	8006594 <_svfiprintf_r+0x130>
 8006608:	9105      	str	r1, [sp, #20]
 800660a:	e7c3      	b.n	8006594 <_svfiprintf_r+0x130>
 800660c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006610:	4604      	mov	r4, r0
 8006612:	2301      	movs	r3, #1
 8006614:	e7f0      	b.n	80065f8 <_svfiprintf_r+0x194>
 8006616:	ab03      	add	r3, sp, #12
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	462a      	mov	r2, r5
 800661c:	4b0f      	ldr	r3, [pc, #60]	; (800665c <_svfiprintf_r+0x1f8>)
 800661e:	a904      	add	r1, sp, #16
 8006620:	4638      	mov	r0, r7
 8006622:	f7fd ffcb 	bl	80045bc <_printf_float>
 8006626:	1c42      	adds	r2, r0, #1
 8006628:	4606      	mov	r6, r0
 800662a:	d1d6      	bne.n	80065da <_svfiprintf_r+0x176>
 800662c:	89ab      	ldrh	r3, [r5, #12]
 800662e:	065b      	lsls	r3, r3, #25
 8006630:	f53f af2c 	bmi.w	800648c <_svfiprintf_r+0x28>
 8006634:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006636:	b01d      	add	sp, #116	; 0x74
 8006638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663c:	ab03      	add	r3, sp, #12
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	462a      	mov	r2, r5
 8006642:	4b06      	ldr	r3, [pc, #24]	; (800665c <_svfiprintf_r+0x1f8>)
 8006644:	a904      	add	r1, sp, #16
 8006646:	4638      	mov	r0, r7
 8006648:	f7fe fa5c 	bl	8004b04 <_printf_i>
 800664c:	e7eb      	b.n	8006626 <_svfiprintf_r+0x1c2>
 800664e:	bf00      	nop
 8006650:	080074cc 	.word	0x080074cc
 8006654:	080074d6 	.word	0x080074d6
 8006658:	080045bd 	.word	0x080045bd
 800665c:	080063ad 	.word	0x080063ad
 8006660:	080074d2 	.word	0x080074d2

08006664 <_sbrk_r>:
 8006664:	b538      	push	{r3, r4, r5, lr}
 8006666:	4d06      	ldr	r5, [pc, #24]	; (8006680 <_sbrk_r+0x1c>)
 8006668:	2300      	movs	r3, #0
 800666a:	4604      	mov	r4, r0
 800666c:	4608      	mov	r0, r1
 800666e:	602b      	str	r3, [r5, #0]
 8006670:	f7fa ff22 	bl	80014b8 <_sbrk>
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	d102      	bne.n	800667e <_sbrk_r+0x1a>
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	b103      	cbz	r3, 800667e <_sbrk_r+0x1a>
 800667c:	6023      	str	r3, [r4, #0]
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	200003ac 	.word	0x200003ac

08006684 <__assert_func>:
 8006684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006686:	4614      	mov	r4, r2
 8006688:	461a      	mov	r2, r3
 800668a:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <__assert_func+0x2c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4605      	mov	r5, r0
 8006690:	68d8      	ldr	r0, [r3, #12]
 8006692:	b14c      	cbz	r4, 80066a8 <__assert_func+0x24>
 8006694:	4b07      	ldr	r3, [pc, #28]	; (80066b4 <__assert_func+0x30>)
 8006696:	9100      	str	r1, [sp, #0]
 8006698:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800669c:	4906      	ldr	r1, [pc, #24]	; (80066b8 <__assert_func+0x34>)
 800669e:	462b      	mov	r3, r5
 80066a0:	f000 f80e 	bl	80066c0 <fiprintf>
 80066a4:	f000 faac 	bl	8006c00 <abort>
 80066a8:	4b04      	ldr	r3, [pc, #16]	; (80066bc <__assert_func+0x38>)
 80066aa:	461c      	mov	r4, r3
 80066ac:	e7f3      	b.n	8006696 <__assert_func+0x12>
 80066ae:	bf00      	nop
 80066b0:	20000010 	.word	0x20000010
 80066b4:	080074dd 	.word	0x080074dd
 80066b8:	080074ea 	.word	0x080074ea
 80066bc:	08007518 	.word	0x08007518

080066c0 <fiprintf>:
 80066c0:	b40e      	push	{r1, r2, r3}
 80066c2:	b503      	push	{r0, r1, lr}
 80066c4:	4601      	mov	r1, r0
 80066c6:	ab03      	add	r3, sp, #12
 80066c8:	4805      	ldr	r0, [pc, #20]	; (80066e0 <fiprintf+0x20>)
 80066ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ce:	6800      	ldr	r0, [r0, #0]
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	f000 f897 	bl	8006804 <_vfiprintf_r>
 80066d6:	b002      	add	sp, #8
 80066d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066dc:	b003      	add	sp, #12
 80066de:	4770      	bx	lr
 80066e0:	20000010 	.word	0x20000010

080066e4 <__ascii_mbtowc>:
 80066e4:	b082      	sub	sp, #8
 80066e6:	b901      	cbnz	r1, 80066ea <__ascii_mbtowc+0x6>
 80066e8:	a901      	add	r1, sp, #4
 80066ea:	b142      	cbz	r2, 80066fe <__ascii_mbtowc+0x1a>
 80066ec:	b14b      	cbz	r3, 8006702 <__ascii_mbtowc+0x1e>
 80066ee:	7813      	ldrb	r3, [r2, #0]
 80066f0:	600b      	str	r3, [r1, #0]
 80066f2:	7812      	ldrb	r2, [r2, #0]
 80066f4:	1e10      	subs	r0, r2, #0
 80066f6:	bf18      	it	ne
 80066f8:	2001      	movne	r0, #1
 80066fa:	b002      	add	sp, #8
 80066fc:	4770      	bx	lr
 80066fe:	4610      	mov	r0, r2
 8006700:	e7fb      	b.n	80066fa <__ascii_mbtowc+0x16>
 8006702:	f06f 0001 	mvn.w	r0, #1
 8006706:	e7f8      	b.n	80066fa <__ascii_mbtowc+0x16>

08006708 <memmove>:
 8006708:	4288      	cmp	r0, r1
 800670a:	b510      	push	{r4, lr}
 800670c:	eb01 0402 	add.w	r4, r1, r2
 8006710:	d902      	bls.n	8006718 <memmove+0x10>
 8006712:	4284      	cmp	r4, r0
 8006714:	4623      	mov	r3, r4
 8006716:	d807      	bhi.n	8006728 <memmove+0x20>
 8006718:	1e43      	subs	r3, r0, #1
 800671a:	42a1      	cmp	r1, r4
 800671c:	d008      	beq.n	8006730 <memmove+0x28>
 800671e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006722:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006726:	e7f8      	b.n	800671a <memmove+0x12>
 8006728:	4402      	add	r2, r0
 800672a:	4601      	mov	r1, r0
 800672c:	428a      	cmp	r2, r1
 800672e:	d100      	bne.n	8006732 <memmove+0x2a>
 8006730:	bd10      	pop	{r4, pc}
 8006732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800673a:	e7f7      	b.n	800672c <memmove+0x24>

0800673c <__malloc_lock>:
 800673c:	4801      	ldr	r0, [pc, #4]	; (8006744 <__malloc_lock+0x8>)
 800673e:	f000 bc1f 	b.w	8006f80 <__retarget_lock_acquire_recursive>
 8006742:	bf00      	nop
 8006744:	200003b0 	.word	0x200003b0

08006748 <__malloc_unlock>:
 8006748:	4801      	ldr	r0, [pc, #4]	; (8006750 <__malloc_unlock+0x8>)
 800674a:	f000 bc1a 	b.w	8006f82 <__retarget_lock_release_recursive>
 800674e:	bf00      	nop
 8006750:	200003b0 	.word	0x200003b0

08006754 <_realloc_r>:
 8006754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006758:	4680      	mov	r8, r0
 800675a:	4614      	mov	r4, r2
 800675c:	460e      	mov	r6, r1
 800675e:	b921      	cbnz	r1, 800676a <_realloc_r+0x16>
 8006760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006764:	4611      	mov	r1, r2
 8006766:	f7ff bdad 	b.w	80062c4 <_malloc_r>
 800676a:	b92a      	cbnz	r2, 8006778 <_realloc_r+0x24>
 800676c:	f7ff fd3e 	bl	80061ec <_free_r>
 8006770:	4625      	mov	r5, r4
 8006772:	4628      	mov	r0, r5
 8006774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006778:	f000 fc6a 	bl	8007050 <_malloc_usable_size_r>
 800677c:	4284      	cmp	r4, r0
 800677e:	4607      	mov	r7, r0
 8006780:	d802      	bhi.n	8006788 <_realloc_r+0x34>
 8006782:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006786:	d812      	bhi.n	80067ae <_realloc_r+0x5a>
 8006788:	4621      	mov	r1, r4
 800678a:	4640      	mov	r0, r8
 800678c:	f7ff fd9a 	bl	80062c4 <_malloc_r>
 8006790:	4605      	mov	r5, r0
 8006792:	2800      	cmp	r0, #0
 8006794:	d0ed      	beq.n	8006772 <_realloc_r+0x1e>
 8006796:	42bc      	cmp	r4, r7
 8006798:	4622      	mov	r2, r4
 800679a:	4631      	mov	r1, r6
 800679c:	bf28      	it	cs
 800679e:	463a      	movcs	r2, r7
 80067a0:	f7ff f97c 	bl	8005a9c <memcpy>
 80067a4:	4631      	mov	r1, r6
 80067a6:	4640      	mov	r0, r8
 80067a8:	f7ff fd20 	bl	80061ec <_free_r>
 80067ac:	e7e1      	b.n	8006772 <_realloc_r+0x1e>
 80067ae:	4635      	mov	r5, r6
 80067b0:	e7df      	b.n	8006772 <_realloc_r+0x1e>

080067b2 <__sfputc_r>:
 80067b2:	6893      	ldr	r3, [r2, #8]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	b410      	push	{r4}
 80067ba:	6093      	str	r3, [r2, #8]
 80067bc:	da08      	bge.n	80067d0 <__sfputc_r+0x1e>
 80067be:	6994      	ldr	r4, [r2, #24]
 80067c0:	42a3      	cmp	r3, r4
 80067c2:	db01      	blt.n	80067c8 <__sfputc_r+0x16>
 80067c4:	290a      	cmp	r1, #10
 80067c6:	d103      	bne.n	80067d0 <__sfputc_r+0x1e>
 80067c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067cc:	f000 b94a 	b.w	8006a64 <__swbuf_r>
 80067d0:	6813      	ldr	r3, [r2, #0]
 80067d2:	1c58      	adds	r0, r3, #1
 80067d4:	6010      	str	r0, [r2, #0]
 80067d6:	7019      	strb	r1, [r3, #0]
 80067d8:	4608      	mov	r0, r1
 80067da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <__sfputs_r>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	4606      	mov	r6, r0
 80067e4:	460f      	mov	r7, r1
 80067e6:	4614      	mov	r4, r2
 80067e8:	18d5      	adds	r5, r2, r3
 80067ea:	42ac      	cmp	r4, r5
 80067ec:	d101      	bne.n	80067f2 <__sfputs_r+0x12>
 80067ee:	2000      	movs	r0, #0
 80067f0:	e007      	b.n	8006802 <__sfputs_r+0x22>
 80067f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f6:	463a      	mov	r2, r7
 80067f8:	4630      	mov	r0, r6
 80067fa:	f7ff ffda 	bl	80067b2 <__sfputc_r>
 80067fe:	1c43      	adds	r3, r0, #1
 8006800:	d1f3      	bne.n	80067ea <__sfputs_r+0xa>
 8006802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006804 <_vfiprintf_r>:
 8006804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006808:	460d      	mov	r5, r1
 800680a:	b09d      	sub	sp, #116	; 0x74
 800680c:	4614      	mov	r4, r2
 800680e:	4698      	mov	r8, r3
 8006810:	4606      	mov	r6, r0
 8006812:	b118      	cbz	r0, 800681c <_vfiprintf_r+0x18>
 8006814:	6983      	ldr	r3, [r0, #24]
 8006816:	b90b      	cbnz	r3, 800681c <_vfiprintf_r+0x18>
 8006818:	f000 fb14 	bl	8006e44 <__sinit>
 800681c:	4b89      	ldr	r3, [pc, #548]	; (8006a44 <_vfiprintf_r+0x240>)
 800681e:	429d      	cmp	r5, r3
 8006820:	d11b      	bne.n	800685a <_vfiprintf_r+0x56>
 8006822:	6875      	ldr	r5, [r6, #4]
 8006824:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006826:	07d9      	lsls	r1, r3, #31
 8006828:	d405      	bmi.n	8006836 <_vfiprintf_r+0x32>
 800682a:	89ab      	ldrh	r3, [r5, #12]
 800682c:	059a      	lsls	r2, r3, #22
 800682e:	d402      	bmi.n	8006836 <_vfiprintf_r+0x32>
 8006830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006832:	f000 fba5 	bl	8006f80 <__retarget_lock_acquire_recursive>
 8006836:	89ab      	ldrh	r3, [r5, #12]
 8006838:	071b      	lsls	r3, r3, #28
 800683a:	d501      	bpl.n	8006840 <_vfiprintf_r+0x3c>
 800683c:	692b      	ldr	r3, [r5, #16]
 800683e:	b9eb      	cbnz	r3, 800687c <_vfiprintf_r+0x78>
 8006840:	4629      	mov	r1, r5
 8006842:	4630      	mov	r0, r6
 8006844:	f000 f96e 	bl	8006b24 <__swsetup_r>
 8006848:	b1c0      	cbz	r0, 800687c <_vfiprintf_r+0x78>
 800684a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800684c:	07dc      	lsls	r4, r3, #31
 800684e:	d50e      	bpl.n	800686e <_vfiprintf_r+0x6a>
 8006850:	f04f 30ff 	mov.w	r0, #4294967295
 8006854:	b01d      	add	sp, #116	; 0x74
 8006856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800685a:	4b7b      	ldr	r3, [pc, #492]	; (8006a48 <_vfiprintf_r+0x244>)
 800685c:	429d      	cmp	r5, r3
 800685e:	d101      	bne.n	8006864 <_vfiprintf_r+0x60>
 8006860:	68b5      	ldr	r5, [r6, #8]
 8006862:	e7df      	b.n	8006824 <_vfiprintf_r+0x20>
 8006864:	4b79      	ldr	r3, [pc, #484]	; (8006a4c <_vfiprintf_r+0x248>)
 8006866:	429d      	cmp	r5, r3
 8006868:	bf08      	it	eq
 800686a:	68f5      	ldreq	r5, [r6, #12]
 800686c:	e7da      	b.n	8006824 <_vfiprintf_r+0x20>
 800686e:	89ab      	ldrh	r3, [r5, #12]
 8006870:	0598      	lsls	r0, r3, #22
 8006872:	d4ed      	bmi.n	8006850 <_vfiprintf_r+0x4c>
 8006874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006876:	f000 fb84 	bl	8006f82 <__retarget_lock_release_recursive>
 800687a:	e7e9      	b.n	8006850 <_vfiprintf_r+0x4c>
 800687c:	2300      	movs	r3, #0
 800687e:	9309      	str	r3, [sp, #36]	; 0x24
 8006880:	2320      	movs	r3, #32
 8006882:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006886:	f8cd 800c 	str.w	r8, [sp, #12]
 800688a:	2330      	movs	r3, #48	; 0x30
 800688c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006a50 <_vfiprintf_r+0x24c>
 8006890:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006894:	f04f 0901 	mov.w	r9, #1
 8006898:	4623      	mov	r3, r4
 800689a:	469a      	mov	sl, r3
 800689c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068a0:	b10a      	cbz	r2, 80068a6 <_vfiprintf_r+0xa2>
 80068a2:	2a25      	cmp	r2, #37	; 0x25
 80068a4:	d1f9      	bne.n	800689a <_vfiprintf_r+0x96>
 80068a6:	ebba 0b04 	subs.w	fp, sl, r4
 80068aa:	d00b      	beq.n	80068c4 <_vfiprintf_r+0xc0>
 80068ac:	465b      	mov	r3, fp
 80068ae:	4622      	mov	r2, r4
 80068b0:	4629      	mov	r1, r5
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7ff ff94 	bl	80067e0 <__sfputs_r>
 80068b8:	3001      	adds	r0, #1
 80068ba:	f000 80aa 	beq.w	8006a12 <_vfiprintf_r+0x20e>
 80068be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068c0:	445a      	add	r2, fp
 80068c2:	9209      	str	r2, [sp, #36]	; 0x24
 80068c4:	f89a 3000 	ldrb.w	r3, [sl]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 80a2 	beq.w	8006a12 <_vfiprintf_r+0x20e>
 80068ce:	2300      	movs	r3, #0
 80068d0:	f04f 32ff 	mov.w	r2, #4294967295
 80068d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068d8:	f10a 0a01 	add.w	sl, sl, #1
 80068dc:	9304      	str	r3, [sp, #16]
 80068de:	9307      	str	r3, [sp, #28]
 80068e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068e4:	931a      	str	r3, [sp, #104]	; 0x68
 80068e6:	4654      	mov	r4, sl
 80068e8:	2205      	movs	r2, #5
 80068ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ee:	4858      	ldr	r0, [pc, #352]	; (8006a50 <_vfiprintf_r+0x24c>)
 80068f0:	f7f9 fc76 	bl	80001e0 <memchr>
 80068f4:	9a04      	ldr	r2, [sp, #16]
 80068f6:	b9d8      	cbnz	r0, 8006930 <_vfiprintf_r+0x12c>
 80068f8:	06d1      	lsls	r1, r2, #27
 80068fa:	bf44      	itt	mi
 80068fc:	2320      	movmi	r3, #32
 80068fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006902:	0713      	lsls	r3, r2, #28
 8006904:	bf44      	itt	mi
 8006906:	232b      	movmi	r3, #43	; 0x2b
 8006908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800690c:	f89a 3000 	ldrb.w	r3, [sl]
 8006910:	2b2a      	cmp	r3, #42	; 0x2a
 8006912:	d015      	beq.n	8006940 <_vfiprintf_r+0x13c>
 8006914:	9a07      	ldr	r2, [sp, #28]
 8006916:	4654      	mov	r4, sl
 8006918:	2000      	movs	r0, #0
 800691a:	f04f 0c0a 	mov.w	ip, #10
 800691e:	4621      	mov	r1, r4
 8006920:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006924:	3b30      	subs	r3, #48	; 0x30
 8006926:	2b09      	cmp	r3, #9
 8006928:	d94e      	bls.n	80069c8 <_vfiprintf_r+0x1c4>
 800692a:	b1b0      	cbz	r0, 800695a <_vfiprintf_r+0x156>
 800692c:	9207      	str	r2, [sp, #28]
 800692e:	e014      	b.n	800695a <_vfiprintf_r+0x156>
 8006930:	eba0 0308 	sub.w	r3, r0, r8
 8006934:	fa09 f303 	lsl.w	r3, r9, r3
 8006938:	4313      	orrs	r3, r2
 800693a:	9304      	str	r3, [sp, #16]
 800693c:	46a2      	mov	sl, r4
 800693e:	e7d2      	b.n	80068e6 <_vfiprintf_r+0xe2>
 8006940:	9b03      	ldr	r3, [sp, #12]
 8006942:	1d19      	adds	r1, r3, #4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	9103      	str	r1, [sp, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	bfbb      	ittet	lt
 800694c:	425b      	neglt	r3, r3
 800694e:	f042 0202 	orrlt.w	r2, r2, #2
 8006952:	9307      	strge	r3, [sp, #28]
 8006954:	9307      	strlt	r3, [sp, #28]
 8006956:	bfb8      	it	lt
 8006958:	9204      	strlt	r2, [sp, #16]
 800695a:	7823      	ldrb	r3, [r4, #0]
 800695c:	2b2e      	cmp	r3, #46	; 0x2e
 800695e:	d10c      	bne.n	800697a <_vfiprintf_r+0x176>
 8006960:	7863      	ldrb	r3, [r4, #1]
 8006962:	2b2a      	cmp	r3, #42	; 0x2a
 8006964:	d135      	bne.n	80069d2 <_vfiprintf_r+0x1ce>
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	1d1a      	adds	r2, r3, #4
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	9203      	str	r2, [sp, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	bfb8      	it	lt
 8006972:	f04f 33ff 	movlt.w	r3, #4294967295
 8006976:	3402      	adds	r4, #2
 8006978:	9305      	str	r3, [sp, #20]
 800697a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006a60 <_vfiprintf_r+0x25c>
 800697e:	7821      	ldrb	r1, [r4, #0]
 8006980:	2203      	movs	r2, #3
 8006982:	4650      	mov	r0, sl
 8006984:	f7f9 fc2c 	bl	80001e0 <memchr>
 8006988:	b140      	cbz	r0, 800699c <_vfiprintf_r+0x198>
 800698a:	2340      	movs	r3, #64	; 0x40
 800698c:	eba0 000a 	sub.w	r0, r0, sl
 8006990:	fa03 f000 	lsl.w	r0, r3, r0
 8006994:	9b04      	ldr	r3, [sp, #16]
 8006996:	4303      	orrs	r3, r0
 8006998:	3401      	adds	r4, #1
 800699a:	9304      	str	r3, [sp, #16]
 800699c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a0:	482c      	ldr	r0, [pc, #176]	; (8006a54 <_vfiprintf_r+0x250>)
 80069a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069a6:	2206      	movs	r2, #6
 80069a8:	f7f9 fc1a 	bl	80001e0 <memchr>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d03f      	beq.n	8006a30 <_vfiprintf_r+0x22c>
 80069b0:	4b29      	ldr	r3, [pc, #164]	; (8006a58 <_vfiprintf_r+0x254>)
 80069b2:	bb1b      	cbnz	r3, 80069fc <_vfiprintf_r+0x1f8>
 80069b4:	9b03      	ldr	r3, [sp, #12]
 80069b6:	3307      	adds	r3, #7
 80069b8:	f023 0307 	bic.w	r3, r3, #7
 80069bc:	3308      	adds	r3, #8
 80069be:	9303      	str	r3, [sp, #12]
 80069c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c2:	443b      	add	r3, r7
 80069c4:	9309      	str	r3, [sp, #36]	; 0x24
 80069c6:	e767      	b.n	8006898 <_vfiprintf_r+0x94>
 80069c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80069cc:	460c      	mov	r4, r1
 80069ce:	2001      	movs	r0, #1
 80069d0:	e7a5      	b.n	800691e <_vfiprintf_r+0x11a>
 80069d2:	2300      	movs	r3, #0
 80069d4:	3401      	adds	r4, #1
 80069d6:	9305      	str	r3, [sp, #20]
 80069d8:	4619      	mov	r1, r3
 80069da:	f04f 0c0a 	mov.w	ip, #10
 80069de:	4620      	mov	r0, r4
 80069e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069e4:	3a30      	subs	r2, #48	; 0x30
 80069e6:	2a09      	cmp	r2, #9
 80069e8:	d903      	bls.n	80069f2 <_vfiprintf_r+0x1ee>
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0c5      	beq.n	800697a <_vfiprintf_r+0x176>
 80069ee:	9105      	str	r1, [sp, #20]
 80069f0:	e7c3      	b.n	800697a <_vfiprintf_r+0x176>
 80069f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80069f6:	4604      	mov	r4, r0
 80069f8:	2301      	movs	r3, #1
 80069fa:	e7f0      	b.n	80069de <_vfiprintf_r+0x1da>
 80069fc:	ab03      	add	r3, sp, #12
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	462a      	mov	r2, r5
 8006a02:	4b16      	ldr	r3, [pc, #88]	; (8006a5c <_vfiprintf_r+0x258>)
 8006a04:	a904      	add	r1, sp, #16
 8006a06:	4630      	mov	r0, r6
 8006a08:	f7fd fdd8 	bl	80045bc <_printf_float>
 8006a0c:	4607      	mov	r7, r0
 8006a0e:	1c78      	adds	r0, r7, #1
 8006a10:	d1d6      	bne.n	80069c0 <_vfiprintf_r+0x1bc>
 8006a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a14:	07d9      	lsls	r1, r3, #31
 8006a16:	d405      	bmi.n	8006a24 <_vfiprintf_r+0x220>
 8006a18:	89ab      	ldrh	r3, [r5, #12]
 8006a1a:	059a      	lsls	r2, r3, #22
 8006a1c:	d402      	bmi.n	8006a24 <_vfiprintf_r+0x220>
 8006a1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a20:	f000 faaf 	bl	8006f82 <__retarget_lock_release_recursive>
 8006a24:	89ab      	ldrh	r3, [r5, #12]
 8006a26:	065b      	lsls	r3, r3, #25
 8006a28:	f53f af12 	bmi.w	8006850 <_vfiprintf_r+0x4c>
 8006a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a2e:	e711      	b.n	8006854 <_vfiprintf_r+0x50>
 8006a30:	ab03      	add	r3, sp, #12
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	462a      	mov	r2, r5
 8006a36:	4b09      	ldr	r3, [pc, #36]	; (8006a5c <_vfiprintf_r+0x258>)
 8006a38:	a904      	add	r1, sp, #16
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	f7fe f862 	bl	8004b04 <_printf_i>
 8006a40:	e7e4      	b.n	8006a0c <_vfiprintf_r+0x208>
 8006a42:	bf00      	nop
 8006a44:	08007644 	.word	0x08007644
 8006a48:	08007664 	.word	0x08007664
 8006a4c:	08007624 	.word	0x08007624
 8006a50:	080074cc 	.word	0x080074cc
 8006a54:	080074d6 	.word	0x080074d6
 8006a58:	080045bd 	.word	0x080045bd
 8006a5c:	080067e1 	.word	0x080067e1
 8006a60:	080074d2 	.word	0x080074d2

08006a64 <__swbuf_r>:
 8006a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a66:	460e      	mov	r6, r1
 8006a68:	4614      	mov	r4, r2
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	b118      	cbz	r0, 8006a76 <__swbuf_r+0x12>
 8006a6e:	6983      	ldr	r3, [r0, #24]
 8006a70:	b90b      	cbnz	r3, 8006a76 <__swbuf_r+0x12>
 8006a72:	f000 f9e7 	bl	8006e44 <__sinit>
 8006a76:	4b21      	ldr	r3, [pc, #132]	; (8006afc <__swbuf_r+0x98>)
 8006a78:	429c      	cmp	r4, r3
 8006a7a:	d12b      	bne.n	8006ad4 <__swbuf_r+0x70>
 8006a7c:	686c      	ldr	r4, [r5, #4]
 8006a7e:	69a3      	ldr	r3, [r4, #24]
 8006a80:	60a3      	str	r3, [r4, #8]
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	071a      	lsls	r2, r3, #28
 8006a86:	d52f      	bpl.n	8006ae8 <__swbuf_r+0x84>
 8006a88:	6923      	ldr	r3, [r4, #16]
 8006a8a:	b36b      	cbz	r3, 8006ae8 <__swbuf_r+0x84>
 8006a8c:	6923      	ldr	r3, [r4, #16]
 8006a8e:	6820      	ldr	r0, [r4, #0]
 8006a90:	1ac0      	subs	r0, r0, r3
 8006a92:	6963      	ldr	r3, [r4, #20]
 8006a94:	b2f6      	uxtb	r6, r6
 8006a96:	4283      	cmp	r3, r0
 8006a98:	4637      	mov	r7, r6
 8006a9a:	dc04      	bgt.n	8006aa6 <__swbuf_r+0x42>
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 f93c 	bl	8006d1c <_fflush_r>
 8006aa4:	bb30      	cbnz	r0, 8006af4 <__swbuf_r+0x90>
 8006aa6:	68a3      	ldr	r3, [r4, #8]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	60a3      	str	r3, [r4, #8]
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	1c5a      	adds	r2, r3, #1
 8006ab0:	6022      	str	r2, [r4, #0]
 8006ab2:	701e      	strb	r6, [r3, #0]
 8006ab4:	6963      	ldr	r3, [r4, #20]
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	4283      	cmp	r3, r0
 8006aba:	d004      	beq.n	8006ac6 <__swbuf_r+0x62>
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	07db      	lsls	r3, r3, #31
 8006ac0:	d506      	bpl.n	8006ad0 <__swbuf_r+0x6c>
 8006ac2:	2e0a      	cmp	r6, #10
 8006ac4:	d104      	bne.n	8006ad0 <__swbuf_r+0x6c>
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 f927 	bl	8006d1c <_fflush_r>
 8006ace:	b988      	cbnz	r0, 8006af4 <__swbuf_r+0x90>
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ad4:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <__swbuf_r+0x9c>)
 8006ad6:	429c      	cmp	r4, r3
 8006ad8:	d101      	bne.n	8006ade <__swbuf_r+0x7a>
 8006ada:	68ac      	ldr	r4, [r5, #8]
 8006adc:	e7cf      	b.n	8006a7e <__swbuf_r+0x1a>
 8006ade:	4b09      	ldr	r3, [pc, #36]	; (8006b04 <__swbuf_r+0xa0>)
 8006ae0:	429c      	cmp	r4, r3
 8006ae2:	bf08      	it	eq
 8006ae4:	68ec      	ldreq	r4, [r5, #12]
 8006ae6:	e7ca      	b.n	8006a7e <__swbuf_r+0x1a>
 8006ae8:	4621      	mov	r1, r4
 8006aea:	4628      	mov	r0, r5
 8006aec:	f000 f81a 	bl	8006b24 <__swsetup_r>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d0cb      	beq.n	8006a8c <__swbuf_r+0x28>
 8006af4:	f04f 37ff 	mov.w	r7, #4294967295
 8006af8:	e7ea      	b.n	8006ad0 <__swbuf_r+0x6c>
 8006afa:	bf00      	nop
 8006afc:	08007644 	.word	0x08007644
 8006b00:	08007664 	.word	0x08007664
 8006b04:	08007624 	.word	0x08007624

08006b08 <__ascii_wctomb>:
 8006b08:	b149      	cbz	r1, 8006b1e <__ascii_wctomb+0x16>
 8006b0a:	2aff      	cmp	r2, #255	; 0xff
 8006b0c:	bf85      	ittet	hi
 8006b0e:	238a      	movhi	r3, #138	; 0x8a
 8006b10:	6003      	strhi	r3, [r0, #0]
 8006b12:	700a      	strbls	r2, [r1, #0]
 8006b14:	f04f 30ff 	movhi.w	r0, #4294967295
 8006b18:	bf98      	it	ls
 8006b1a:	2001      	movls	r0, #1
 8006b1c:	4770      	bx	lr
 8006b1e:	4608      	mov	r0, r1
 8006b20:	4770      	bx	lr
	...

08006b24 <__swsetup_r>:
 8006b24:	4b32      	ldr	r3, [pc, #200]	; (8006bf0 <__swsetup_r+0xcc>)
 8006b26:	b570      	push	{r4, r5, r6, lr}
 8006b28:	681d      	ldr	r5, [r3, #0]
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	460c      	mov	r4, r1
 8006b2e:	b125      	cbz	r5, 8006b3a <__swsetup_r+0x16>
 8006b30:	69ab      	ldr	r3, [r5, #24]
 8006b32:	b913      	cbnz	r3, 8006b3a <__swsetup_r+0x16>
 8006b34:	4628      	mov	r0, r5
 8006b36:	f000 f985 	bl	8006e44 <__sinit>
 8006b3a:	4b2e      	ldr	r3, [pc, #184]	; (8006bf4 <__swsetup_r+0xd0>)
 8006b3c:	429c      	cmp	r4, r3
 8006b3e:	d10f      	bne.n	8006b60 <__swsetup_r+0x3c>
 8006b40:	686c      	ldr	r4, [r5, #4]
 8006b42:	89a3      	ldrh	r3, [r4, #12]
 8006b44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b48:	0719      	lsls	r1, r3, #28
 8006b4a:	d42c      	bmi.n	8006ba6 <__swsetup_r+0x82>
 8006b4c:	06dd      	lsls	r5, r3, #27
 8006b4e:	d411      	bmi.n	8006b74 <__swsetup_r+0x50>
 8006b50:	2309      	movs	r3, #9
 8006b52:	6033      	str	r3, [r6, #0]
 8006b54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b58:	81a3      	strh	r3, [r4, #12]
 8006b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5e:	e03e      	b.n	8006bde <__swsetup_r+0xba>
 8006b60:	4b25      	ldr	r3, [pc, #148]	; (8006bf8 <__swsetup_r+0xd4>)
 8006b62:	429c      	cmp	r4, r3
 8006b64:	d101      	bne.n	8006b6a <__swsetup_r+0x46>
 8006b66:	68ac      	ldr	r4, [r5, #8]
 8006b68:	e7eb      	b.n	8006b42 <__swsetup_r+0x1e>
 8006b6a:	4b24      	ldr	r3, [pc, #144]	; (8006bfc <__swsetup_r+0xd8>)
 8006b6c:	429c      	cmp	r4, r3
 8006b6e:	bf08      	it	eq
 8006b70:	68ec      	ldreq	r4, [r5, #12]
 8006b72:	e7e6      	b.n	8006b42 <__swsetup_r+0x1e>
 8006b74:	0758      	lsls	r0, r3, #29
 8006b76:	d512      	bpl.n	8006b9e <__swsetup_r+0x7a>
 8006b78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b7a:	b141      	cbz	r1, 8006b8e <__swsetup_r+0x6a>
 8006b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b80:	4299      	cmp	r1, r3
 8006b82:	d002      	beq.n	8006b8a <__swsetup_r+0x66>
 8006b84:	4630      	mov	r0, r6
 8006b86:	f7ff fb31 	bl	80061ec <_free_r>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	6363      	str	r3, [r4, #52]	; 0x34
 8006b8e:	89a3      	ldrh	r3, [r4, #12]
 8006b90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b94:	81a3      	strh	r3, [r4, #12]
 8006b96:	2300      	movs	r3, #0
 8006b98:	6063      	str	r3, [r4, #4]
 8006b9a:	6923      	ldr	r3, [r4, #16]
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	f043 0308 	orr.w	r3, r3, #8
 8006ba4:	81a3      	strh	r3, [r4, #12]
 8006ba6:	6923      	ldr	r3, [r4, #16]
 8006ba8:	b94b      	cbnz	r3, 8006bbe <__swsetup_r+0x9a>
 8006baa:	89a3      	ldrh	r3, [r4, #12]
 8006bac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bb4:	d003      	beq.n	8006bbe <__swsetup_r+0x9a>
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f000 fa09 	bl	8006fd0 <__smakebuf_r>
 8006bbe:	89a0      	ldrh	r0, [r4, #12]
 8006bc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bc4:	f010 0301 	ands.w	r3, r0, #1
 8006bc8:	d00a      	beq.n	8006be0 <__swsetup_r+0xbc>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60a3      	str	r3, [r4, #8]
 8006bce:	6963      	ldr	r3, [r4, #20]
 8006bd0:	425b      	negs	r3, r3
 8006bd2:	61a3      	str	r3, [r4, #24]
 8006bd4:	6923      	ldr	r3, [r4, #16]
 8006bd6:	b943      	cbnz	r3, 8006bea <__swsetup_r+0xc6>
 8006bd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006bdc:	d1ba      	bne.n	8006b54 <__swsetup_r+0x30>
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	0781      	lsls	r1, r0, #30
 8006be2:	bf58      	it	pl
 8006be4:	6963      	ldrpl	r3, [r4, #20]
 8006be6:	60a3      	str	r3, [r4, #8]
 8006be8:	e7f4      	b.n	8006bd4 <__swsetup_r+0xb0>
 8006bea:	2000      	movs	r0, #0
 8006bec:	e7f7      	b.n	8006bde <__swsetup_r+0xba>
 8006bee:	bf00      	nop
 8006bf0:	20000010 	.word	0x20000010
 8006bf4:	08007644 	.word	0x08007644
 8006bf8:	08007664 	.word	0x08007664
 8006bfc:	08007624 	.word	0x08007624

08006c00 <abort>:
 8006c00:	b508      	push	{r3, lr}
 8006c02:	2006      	movs	r0, #6
 8006c04:	f000 fa54 	bl	80070b0 <raise>
 8006c08:	2001      	movs	r0, #1
 8006c0a:	f7fa fbdd 	bl	80013c8 <_exit>
	...

08006c10 <__sflush_r>:
 8006c10:	898a      	ldrh	r2, [r1, #12]
 8006c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c16:	4605      	mov	r5, r0
 8006c18:	0710      	lsls	r0, r2, #28
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	d458      	bmi.n	8006cd0 <__sflush_r+0xc0>
 8006c1e:	684b      	ldr	r3, [r1, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	dc05      	bgt.n	8006c30 <__sflush_r+0x20>
 8006c24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	dc02      	bgt.n	8006c30 <__sflush_r+0x20>
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c32:	2e00      	cmp	r6, #0
 8006c34:	d0f9      	beq.n	8006c2a <__sflush_r+0x1a>
 8006c36:	2300      	movs	r3, #0
 8006c38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c3c:	682f      	ldr	r7, [r5, #0]
 8006c3e:	602b      	str	r3, [r5, #0]
 8006c40:	d032      	beq.n	8006ca8 <__sflush_r+0x98>
 8006c42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	075a      	lsls	r2, r3, #29
 8006c48:	d505      	bpl.n	8006c56 <__sflush_r+0x46>
 8006c4a:	6863      	ldr	r3, [r4, #4]
 8006c4c:	1ac0      	subs	r0, r0, r3
 8006c4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c50:	b10b      	cbz	r3, 8006c56 <__sflush_r+0x46>
 8006c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c54:	1ac0      	subs	r0, r0, r3
 8006c56:	2300      	movs	r3, #0
 8006c58:	4602      	mov	r2, r0
 8006c5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c5c:	6a21      	ldr	r1, [r4, #32]
 8006c5e:	4628      	mov	r0, r5
 8006c60:	47b0      	blx	r6
 8006c62:	1c43      	adds	r3, r0, #1
 8006c64:	89a3      	ldrh	r3, [r4, #12]
 8006c66:	d106      	bne.n	8006c76 <__sflush_r+0x66>
 8006c68:	6829      	ldr	r1, [r5, #0]
 8006c6a:	291d      	cmp	r1, #29
 8006c6c:	d82c      	bhi.n	8006cc8 <__sflush_r+0xb8>
 8006c6e:	4a2a      	ldr	r2, [pc, #168]	; (8006d18 <__sflush_r+0x108>)
 8006c70:	40ca      	lsrs	r2, r1
 8006c72:	07d6      	lsls	r6, r2, #31
 8006c74:	d528      	bpl.n	8006cc8 <__sflush_r+0xb8>
 8006c76:	2200      	movs	r2, #0
 8006c78:	6062      	str	r2, [r4, #4]
 8006c7a:	04d9      	lsls	r1, r3, #19
 8006c7c:	6922      	ldr	r2, [r4, #16]
 8006c7e:	6022      	str	r2, [r4, #0]
 8006c80:	d504      	bpl.n	8006c8c <__sflush_r+0x7c>
 8006c82:	1c42      	adds	r2, r0, #1
 8006c84:	d101      	bne.n	8006c8a <__sflush_r+0x7a>
 8006c86:	682b      	ldr	r3, [r5, #0]
 8006c88:	b903      	cbnz	r3, 8006c8c <__sflush_r+0x7c>
 8006c8a:	6560      	str	r0, [r4, #84]	; 0x54
 8006c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c8e:	602f      	str	r7, [r5, #0]
 8006c90:	2900      	cmp	r1, #0
 8006c92:	d0ca      	beq.n	8006c2a <__sflush_r+0x1a>
 8006c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c98:	4299      	cmp	r1, r3
 8006c9a:	d002      	beq.n	8006ca2 <__sflush_r+0x92>
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f7ff faa5 	bl	80061ec <_free_r>
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	6360      	str	r0, [r4, #52]	; 0x34
 8006ca6:	e7c1      	b.n	8006c2c <__sflush_r+0x1c>
 8006ca8:	6a21      	ldr	r1, [r4, #32]
 8006caa:	2301      	movs	r3, #1
 8006cac:	4628      	mov	r0, r5
 8006cae:	47b0      	blx	r6
 8006cb0:	1c41      	adds	r1, r0, #1
 8006cb2:	d1c7      	bne.n	8006c44 <__sflush_r+0x34>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0c4      	beq.n	8006c44 <__sflush_r+0x34>
 8006cba:	2b1d      	cmp	r3, #29
 8006cbc:	d001      	beq.n	8006cc2 <__sflush_r+0xb2>
 8006cbe:	2b16      	cmp	r3, #22
 8006cc0:	d101      	bne.n	8006cc6 <__sflush_r+0xb6>
 8006cc2:	602f      	str	r7, [r5, #0]
 8006cc4:	e7b1      	b.n	8006c2a <__sflush_r+0x1a>
 8006cc6:	89a3      	ldrh	r3, [r4, #12]
 8006cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ccc:	81a3      	strh	r3, [r4, #12]
 8006cce:	e7ad      	b.n	8006c2c <__sflush_r+0x1c>
 8006cd0:	690f      	ldr	r7, [r1, #16]
 8006cd2:	2f00      	cmp	r7, #0
 8006cd4:	d0a9      	beq.n	8006c2a <__sflush_r+0x1a>
 8006cd6:	0793      	lsls	r3, r2, #30
 8006cd8:	680e      	ldr	r6, [r1, #0]
 8006cda:	bf08      	it	eq
 8006cdc:	694b      	ldreq	r3, [r1, #20]
 8006cde:	600f      	str	r7, [r1, #0]
 8006ce0:	bf18      	it	ne
 8006ce2:	2300      	movne	r3, #0
 8006ce4:	eba6 0807 	sub.w	r8, r6, r7
 8006ce8:	608b      	str	r3, [r1, #8]
 8006cea:	f1b8 0f00 	cmp.w	r8, #0
 8006cee:	dd9c      	ble.n	8006c2a <__sflush_r+0x1a>
 8006cf0:	6a21      	ldr	r1, [r4, #32]
 8006cf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006cf4:	4643      	mov	r3, r8
 8006cf6:	463a      	mov	r2, r7
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	47b0      	blx	r6
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	dc06      	bgt.n	8006d0e <__sflush_r+0xfe>
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d06:	81a3      	strh	r3, [r4, #12]
 8006d08:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0c:	e78e      	b.n	8006c2c <__sflush_r+0x1c>
 8006d0e:	4407      	add	r7, r0
 8006d10:	eba8 0800 	sub.w	r8, r8, r0
 8006d14:	e7e9      	b.n	8006cea <__sflush_r+0xda>
 8006d16:	bf00      	nop
 8006d18:	20400001 	.word	0x20400001

08006d1c <_fflush_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	690b      	ldr	r3, [r1, #16]
 8006d20:	4605      	mov	r5, r0
 8006d22:	460c      	mov	r4, r1
 8006d24:	b913      	cbnz	r3, 8006d2c <_fflush_r+0x10>
 8006d26:	2500      	movs	r5, #0
 8006d28:	4628      	mov	r0, r5
 8006d2a:	bd38      	pop	{r3, r4, r5, pc}
 8006d2c:	b118      	cbz	r0, 8006d36 <_fflush_r+0x1a>
 8006d2e:	6983      	ldr	r3, [r0, #24]
 8006d30:	b90b      	cbnz	r3, 8006d36 <_fflush_r+0x1a>
 8006d32:	f000 f887 	bl	8006e44 <__sinit>
 8006d36:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <_fflush_r+0x6c>)
 8006d38:	429c      	cmp	r4, r3
 8006d3a:	d11b      	bne.n	8006d74 <_fflush_r+0x58>
 8006d3c:	686c      	ldr	r4, [r5, #4]
 8006d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0ef      	beq.n	8006d26 <_fflush_r+0xa>
 8006d46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d48:	07d0      	lsls	r0, r2, #31
 8006d4a:	d404      	bmi.n	8006d56 <_fflush_r+0x3a>
 8006d4c:	0599      	lsls	r1, r3, #22
 8006d4e:	d402      	bmi.n	8006d56 <_fflush_r+0x3a>
 8006d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d52:	f000 f915 	bl	8006f80 <__retarget_lock_acquire_recursive>
 8006d56:	4628      	mov	r0, r5
 8006d58:	4621      	mov	r1, r4
 8006d5a:	f7ff ff59 	bl	8006c10 <__sflush_r>
 8006d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d60:	07da      	lsls	r2, r3, #31
 8006d62:	4605      	mov	r5, r0
 8006d64:	d4e0      	bmi.n	8006d28 <_fflush_r+0xc>
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	059b      	lsls	r3, r3, #22
 8006d6a:	d4dd      	bmi.n	8006d28 <_fflush_r+0xc>
 8006d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d6e:	f000 f908 	bl	8006f82 <__retarget_lock_release_recursive>
 8006d72:	e7d9      	b.n	8006d28 <_fflush_r+0xc>
 8006d74:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <_fflush_r+0x70>)
 8006d76:	429c      	cmp	r4, r3
 8006d78:	d101      	bne.n	8006d7e <_fflush_r+0x62>
 8006d7a:	68ac      	ldr	r4, [r5, #8]
 8006d7c:	e7df      	b.n	8006d3e <_fflush_r+0x22>
 8006d7e:	4b04      	ldr	r3, [pc, #16]	; (8006d90 <_fflush_r+0x74>)
 8006d80:	429c      	cmp	r4, r3
 8006d82:	bf08      	it	eq
 8006d84:	68ec      	ldreq	r4, [r5, #12]
 8006d86:	e7da      	b.n	8006d3e <_fflush_r+0x22>
 8006d88:	08007644 	.word	0x08007644
 8006d8c:	08007664 	.word	0x08007664
 8006d90:	08007624 	.word	0x08007624

08006d94 <std>:
 8006d94:	2300      	movs	r3, #0
 8006d96:	b510      	push	{r4, lr}
 8006d98:	4604      	mov	r4, r0
 8006d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006da2:	6083      	str	r3, [r0, #8]
 8006da4:	8181      	strh	r1, [r0, #12]
 8006da6:	6643      	str	r3, [r0, #100]	; 0x64
 8006da8:	81c2      	strh	r2, [r0, #14]
 8006daa:	6183      	str	r3, [r0, #24]
 8006dac:	4619      	mov	r1, r3
 8006dae:	2208      	movs	r2, #8
 8006db0:	305c      	adds	r0, #92	; 0x5c
 8006db2:	f7fd fb5b 	bl	800446c <memset>
 8006db6:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <std+0x38>)
 8006db8:	6263      	str	r3, [r4, #36]	; 0x24
 8006dba:	4b05      	ldr	r3, [pc, #20]	; (8006dd0 <std+0x3c>)
 8006dbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006dbe:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <std+0x40>)
 8006dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006dc2:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <std+0x44>)
 8006dc4:	6224      	str	r4, [r4, #32]
 8006dc6:	6323      	str	r3, [r4, #48]	; 0x30
 8006dc8:	bd10      	pop	{r4, pc}
 8006dca:	bf00      	nop
 8006dcc:	080070e9 	.word	0x080070e9
 8006dd0:	0800710b 	.word	0x0800710b
 8006dd4:	08007143 	.word	0x08007143
 8006dd8:	08007167 	.word	0x08007167

08006ddc <_cleanup_r>:
 8006ddc:	4901      	ldr	r1, [pc, #4]	; (8006de4 <_cleanup_r+0x8>)
 8006dde:	f000 b8af 	b.w	8006f40 <_fwalk_reent>
 8006de2:	bf00      	nop
 8006de4:	08006d1d 	.word	0x08006d1d

08006de8 <__sfmoreglue>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	2268      	movs	r2, #104	; 0x68
 8006dec:	1e4d      	subs	r5, r1, #1
 8006dee:	4355      	muls	r5, r2
 8006df0:	460e      	mov	r6, r1
 8006df2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006df6:	f7ff fa65 	bl	80062c4 <_malloc_r>
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	b140      	cbz	r0, 8006e10 <__sfmoreglue+0x28>
 8006dfe:	2100      	movs	r1, #0
 8006e00:	e9c0 1600 	strd	r1, r6, [r0]
 8006e04:	300c      	adds	r0, #12
 8006e06:	60a0      	str	r0, [r4, #8]
 8006e08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e0c:	f7fd fb2e 	bl	800446c <memset>
 8006e10:	4620      	mov	r0, r4
 8006e12:	bd70      	pop	{r4, r5, r6, pc}

08006e14 <__sfp_lock_acquire>:
 8006e14:	4801      	ldr	r0, [pc, #4]	; (8006e1c <__sfp_lock_acquire+0x8>)
 8006e16:	f000 b8b3 	b.w	8006f80 <__retarget_lock_acquire_recursive>
 8006e1a:	bf00      	nop
 8006e1c:	200003b1 	.word	0x200003b1

08006e20 <__sfp_lock_release>:
 8006e20:	4801      	ldr	r0, [pc, #4]	; (8006e28 <__sfp_lock_release+0x8>)
 8006e22:	f000 b8ae 	b.w	8006f82 <__retarget_lock_release_recursive>
 8006e26:	bf00      	nop
 8006e28:	200003b1 	.word	0x200003b1

08006e2c <__sinit_lock_acquire>:
 8006e2c:	4801      	ldr	r0, [pc, #4]	; (8006e34 <__sinit_lock_acquire+0x8>)
 8006e2e:	f000 b8a7 	b.w	8006f80 <__retarget_lock_acquire_recursive>
 8006e32:	bf00      	nop
 8006e34:	200003b2 	.word	0x200003b2

08006e38 <__sinit_lock_release>:
 8006e38:	4801      	ldr	r0, [pc, #4]	; (8006e40 <__sinit_lock_release+0x8>)
 8006e3a:	f000 b8a2 	b.w	8006f82 <__retarget_lock_release_recursive>
 8006e3e:	bf00      	nop
 8006e40:	200003b2 	.word	0x200003b2

08006e44 <__sinit>:
 8006e44:	b510      	push	{r4, lr}
 8006e46:	4604      	mov	r4, r0
 8006e48:	f7ff fff0 	bl	8006e2c <__sinit_lock_acquire>
 8006e4c:	69a3      	ldr	r3, [r4, #24]
 8006e4e:	b11b      	cbz	r3, 8006e58 <__sinit+0x14>
 8006e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e54:	f7ff bff0 	b.w	8006e38 <__sinit_lock_release>
 8006e58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e5c:	6523      	str	r3, [r4, #80]	; 0x50
 8006e5e:	4b13      	ldr	r3, [pc, #76]	; (8006eac <__sinit+0x68>)
 8006e60:	4a13      	ldr	r2, [pc, #76]	; (8006eb0 <__sinit+0x6c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e66:	42a3      	cmp	r3, r4
 8006e68:	bf04      	itt	eq
 8006e6a:	2301      	moveq	r3, #1
 8006e6c:	61a3      	streq	r3, [r4, #24]
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f000 f820 	bl	8006eb4 <__sfp>
 8006e74:	6060      	str	r0, [r4, #4]
 8006e76:	4620      	mov	r0, r4
 8006e78:	f000 f81c 	bl	8006eb4 <__sfp>
 8006e7c:	60a0      	str	r0, [r4, #8]
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f000 f818 	bl	8006eb4 <__sfp>
 8006e84:	2200      	movs	r2, #0
 8006e86:	60e0      	str	r0, [r4, #12]
 8006e88:	2104      	movs	r1, #4
 8006e8a:	6860      	ldr	r0, [r4, #4]
 8006e8c:	f7ff ff82 	bl	8006d94 <std>
 8006e90:	68a0      	ldr	r0, [r4, #8]
 8006e92:	2201      	movs	r2, #1
 8006e94:	2109      	movs	r1, #9
 8006e96:	f7ff ff7d 	bl	8006d94 <std>
 8006e9a:	68e0      	ldr	r0, [r4, #12]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	2112      	movs	r1, #18
 8006ea0:	f7ff ff78 	bl	8006d94 <std>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	61a3      	str	r3, [r4, #24]
 8006ea8:	e7d2      	b.n	8006e50 <__sinit+0xc>
 8006eaa:	bf00      	nop
 8006eac:	080072ac 	.word	0x080072ac
 8006eb0:	08006ddd 	.word	0x08006ddd

08006eb4 <__sfp>:
 8006eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb6:	4607      	mov	r7, r0
 8006eb8:	f7ff ffac 	bl	8006e14 <__sfp_lock_acquire>
 8006ebc:	4b1e      	ldr	r3, [pc, #120]	; (8006f38 <__sfp+0x84>)
 8006ebe:	681e      	ldr	r6, [r3, #0]
 8006ec0:	69b3      	ldr	r3, [r6, #24]
 8006ec2:	b913      	cbnz	r3, 8006eca <__sfp+0x16>
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f7ff ffbd 	bl	8006e44 <__sinit>
 8006eca:	3648      	adds	r6, #72	; 0x48
 8006ecc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	d503      	bpl.n	8006edc <__sfp+0x28>
 8006ed4:	6833      	ldr	r3, [r6, #0]
 8006ed6:	b30b      	cbz	r3, 8006f1c <__sfp+0x68>
 8006ed8:	6836      	ldr	r6, [r6, #0]
 8006eda:	e7f7      	b.n	8006ecc <__sfp+0x18>
 8006edc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ee0:	b9d5      	cbnz	r5, 8006f18 <__sfp+0x64>
 8006ee2:	4b16      	ldr	r3, [pc, #88]	; (8006f3c <__sfp+0x88>)
 8006ee4:	60e3      	str	r3, [r4, #12]
 8006ee6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006eea:	6665      	str	r5, [r4, #100]	; 0x64
 8006eec:	f000 f847 	bl	8006f7e <__retarget_lock_init_recursive>
 8006ef0:	f7ff ff96 	bl	8006e20 <__sfp_lock_release>
 8006ef4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ef8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006efc:	6025      	str	r5, [r4, #0]
 8006efe:	61a5      	str	r5, [r4, #24]
 8006f00:	2208      	movs	r2, #8
 8006f02:	4629      	mov	r1, r5
 8006f04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f08:	f7fd fab0 	bl	800446c <memset>
 8006f0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f14:	4620      	mov	r0, r4
 8006f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f18:	3468      	adds	r4, #104	; 0x68
 8006f1a:	e7d9      	b.n	8006ed0 <__sfp+0x1c>
 8006f1c:	2104      	movs	r1, #4
 8006f1e:	4638      	mov	r0, r7
 8006f20:	f7ff ff62 	bl	8006de8 <__sfmoreglue>
 8006f24:	4604      	mov	r4, r0
 8006f26:	6030      	str	r0, [r6, #0]
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d1d5      	bne.n	8006ed8 <__sfp+0x24>
 8006f2c:	f7ff ff78 	bl	8006e20 <__sfp_lock_release>
 8006f30:	230c      	movs	r3, #12
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	e7ee      	b.n	8006f14 <__sfp+0x60>
 8006f36:	bf00      	nop
 8006f38:	080072ac 	.word	0x080072ac
 8006f3c:	ffff0001 	.word	0xffff0001

08006f40 <_fwalk_reent>:
 8006f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f44:	4606      	mov	r6, r0
 8006f46:	4688      	mov	r8, r1
 8006f48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f4c:	2700      	movs	r7, #0
 8006f4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f52:	f1b9 0901 	subs.w	r9, r9, #1
 8006f56:	d505      	bpl.n	8006f64 <_fwalk_reent+0x24>
 8006f58:	6824      	ldr	r4, [r4, #0]
 8006f5a:	2c00      	cmp	r4, #0
 8006f5c:	d1f7      	bne.n	8006f4e <_fwalk_reent+0xe>
 8006f5e:	4638      	mov	r0, r7
 8006f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f64:	89ab      	ldrh	r3, [r5, #12]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d907      	bls.n	8006f7a <_fwalk_reent+0x3a>
 8006f6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	d003      	beq.n	8006f7a <_fwalk_reent+0x3a>
 8006f72:	4629      	mov	r1, r5
 8006f74:	4630      	mov	r0, r6
 8006f76:	47c0      	blx	r8
 8006f78:	4307      	orrs	r7, r0
 8006f7a:	3568      	adds	r5, #104	; 0x68
 8006f7c:	e7e9      	b.n	8006f52 <_fwalk_reent+0x12>

08006f7e <__retarget_lock_init_recursive>:
 8006f7e:	4770      	bx	lr

08006f80 <__retarget_lock_acquire_recursive>:
 8006f80:	4770      	bx	lr

08006f82 <__retarget_lock_release_recursive>:
 8006f82:	4770      	bx	lr

08006f84 <__swhatbuf_r>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	460e      	mov	r6, r1
 8006f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8c:	2900      	cmp	r1, #0
 8006f8e:	b096      	sub	sp, #88	; 0x58
 8006f90:	4614      	mov	r4, r2
 8006f92:	461d      	mov	r5, r3
 8006f94:	da08      	bge.n	8006fa8 <__swhatbuf_r+0x24>
 8006f96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	602a      	str	r2, [r5, #0]
 8006f9e:	061a      	lsls	r2, r3, #24
 8006fa0:	d410      	bmi.n	8006fc4 <__swhatbuf_r+0x40>
 8006fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fa6:	e00e      	b.n	8006fc6 <__swhatbuf_r+0x42>
 8006fa8:	466a      	mov	r2, sp
 8006faa:	f000 f903 	bl	80071b4 <_fstat_r>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	dbf1      	blt.n	8006f96 <__swhatbuf_r+0x12>
 8006fb2:	9a01      	ldr	r2, [sp, #4]
 8006fb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006fbc:	425a      	negs	r2, r3
 8006fbe:	415a      	adcs	r2, r3
 8006fc0:	602a      	str	r2, [r5, #0]
 8006fc2:	e7ee      	b.n	8006fa2 <__swhatbuf_r+0x1e>
 8006fc4:	2340      	movs	r3, #64	; 0x40
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	b016      	add	sp, #88	; 0x58
 8006fcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006fd0 <__smakebuf_r>:
 8006fd0:	898b      	ldrh	r3, [r1, #12]
 8006fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fd4:	079d      	lsls	r5, r3, #30
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	460c      	mov	r4, r1
 8006fda:	d507      	bpl.n	8006fec <__smakebuf_r+0x1c>
 8006fdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	6123      	str	r3, [r4, #16]
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	6163      	str	r3, [r4, #20]
 8006fe8:	b002      	add	sp, #8
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	ab01      	add	r3, sp, #4
 8006fee:	466a      	mov	r2, sp
 8006ff0:	f7ff ffc8 	bl	8006f84 <__swhatbuf_r>
 8006ff4:	9900      	ldr	r1, [sp, #0]
 8006ff6:	4605      	mov	r5, r0
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f7ff f963 	bl	80062c4 <_malloc_r>
 8006ffe:	b948      	cbnz	r0, 8007014 <__smakebuf_r+0x44>
 8007000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007004:	059a      	lsls	r2, r3, #22
 8007006:	d4ef      	bmi.n	8006fe8 <__smakebuf_r+0x18>
 8007008:	f023 0303 	bic.w	r3, r3, #3
 800700c:	f043 0302 	orr.w	r3, r3, #2
 8007010:	81a3      	strh	r3, [r4, #12]
 8007012:	e7e3      	b.n	8006fdc <__smakebuf_r+0xc>
 8007014:	4b0d      	ldr	r3, [pc, #52]	; (800704c <__smakebuf_r+0x7c>)
 8007016:	62b3      	str	r3, [r6, #40]	; 0x28
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	6020      	str	r0, [r4, #0]
 800701c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	9b00      	ldr	r3, [sp, #0]
 8007024:	6163      	str	r3, [r4, #20]
 8007026:	9b01      	ldr	r3, [sp, #4]
 8007028:	6120      	str	r0, [r4, #16]
 800702a:	b15b      	cbz	r3, 8007044 <__smakebuf_r+0x74>
 800702c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007030:	4630      	mov	r0, r6
 8007032:	f000 f8d1 	bl	80071d8 <_isatty_r>
 8007036:	b128      	cbz	r0, 8007044 <__smakebuf_r+0x74>
 8007038:	89a3      	ldrh	r3, [r4, #12]
 800703a:	f023 0303 	bic.w	r3, r3, #3
 800703e:	f043 0301 	orr.w	r3, r3, #1
 8007042:	81a3      	strh	r3, [r4, #12]
 8007044:	89a0      	ldrh	r0, [r4, #12]
 8007046:	4305      	orrs	r5, r0
 8007048:	81a5      	strh	r5, [r4, #12]
 800704a:	e7cd      	b.n	8006fe8 <__smakebuf_r+0x18>
 800704c:	08006ddd 	.word	0x08006ddd

08007050 <_malloc_usable_size_r>:
 8007050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007054:	1f18      	subs	r0, r3, #4
 8007056:	2b00      	cmp	r3, #0
 8007058:	bfbc      	itt	lt
 800705a:	580b      	ldrlt	r3, [r1, r0]
 800705c:	18c0      	addlt	r0, r0, r3
 800705e:	4770      	bx	lr

08007060 <_raise_r>:
 8007060:	291f      	cmp	r1, #31
 8007062:	b538      	push	{r3, r4, r5, lr}
 8007064:	4604      	mov	r4, r0
 8007066:	460d      	mov	r5, r1
 8007068:	d904      	bls.n	8007074 <_raise_r+0x14>
 800706a:	2316      	movs	r3, #22
 800706c:	6003      	str	r3, [r0, #0]
 800706e:	f04f 30ff 	mov.w	r0, #4294967295
 8007072:	bd38      	pop	{r3, r4, r5, pc}
 8007074:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007076:	b112      	cbz	r2, 800707e <_raise_r+0x1e>
 8007078:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800707c:	b94b      	cbnz	r3, 8007092 <_raise_r+0x32>
 800707e:	4620      	mov	r0, r4
 8007080:	f000 f830 	bl	80070e4 <_getpid_r>
 8007084:	462a      	mov	r2, r5
 8007086:	4601      	mov	r1, r0
 8007088:	4620      	mov	r0, r4
 800708a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800708e:	f000 b817 	b.w	80070c0 <_kill_r>
 8007092:	2b01      	cmp	r3, #1
 8007094:	d00a      	beq.n	80070ac <_raise_r+0x4c>
 8007096:	1c59      	adds	r1, r3, #1
 8007098:	d103      	bne.n	80070a2 <_raise_r+0x42>
 800709a:	2316      	movs	r3, #22
 800709c:	6003      	str	r3, [r0, #0]
 800709e:	2001      	movs	r0, #1
 80070a0:	e7e7      	b.n	8007072 <_raise_r+0x12>
 80070a2:	2400      	movs	r4, #0
 80070a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80070a8:	4628      	mov	r0, r5
 80070aa:	4798      	blx	r3
 80070ac:	2000      	movs	r0, #0
 80070ae:	e7e0      	b.n	8007072 <_raise_r+0x12>

080070b0 <raise>:
 80070b0:	4b02      	ldr	r3, [pc, #8]	; (80070bc <raise+0xc>)
 80070b2:	4601      	mov	r1, r0
 80070b4:	6818      	ldr	r0, [r3, #0]
 80070b6:	f7ff bfd3 	b.w	8007060 <_raise_r>
 80070ba:	bf00      	nop
 80070bc:	20000010 	.word	0x20000010

080070c0 <_kill_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	4d07      	ldr	r5, [pc, #28]	; (80070e0 <_kill_r+0x20>)
 80070c4:	2300      	movs	r3, #0
 80070c6:	4604      	mov	r4, r0
 80070c8:	4608      	mov	r0, r1
 80070ca:	4611      	mov	r1, r2
 80070cc:	602b      	str	r3, [r5, #0]
 80070ce:	f7fa f96b 	bl	80013a8 <_kill>
 80070d2:	1c43      	adds	r3, r0, #1
 80070d4:	d102      	bne.n	80070dc <_kill_r+0x1c>
 80070d6:	682b      	ldr	r3, [r5, #0]
 80070d8:	b103      	cbz	r3, 80070dc <_kill_r+0x1c>
 80070da:	6023      	str	r3, [r4, #0]
 80070dc:	bd38      	pop	{r3, r4, r5, pc}
 80070de:	bf00      	nop
 80070e0:	200003ac 	.word	0x200003ac

080070e4 <_getpid_r>:
 80070e4:	f7fa b958 	b.w	8001398 <_getpid>

080070e8 <__sread>:
 80070e8:	b510      	push	{r4, lr}
 80070ea:	460c      	mov	r4, r1
 80070ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f0:	f000 f894 	bl	800721c <_read_r>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	bfab      	itete	ge
 80070f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070fa:	89a3      	ldrhlt	r3, [r4, #12]
 80070fc:	181b      	addge	r3, r3, r0
 80070fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007102:	bfac      	ite	ge
 8007104:	6563      	strge	r3, [r4, #84]	; 0x54
 8007106:	81a3      	strhlt	r3, [r4, #12]
 8007108:	bd10      	pop	{r4, pc}

0800710a <__swrite>:
 800710a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800710e:	461f      	mov	r7, r3
 8007110:	898b      	ldrh	r3, [r1, #12]
 8007112:	05db      	lsls	r3, r3, #23
 8007114:	4605      	mov	r5, r0
 8007116:	460c      	mov	r4, r1
 8007118:	4616      	mov	r6, r2
 800711a:	d505      	bpl.n	8007128 <__swrite+0x1e>
 800711c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007120:	2302      	movs	r3, #2
 8007122:	2200      	movs	r2, #0
 8007124:	f000 f868 	bl	80071f8 <_lseek_r>
 8007128:	89a3      	ldrh	r3, [r4, #12]
 800712a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800712e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007132:	81a3      	strh	r3, [r4, #12]
 8007134:	4632      	mov	r2, r6
 8007136:	463b      	mov	r3, r7
 8007138:	4628      	mov	r0, r5
 800713a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800713e:	f000 b817 	b.w	8007170 <_write_r>

08007142 <__sseek>:
 8007142:	b510      	push	{r4, lr}
 8007144:	460c      	mov	r4, r1
 8007146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800714a:	f000 f855 	bl	80071f8 <_lseek_r>
 800714e:	1c43      	adds	r3, r0, #1
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	bf15      	itete	ne
 8007154:	6560      	strne	r0, [r4, #84]	; 0x54
 8007156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800715a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800715e:	81a3      	strheq	r3, [r4, #12]
 8007160:	bf18      	it	ne
 8007162:	81a3      	strhne	r3, [r4, #12]
 8007164:	bd10      	pop	{r4, pc}

08007166 <__sclose>:
 8007166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800716a:	f000 b813 	b.w	8007194 <_close_r>
	...

08007170 <_write_r>:
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	4d07      	ldr	r5, [pc, #28]	; (8007190 <_write_r+0x20>)
 8007174:	4604      	mov	r4, r0
 8007176:	4608      	mov	r0, r1
 8007178:	4611      	mov	r1, r2
 800717a:	2200      	movs	r2, #0
 800717c:	602a      	str	r2, [r5, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	f7fa f949 	bl	8001416 <_write>
 8007184:	1c43      	adds	r3, r0, #1
 8007186:	d102      	bne.n	800718e <_write_r+0x1e>
 8007188:	682b      	ldr	r3, [r5, #0]
 800718a:	b103      	cbz	r3, 800718e <_write_r+0x1e>
 800718c:	6023      	str	r3, [r4, #0]
 800718e:	bd38      	pop	{r3, r4, r5, pc}
 8007190:	200003ac 	.word	0x200003ac

08007194 <_close_r>:
 8007194:	b538      	push	{r3, r4, r5, lr}
 8007196:	4d06      	ldr	r5, [pc, #24]	; (80071b0 <_close_r+0x1c>)
 8007198:	2300      	movs	r3, #0
 800719a:	4604      	mov	r4, r0
 800719c:	4608      	mov	r0, r1
 800719e:	602b      	str	r3, [r5, #0]
 80071a0:	f7fa f955 	bl	800144e <_close>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d102      	bne.n	80071ae <_close_r+0x1a>
 80071a8:	682b      	ldr	r3, [r5, #0]
 80071aa:	b103      	cbz	r3, 80071ae <_close_r+0x1a>
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	bd38      	pop	{r3, r4, r5, pc}
 80071b0:	200003ac 	.word	0x200003ac

080071b4 <_fstat_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4d07      	ldr	r5, [pc, #28]	; (80071d4 <_fstat_r+0x20>)
 80071b8:	2300      	movs	r3, #0
 80071ba:	4604      	mov	r4, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	4611      	mov	r1, r2
 80071c0:	602b      	str	r3, [r5, #0]
 80071c2:	f7fa f950 	bl	8001466 <_fstat>
 80071c6:	1c43      	adds	r3, r0, #1
 80071c8:	d102      	bne.n	80071d0 <_fstat_r+0x1c>
 80071ca:	682b      	ldr	r3, [r5, #0]
 80071cc:	b103      	cbz	r3, 80071d0 <_fstat_r+0x1c>
 80071ce:	6023      	str	r3, [r4, #0]
 80071d0:	bd38      	pop	{r3, r4, r5, pc}
 80071d2:	bf00      	nop
 80071d4:	200003ac 	.word	0x200003ac

080071d8 <_isatty_r>:
 80071d8:	b538      	push	{r3, r4, r5, lr}
 80071da:	4d06      	ldr	r5, [pc, #24]	; (80071f4 <_isatty_r+0x1c>)
 80071dc:	2300      	movs	r3, #0
 80071de:	4604      	mov	r4, r0
 80071e0:	4608      	mov	r0, r1
 80071e2:	602b      	str	r3, [r5, #0]
 80071e4:	f7fa f94f 	bl	8001486 <_isatty>
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	d102      	bne.n	80071f2 <_isatty_r+0x1a>
 80071ec:	682b      	ldr	r3, [r5, #0]
 80071ee:	b103      	cbz	r3, 80071f2 <_isatty_r+0x1a>
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	bd38      	pop	{r3, r4, r5, pc}
 80071f4:	200003ac 	.word	0x200003ac

080071f8 <_lseek_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4d07      	ldr	r5, [pc, #28]	; (8007218 <_lseek_r+0x20>)
 80071fc:	4604      	mov	r4, r0
 80071fe:	4608      	mov	r0, r1
 8007200:	4611      	mov	r1, r2
 8007202:	2200      	movs	r2, #0
 8007204:	602a      	str	r2, [r5, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	f7fa f948 	bl	800149c <_lseek>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_lseek_r+0x1e>
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	b103      	cbz	r3, 8007216 <_lseek_r+0x1e>
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	200003ac 	.word	0x200003ac

0800721c <_read_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4d07      	ldr	r5, [pc, #28]	; (800723c <_read_r+0x20>)
 8007220:	4604      	mov	r4, r0
 8007222:	4608      	mov	r0, r1
 8007224:	4611      	mov	r1, r2
 8007226:	2200      	movs	r2, #0
 8007228:	602a      	str	r2, [r5, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	f7fa f8d6 	bl	80013dc <_read>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_read_r+0x1e>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_read_r+0x1e>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	200003ac 	.word	0x200003ac

08007240 <_init>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	bf00      	nop
 8007244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007246:	bc08      	pop	{r3}
 8007248:	469e      	mov	lr, r3
 800724a:	4770      	bx	lr

0800724c <_fini>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	bf00      	nop
 8007250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007252:	bc08      	pop	{r3}
 8007254:	469e      	mov	lr, r3
 8007256:	4770      	bx	lr
