
PTC_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000423c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080043dc  080043dc  000143dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800447c  0800447c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800447c  0800447c  0001447c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004484  08004484  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004484  08004484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004488  08004488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800448c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  080044fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080044fc  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d4f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b1  00000000  00000000  00028def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0002a5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000680  00000000  00000000  0002acb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c60  00000000  00000000  0002b338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000924e  00000000  00000000  00040f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085b84  00000000  00000000  0004a1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cfd6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020f8  00000000  00000000  000cfdbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080043c4 	.word	0x080043c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080043c4 	.word	0x080043c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b974 	b.w	8000dcc <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	468e      	mov	lr, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14d      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4694      	mov	ip, r2
 8000b0e:	d969      	bls.n	8000be4 <__udivmoddi4+0xe8>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b152      	cbz	r2, 8000b2c <__udivmoddi4+0x30>
 8000b16:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1a:	f1c2 0120 	rsb	r1, r2, #32
 8000b1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b26:	ea41 0e03 	orr.w	lr, r1, r3
 8000b2a:	4094      	lsls	r4, r2
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	0c21      	lsrs	r1, r4, #16
 8000b32:	fbbe f6f8 	udiv	r6, lr, r8
 8000b36:	fa1f f78c 	uxth.w	r7, ip
 8000b3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b42:	fb06 f107 	mul.w	r1, r6, r7
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b52:	f080 811f 	bcs.w	8000d94 <__udivmoddi4+0x298>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 811c 	bls.w	8000d94 <__udivmoddi4+0x298>
 8000b5c:	3e02      	subs	r6, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b68:	fb08 3310 	mls	r3, r8, r0, r3
 8000b6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b70:	fb00 f707 	mul.w	r7, r0, r7
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x92>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b80:	f080 810a 	bcs.w	8000d98 <__udivmoddi4+0x29c>
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	f240 8107 	bls.w	8000d98 <__udivmoddi4+0x29c>
 8000b8a:	4464      	add	r4, ip
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	1be4      	subs	r4, r4, r7
 8000b94:	2600      	movs	r6, #0
 8000b96:	b11d      	cbz	r5, 8000ba0 <__udivmoddi4+0xa4>
 8000b98:	40d4      	lsrs	r4, r2
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d909      	bls.n	8000bbe <__udivmoddi4+0xc2>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	f000 80ef 	beq.w	8000d8e <__udivmoddi4+0x292>
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	fab3 f683 	clz	r6, r3
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d14a      	bne.n	8000c5c <__udivmoddi4+0x160>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xd4>
 8000bca:	4282      	cmp	r2, r0
 8000bcc:	f200 80f9 	bhi.w	8000dc2 <__udivmoddi4+0x2c6>
 8000bd0:	1a84      	subs	r4, r0, r2
 8000bd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	469e      	mov	lr, r3
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d0e0      	beq.n	8000ba0 <__udivmoddi4+0xa4>
 8000bde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000be2:	e7dd      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000be4:	b902      	cbnz	r2, 8000be8 <__udivmoddi4+0xec>
 8000be6:	deff      	udf	#255	; 0xff
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	f040 8092 	bne.w	8000d16 <__udivmoddi4+0x21a>
 8000bf2:	eba1 010c 	sub.w	r1, r1, ip
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2601      	movs	r6, #1
 8000c00:	0c20      	lsrs	r0, r4, #16
 8000c02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c06:	fb07 1113 	mls	r1, r7, r3, r1
 8000c0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c0e:	fb0e f003 	mul.w	r0, lr, r3
 8000c12:	4288      	cmp	r0, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x12c>
 8000c16:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x12a>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2c0>
 8000c26:	4643      	mov	r3, r8
 8000c28:	1a09      	subs	r1, r1, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c30:	fb07 1110 	mls	r1, r7, r0, r1
 8000c34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x156>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x154>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2ca>
 8000c50:	4608      	mov	r0, r1
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c5a:	e79c      	b.n	8000b96 <__udivmoddi4+0x9a>
 8000c5c:	f1c6 0720 	rsb	r7, r6, #32
 8000c60:	40b3      	lsls	r3, r6
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c72:	431c      	orrs	r4, r3
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c82:	0c20      	lsrs	r0, r4, #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fb09 1118 	mls	r1, r9, r8, r1
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	fb08 f00e 	mul.w	r0, r8, lr
 8000c94:	4288      	cmp	r0, r1
 8000c96:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b8>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2bc>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2bc>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc8:	458e      	cmp	lr, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1e2>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2b4>
 8000cd6:	458e      	cmp	lr, r1
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2b4>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ce6:	eba1 010e 	sub.w	r1, r1, lr
 8000cea:	42a1      	cmp	r1, r4
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46a6      	mov	lr, r4
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x2a4>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x2a0>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x212>
 8000cf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000d02:	fa22 f306 	lsr.w	r3, r2, r6
 8000d06:	40f1      	lsrs	r1, r6
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	f1c2 0320 	rsb	r3, r2, #32
 8000d1a:	40d8      	lsrs	r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa21 f303 	lsr.w	r3, r1, r3
 8000d24:	4091      	lsls	r1, r2
 8000d26:	4301      	orrs	r1, r0
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d34:	fb07 3610 	mls	r6, r7, r0, r3
 8000d38:	0c0b      	lsrs	r3, r1, #16
 8000d3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d42:	429e      	cmp	r6, r3
 8000d44:	fa04 f402 	lsl.w	r4, r4, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x260>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b8>
 8000d54:	429e      	cmp	r6, r3
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b8>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	b289      	uxth	r1, r1
 8000d60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d64:	fb07 3316 	mls	r3, r7, r6, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x28a>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d82:	3e02      	subs	r6, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	1ac9      	subs	r1, r1, r3
 8000d88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0x104>
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e705      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e3      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6f8      	b.n	8000b8e <__udivmoddi4+0x92>
 8000d9c:	454b      	cmp	r3, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f8>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f8>
 8000dac:	4646      	mov	r6, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x28a>
 8000db0:	4620      	mov	r0, r4
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1e2>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x260>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b8>
 8000dbc:	3b02      	subs	r3, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x12c>
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	e709      	b.n	8000bda <__udivmoddi4+0xde>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x156>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <forward_back>:
#include <math.h>
#include <stdio.h>
#include <assert.h>

//Fonctions --------------------------------------------------------------------------------------
unsigned char * forward_back (float l,char wheel_1,char wheel_2){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af02      	add	r7, sp, #8
 8000dd6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dda:	4603      	mov	r3, r0
 8000ddc:	460a      	mov	r2, r1
 8000dde:	70fb      	strb	r3, [r7, #3]
 8000de0:	4613      	mov	r3, r2
 8000de2:	70bb      	strb	r3, [r7, #2]
	if (l <= 50) {
 8000de4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000de8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000e50 <forward_back+0x80>
 8000dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df4:	d827      	bhi.n	8000e46 <forward_back+0x76>
		int tick_value = (int)(l*690)/20;
 8000df6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dfa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000e54 <forward_back+0x84>
 8000dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e06:	ee17 1a90 	vmov	r1, s15
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <forward_back+0x88>)
 8000e0c:	fb83 2301 	smull	r2, r3, r3, r1
 8000e10:	10da      	asrs	r2, r3, #3
 8000e12:	17cb      	asrs	r3, r1, #31
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	60fb      	str	r3, [r7, #12]
		char *return_value =  NULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
		free(return_value);
 8000e1c:	68b8      	ldr	r0, [r7, #8]
 8000e1e:	f002 fe3f 	bl	8003aa0 <free>
		return_value = (char *) malloc( 24 * sizeof(char));
 8000e22:	2018      	movs	r0, #24
 8000e24:	f002 fe34 	bl	8003a90 <malloc>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60bb      	str	r3, [r7, #8]
		sprintf(return_value,"digo 1:%i:%c10 2:%i:%c10\r",tick_value,wheel_1,tick_value,wheel_2);
 8000e2c:	78fa      	ldrb	r2, [r7, #3]
 8000e2e:	78bb      	ldrb	r3, [r7, #2]
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	4613      	mov	r3, r2
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	4908      	ldr	r1, [pc, #32]	; (8000e5c <forward_back+0x8c>)
 8000e3c:	68b8      	ldr	r0, [r7, #8]
 8000e3e:	f002 ff2f 	bl	8003ca0 <siprintf>
		return return_value;
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	e000      	b.n	8000e48 <forward_back+0x78>
	}
	else {
		return ((unsigned char*)"none");
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <forward_back+0x90>)
	}
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	42480000 	.word	0x42480000
 8000e54:	442c8000 	.word	0x442c8000
 8000e58:	66666667 	.word	0x66666667
 8000e5c:	080043dc 	.word	0x080043dc
 8000e60:	080043f8 	.word	0x080043f8

08000e64 <cat_value>:

unsigned char * cat_value(unsigned char* first_value, unsigned char* second_value){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
	char *return_value =  NULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
	free(return_value);
 8000e72:	68f8      	ldr	r0, [r7, #12]
 8000e74:	f002 fe14 	bl	8003aa0 <free>
	return_value = (char *) malloc( 24 * sizeof(char));
 8000e78:	2018      	movs	r0, #24
 8000e7a:	f002 fe09 	bl	8003a90 <malloc>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	60fb      	str	r3, [r7, #12]
	sprintf(return_value,"%s/%s",first_value,second_value);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	4904      	ldr	r1, [pc, #16]	; (8000e98 <cat_value+0x34>)
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f002 ff09 	bl	8003ca0 <siprintf>
	return (unsigned char *)return_value;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	08004400 	.word	0x08004400
 8000e9c:	00000000 	.word	0x00000000

08000ea0 <turn_forward>:

unsigned char * turn_forward (int angle){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	float r = 12.25;
 8000ea8:	4b35      	ldr	r3, [pc, #212]	; (8000f80 <turn_forward+0xe0>)
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
	float distance = (M_PI*r)/2;
 8000eac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000eae:	f7ff fb53 	bl	8000558 <__aeabi_f2d>
 8000eb2:	a331      	add	r3, pc, #196	; (adr r3, 8000f78 <turn_forward+0xd8>)
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	f7ff fba6 	bl	8000608 <__aeabi_dmul>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ecc:	f7ff fcc6 	bl	800085c <__aeabi_ddiv>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f7ff fda8 	bl	8000a2c <__aeabi_d2f>
 8000edc:	4603      	mov	r3, r0
 8000ede:	623b      	str	r3, [r7, #32]
	if (angle < 0){ //tourner à gauche
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	da13      	bge.n	8000f0e <turn_forward+0x6e>
		unsigned char * first_value = forward_back(distance,' ','-');
 8000ee6:	212d      	movs	r1, #45	; 0x2d
 8000ee8:	2020      	movs	r0, #32
 8000eea:	ed97 0a08 	vldr	s0, [r7, #32]
 8000eee:	f7ff ff6f 	bl	8000dd0 <forward_back>
 8000ef2:	60f8      	str	r0, [r7, #12]
		unsigned char * second_value = forward_back(50.0,'-','-');
 8000ef4:	212d      	movs	r1, #45	; 0x2d
 8000ef6:	202d      	movs	r0, #45	; 0x2d
 8000ef8:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8000f84 <turn_forward+0xe4>
 8000efc:	f7ff ff68 	bl	8000dd0 <forward_back>
 8000f00:	60b8      	str	r0, [r7, #8]
		return cat_value(first_value,second_value);
 8000f02:	68b9      	ldr	r1, [r7, #8]
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f7ff ffad 	bl	8000e64 <cat_value>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	e02f      	b.n	8000f6e <turn_forward+0xce>
	}
	else if (angle > 0) {//tourner à droite
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dd13      	ble.n	8000f3c <turn_forward+0x9c>
		unsigned char * first_value = forward_back(distance,'-',' ');
 8000f14:	2120      	movs	r1, #32
 8000f16:	202d      	movs	r0, #45	; 0x2d
 8000f18:	ed97 0a08 	vldr	s0, [r7, #32]
 8000f1c:	f7ff ff58 	bl	8000dd0 <forward_back>
 8000f20:	6178      	str	r0, [r7, #20]
		unsigned char * second_value = forward_back(50.0,'-','-');
 8000f22:	212d      	movs	r1, #45	; 0x2d
 8000f24:	202d      	movs	r0, #45	; 0x2d
 8000f26:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8000f84 <turn_forward+0xe4>
 8000f2a:	f7ff ff51 	bl	8000dd0 <forward_back>
 8000f2e:	6138      	str	r0, [r7, #16]
		return cat_value(first_value,second_value);
 8000f30:	6939      	ldr	r1, [r7, #16]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff96 	bl	8000e64 <cat_value>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	e018      	b.n	8000f6e <turn_forward+0xce>
	}
	else {//demi-tour
		unsigned char * first_value = forward_back(4*distance,'-',' ');
 8000f3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f40:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f48:	2120      	movs	r1, #32
 8000f4a:	202d      	movs	r0, #45	; 0x2d
 8000f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f50:	f7ff ff3e 	bl	8000dd0 <forward_back>
 8000f54:	61f8      	str	r0, [r7, #28]
		unsigned char * second_value = forward_back(50.0,'-','-');
 8000f56:	212d      	movs	r1, #45	; 0x2d
 8000f58:	202d      	movs	r0, #45	; 0x2d
 8000f5a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000f84 <turn_forward+0xe4>
 8000f5e:	f7ff ff37 	bl	8000dd0 <forward_back>
 8000f62:	61b8      	str	r0, [r7, #24]
		return cat_value(first_value,second_value);
 8000f64:	69b9      	ldr	r1, [r7, #24]
 8000f66:	69f8      	ldr	r0, [r7, #28]
 8000f68:	f7ff ff7c 	bl	8000e64 <cat_value>
 8000f6c:	4603      	mov	r3, r0
	}
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	54442d18 	.word	0x54442d18
 8000f7c:	400921fb 	.word	0x400921fb
 8000f80:	41440000 	.word	0x41440000
 8000f84:	42480000 	.word	0x42480000

08000f88 <select_commande>:

unsigned char * select_commande (int n_com, unsigned char * commande){
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	int car;
	for(car = 0; car < strlen((char*)commande)-1; car ++){
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	e028      	b.n	8000fea <select_commande+0x62>
		if ((char)commande[car] == '/'){
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b2f      	cmp	r3, #47	; 0x2f
 8000fa2:	d11f      	bne.n	8000fe4 <select_commande+0x5c>
			if (n_com == 1){
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d109      	bne.n	8000fbe <select_commande+0x36>
				char * commande_1 = "";
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <select_commande+0x7c>)
 8000fac:	60fb      	str	r3, [r7, #12]
				strncpy(commande_1,(char*)commande, car);
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	6839      	ldr	r1, [r7, #0]
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f002 fe93 	bl	8003ce0 <strncpy>
				return (unsigned char*)commande_1;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	e01d      	b.n	8000ffa <select_commande+0x72>
			}else{
				char * commande_2 = "";
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <select_commande+0x7c>)
 8000fc0:	613b      	str	r3, [r7, #16]
				strncpy(commande_2,(char*)commande+car, strlen((char*)commande)-1-car);
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	18d4      	adds	r4, r2, r3
 8000fc8:	6838      	ldr	r0, [r7, #0]
 8000fca:	f7ff f909 	bl	80001e0 <strlen>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4621      	mov	r1, r4
 8000fda:	6938      	ldr	r0, [r7, #16]
 8000fdc:	f002 fe80 	bl	8003ce0 <strncpy>
				return (unsigned char*)commande_2;
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	e00a      	b.n	8000ffa <select_commande+0x72>
	for(car = 0; car < strlen((char*)commande)-1; car ++){
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	6838      	ldr	r0, [r7, #0]
 8000fec:	f7ff f8f8 	bl	80001e0 <strlen>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	1e5a      	subs	r2, r3, #1
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d8ce      	bhi.n	8000f98 <select_commande+0x10>
			}
		}
	}
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	08004408 	.word	0x08004408

08001008 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

	if (huart == &huart1){ // commande recue de la PI
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a78      	ldr	r2, [pc, #480]	; (80011f4 <HAL_UART_RxCpltCallback+0x1ec>)
 8001014:	4293      	cmp	r3, r2
 8001016:	f040 80cd 	bne.w	80011b4 <HAL_UART_RxCpltCallback+0x1ac>
		HAL_UART_Transmit(&huart1, &received, 1,HAL_MAX_DELAY);
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	2201      	movs	r2, #1
 8001020:	4975      	ldr	r1, [pc, #468]	; (80011f8 <HAL_UART_RxCpltCallback+0x1f0>)
 8001022:	4874      	ldr	r0, [pc, #464]	; (80011f4 <HAL_UART_RxCpltCallback+0x1ec>)
 8001024:	f001 fcdf 	bl	80029e6 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (unsigned char*)'\n', 1,HAL_MAX_DELAY);
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
 800102c:	2201      	movs	r2, #1
 800102e:	210a      	movs	r1, #10
 8001030:	4870      	ldr	r0, [pc, #448]	; (80011f4 <HAL_UART_RxCpltCallback+0x1ec>)
 8001032:	f001 fcd8 	bl	80029e6 <HAL_UART_Transmit>
		if (received == 'z'){
 8001036:	4b70      	ldr	r3, [pc, #448]	; (80011f8 <HAL_UART_RxCpltCallback+0x1f0>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b7a      	cmp	r3, #122	; 0x7a
 800103c:	d118      	bne.n	8001070 <HAL_UART_RxCpltCallback+0x68>
			commande = forward_back(50,'-','-');
 800103e:	212d      	movs	r1, #45	; 0x2d
 8001040:	202d      	movs	r0, #45	; 0x2d
 8001042:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 80011fc <HAL_UART_RxCpltCallback+0x1f4>
 8001046:	f7ff fec3 	bl	8000dd0 <forward_back>
 800104a:	4603      	mov	r3, r0
 800104c:	4a6c      	ldr	r2, [pc, #432]	; (8001200 <HAL_UART_RxCpltCallback+0x1f8>)
 800104e:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart6,commande,strlen((char*)commande),HAL_MAX_DELAY);
 8001050:	4b6b      	ldr	r3, [pc, #428]	; (8001200 <HAL_UART_RxCpltCallback+0x1f8>)
 8001052:	681c      	ldr	r4, [r3, #0]
 8001054:	4b6a      	ldr	r3, [pc, #424]	; (8001200 <HAL_UART_RxCpltCallback+0x1f8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff f8c1 	bl	80001e0 <strlen>
 800105e:	4603      	mov	r3, r0
 8001060:	b29a      	uxth	r2, r3
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	4621      	mov	r1, r4
 8001068:	4866      	ldr	r0, [pc, #408]	; (8001204 <HAL_UART_RxCpltCallback+0x1fc>)
 800106a:	f001 fcbc 	bl	80029e6 <HAL_UART_Transmit>
 800106e:	e0b8      	b.n	80011e2 <HAL_UART_RxCpltCallback+0x1da>
		}
		else if (received == 'a'){
 8001070:	4b61      	ldr	r3, [pc, #388]	; (80011f8 <HAL_UART_RxCpltCallback+0x1f0>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b61      	cmp	r3, #97	; 0x61
 8001076:	d107      	bne.n	8001088 <HAL_UART_RxCpltCallback+0x80>
			HAL_UART_Transmit(&huart6, (unsigned char *)"stop\r",5,HAL_MAX_DELAY);
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	2205      	movs	r2, #5
 800107e:	4962      	ldr	r1, [pc, #392]	; (8001208 <HAL_UART_RxCpltCallback+0x200>)
 8001080:	4860      	ldr	r0, [pc, #384]	; (8001204 <HAL_UART_RxCpltCallback+0x1fc>)
 8001082:	f001 fcb0 	bl	80029e6 <HAL_UART_Transmit>
 8001086:	e0ac      	b.n	80011e2 <HAL_UART_RxCpltCallback+0x1da>
		}
		else if (received == 'q'){
 8001088:	4b5b      	ldr	r3, [pc, #364]	; (80011f8 <HAL_UART_RxCpltCallback+0x1f0>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b71      	cmp	r3, #113	; 0x71
 800108e:	d13b      	bne.n	8001108 <HAL_UART_RxCpltCallback+0x100>
			commande = turn_forward(-1);
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff04 	bl	8000ea0 <turn_forward>
 8001098:	4603      	mov	r3, r0
 800109a:	4a59      	ldr	r2, [pc, #356]	; (8001200 <HAL_UART_RxCpltCallback+0x1f8>)
 800109c:	6013      	str	r3, [r2, #0]
			commande_1 = *select_commande(1, commande);
 800109e:	4b58      	ldr	r3, [pc, #352]	; (8001200 <HAL_UART_RxCpltCallback+0x1f8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4619      	mov	r1, r3
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff6f 	bl	8000f88 <select_commande>
 80010aa:	4603      	mov	r3, r0
 80010ac:	781a      	ldrb	r2, [r3, #0]
 80010ae:	4b57      	ldr	r3, [pc, #348]	; (800120c <HAL_UART_RxCpltCallback+0x204>)
 80010b0:	701a      	strb	r2, [r3, #0]
			commande_2 = *select_commande(1, commande);
 80010b2:	4b53      	ldr	r3, [pc, #332]	; (8001200 <HAL_UART_RxCpltCallback+0x1f8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4619      	mov	r1, r3
 80010b8:	2001      	movs	r0, #1
 80010ba:	f7ff ff65 	bl	8000f88 <select_commande>
 80010be:	4603      	mov	r3, r0
 80010c0:	781a      	ldrb	r2, [r3, #0]
 80010c2:	4b53      	ldr	r3, [pc, #332]	; (8001210 <HAL_UART_RxCpltCallback+0x208>)
 80010c4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart6,commande_1,strlen((char*)commande_1),HAL_MAX_DELAY);
 80010c6:	4b51      	ldr	r3, [pc, #324]	; (800120c <HAL_UART_RxCpltCallback+0x204>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461c      	mov	r4, r3
 80010cc:	4b4f      	ldr	r3, [pc, #316]	; (800120c <HAL_UART_RxCpltCallback+0x204>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff f885 	bl	80001e0 <strlen>
 80010d6:	4603      	mov	r3, r0
 80010d8:	b29a      	uxth	r2, r3
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	4621      	mov	r1, r4
 80010e0:	4848      	ldr	r0, [pc, #288]	; (8001204 <HAL_UART_RxCpltCallback+0x1fc>)
 80010e2:	f001 fc80 	bl	80029e6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart6,commande_2,strlen((char*)commande_2),HAL_MAX_DELAY);
 80010e6:	4b4a      	ldr	r3, [pc, #296]	; (8001210 <HAL_UART_RxCpltCallback+0x208>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461c      	mov	r4, r3
 80010ec:	4b48      	ldr	r3, [pc, #288]	; (8001210 <HAL_UART_RxCpltCallback+0x208>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f875 	bl	80001e0 <strlen>
 80010f6:	4603      	mov	r3, r0
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	4621      	mov	r1, r4
 8001100:	4840      	ldr	r0, [pc, #256]	; (8001204 <HAL_UART_RxCpltCallback+0x1fc>)
 8001102:	f001 fc70 	bl	80029e6 <HAL_UART_Transmit>
 8001106:	e06c      	b.n	80011e2 <HAL_UART_RxCpltCallback+0x1da>
		}
		else if (received == 'd'){
 8001108:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <HAL_UART_RxCpltCallback+0x1f0>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b64      	cmp	r3, #100	; 0x64
 800110e:	d134      	bne.n	800117a <HAL_UART_RxCpltCallback+0x172>
			commande = turn_forward(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f7ff fec5 	bl	8000ea0 <turn_forward>
 8001116:	4603      	mov	r3, r0
 8001118:	4a39      	ldr	r2, [pc, #228]	; (8001200 <HAL_UART_RxCpltCallback+0x1f8>)
 800111a:	6013      	str	r3, [r2, #0]
			commande_1 = *select_commande(1, commande);
 800111c:	4b38      	ldr	r3, [pc, #224]	; (8001200 <HAL_UART_RxCpltCallback+0x1f8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	2001      	movs	r0, #1
 8001124:	f7ff ff30 	bl	8000f88 <select_commande>
 8001128:	4603      	mov	r3, r0
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	4b37      	ldr	r3, [pc, #220]	; (800120c <HAL_UART_RxCpltCallback+0x204>)
 800112e:	701a      	strb	r2, [r3, #0]
			commande_2 = *select_commande(1, commande);
 8001130:	4b33      	ldr	r3, [pc, #204]	; (8001200 <HAL_UART_RxCpltCallback+0x1f8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	2001      	movs	r0, #1
 8001138:	f7ff ff26 	bl	8000f88 <select_commande>
 800113c:	4603      	mov	r3, r0
 800113e:	781a      	ldrb	r2, [r3, #0]
 8001140:	4b33      	ldr	r3, [pc, #204]	; (8001210 <HAL_UART_RxCpltCallback+0x208>)
 8001142:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart6,&commande_1,strlen((char*)commande_1),HAL_MAX_DELAY);
 8001144:	4b31      	ldr	r3, [pc, #196]	; (800120c <HAL_UART_RxCpltCallback+0x204>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f849 	bl	80001e0 <strlen>
 800114e:	4603      	mov	r3, r0
 8001150:	b29a      	uxth	r2, r3
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	492d      	ldr	r1, [pc, #180]	; (800120c <HAL_UART_RxCpltCallback+0x204>)
 8001158:	482a      	ldr	r0, [pc, #168]	; (8001204 <HAL_UART_RxCpltCallback+0x1fc>)
 800115a:	f001 fc44 	bl	80029e6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart6,&commande_2,strlen((char*)commande_2),HAL_MAX_DELAY);
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <HAL_UART_RxCpltCallback+0x208>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f83c 	bl	80001e0 <strlen>
 8001168:	4603      	mov	r3, r0
 800116a:	b29a      	uxth	r2, r3
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	4927      	ldr	r1, [pc, #156]	; (8001210 <HAL_UART_RxCpltCallback+0x208>)
 8001172:	4824      	ldr	r0, [pc, #144]	; (8001204 <HAL_UART_RxCpltCallback+0x1fc>)
 8001174:	f001 fc37 	bl	80029e6 <HAL_UART_Transmit>
 8001178:	e033      	b.n	80011e2 <HAL_UART_RxCpltCallback+0x1da>
		}
		else if (received == 's'){
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <HAL_UART_RxCpltCallback+0x1f0>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b73      	cmp	r3, #115	; 0x73
 8001180:	d12f      	bne.n	80011e2 <HAL_UART_RxCpltCallback+0x1da>
			commande = forward_back(50,' ',' ');
 8001182:	2120      	movs	r1, #32
 8001184:	2020      	movs	r0, #32
 8001186:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80011fc <HAL_UART_RxCpltCallback+0x1f4>
 800118a:	f7ff fe21 	bl	8000dd0 <forward_back>
 800118e:	4603      	mov	r3, r0
 8001190:	4a1b      	ldr	r2, [pc, #108]	; (8001200 <HAL_UART_RxCpltCallback+0x1f8>)
 8001192:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart6,commande,strlen((char*)commande),HAL_MAX_DELAY);
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_UART_RxCpltCallback+0x1f8>)
 8001196:	681c      	ldr	r4, [r3, #0]
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_UART_RxCpltCallback+0x1f8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f81f 	bl	80001e0 <strlen>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	4621      	mov	r1, r4
 80011ac:	4815      	ldr	r0, [pc, #84]	; (8001204 <HAL_UART_RxCpltCallback+0x1fc>)
 80011ae:	f001 fc1a 	bl	80029e6 <HAL_UART_Transmit>
 80011b2:	e016      	b.n	80011e2 <HAL_UART_RxCpltCallback+0x1da>
		}
	}
	else if(huart == &huart6){ // commande recue du Serializer
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a13      	ldr	r2, [pc, #76]	; (8001204 <HAL_UART_RxCpltCallback+0x1fc>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d112      	bne.n	80011e2 <HAL_UART_RxCpltCallback+0x1da>
		if (received != '>'){
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_UART_RxCpltCallback+0x1f0>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b3e      	cmp	r3, #62	; 0x3e
 80011c2:	d007      	beq.n	80011d4 <HAL_UART_RxCpltCallback+0x1cc>
			HAL_UART_Transmit(&huart1, &received, 1,HAL_MAX_DELAY);
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	2201      	movs	r2, #1
 80011ca:	490b      	ldr	r1, [pc, #44]	; (80011f8 <HAL_UART_RxCpltCallback+0x1f0>)
 80011cc:	4809      	ldr	r0, [pc, #36]	; (80011f4 <HAL_UART_RxCpltCallback+0x1ec>)
 80011ce:	f001 fc0a 	bl	80029e6 <HAL_UART_Transmit>
 80011d2:	e006      	b.n	80011e2 <HAL_UART_RxCpltCallback+0x1da>
		}
		else{
			HAL_UART_Transmit(&huart1, (unsigned char*)'\n', 1,HAL_MAX_DELAY);
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	2201      	movs	r2, #1
 80011da:	210a      	movs	r1, #10
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <HAL_UART_RxCpltCallback+0x1ec>)
 80011de:	f001 fc02 	bl	80029e6 <HAL_UART_Transmit>
		}
	}
    HAL_UART_Receive_IT(huart, &received, 1);
 80011e2:	2201      	movs	r2, #1
 80011e4:	4904      	ldr	r1, [pc, #16]	; (80011f8 <HAL_UART_RxCpltCallback+0x1f0>)
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f001 fc8f 	bl	8002b0a <HAL_UART_Receive_IT>
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	2000008c 	.word	0x2000008c
 80011f8:	20000158 	.word	0x20000158
 80011fc:	42480000 	.word	0x42480000
 8001200:	2000015c 	.word	0x2000015c
 8001204:	20000114 	.word	0x20000114
 8001208:	0800440c 	.word	0x0800440c
 800120c:	20000160 	.word	0x20000160
 8001210:	20000161 	.word	0x20000161

08001214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001214:	b5b0      	push	{r4, r5, r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121a:	f000 fb4b 	bl	80018b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121e:	f000 f841 	bl	80012a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001222:	f000 f929 	bl	8001478 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001226:	f000 f8d3 	bl	80013d0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800122a:	f000 f8a7 	bl	800137c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800122e:	f000 f8f9 	bl	8001424 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  char message [20] = "UART initialized\n";
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <main+0x78>)
 8001234:	1d3c      	adds	r4, r7, #4
 8001236:	461d      	mov	r5, r3
 8001238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123c:	682b      	ldr	r3, [r5, #0]
 800123e:	8023      	strh	r3, [r4, #0]
 8001240:	2300      	movs	r3, #0
 8001242:	82fb      	strh	r3, [r7, #22]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	2120      	movs	r1, #32
 8001248:	4811      	ldr	r0, [pc, #68]	; (8001290 <main+0x7c>)
 800124a:	f000 fecd 	bl	8001fe8 <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart1, CLEAR_CONSOLE, strlen(CLEAR_CONSOLE), HAL_MAX_DELAY);
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	2204      	movs	r2, #4
 8001254:	490f      	ldr	r1, [pc, #60]	; (8001294 <main+0x80>)
 8001256:	4810      	ldr	r0, [pc, #64]	; (8001298 <main+0x84>)
 8001258:	f001 fbc5 	bl	80029e6 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (unsigned char*)message, strlen(message), HAL_MAX_DELAY);
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	4618      	mov	r0, r3
 8001260:	f7fe ffbe 	bl	80001e0 <strlen>
 8001264:	4603      	mov	r3, r0
 8001266:	b29a      	uxth	r2, r3
 8001268:	1d39      	adds	r1, r7, #4
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	480a      	ldr	r0, [pc, #40]	; (8001298 <main+0x84>)
 8001270:	f001 fbb9 	bl	80029e6 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart1, &received, 1);
 8001274:	2201      	movs	r2, #1
 8001276:	4909      	ldr	r1, [pc, #36]	; (800129c <main+0x88>)
 8001278:	4807      	ldr	r0, [pc, #28]	; (8001298 <main+0x84>)
 800127a:	f001 fc46 	bl	8002b0a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &received, 1);
 800127e:	2201      	movs	r2, #1
 8001280:	4906      	ldr	r1, [pc, #24]	; (800129c <main+0x88>)
 8001282:	4807      	ldr	r0, [pc, #28]	; (80012a0 <main+0x8c>)
 8001284:	f001 fc41 	bl	8002b0a <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001288:	e7fe      	b.n	8001288 <main+0x74>
 800128a:	bf00      	nop
 800128c:	0800441c 	.word	0x0800441c
 8001290:	40020000 	.word	0x40020000
 8001294:	08004414 	.word	0x08004414
 8001298:	2000008c 	.word	0x2000008c
 800129c:	20000158 	.word	0x20000158
 80012a0:	20000114 	.word	0x20000114

080012a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b094      	sub	sp, #80	; 0x50
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	2230      	movs	r2, #48	; 0x30
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 fbfc 	bl	8003ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <SystemClock_Config+0xd0>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	4a28      	ldr	r2, [pc, #160]	; (8001374 <SystemClock_Config+0xd0>)
 80012d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d6:	6413      	str	r3, [r2, #64]	; 0x40
 80012d8:	4b26      	ldr	r3, [pc, #152]	; (8001374 <SystemClock_Config+0xd0>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	4b23      	ldr	r3, [pc, #140]	; (8001378 <SystemClock_Config+0xd4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012f0:	4a21      	ldr	r2, [pc, #132]	; (8001378 <SystemClock_Config+0xd4>)
 80012f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <SystemClock_Config+0xd4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001304:	2302      	movs	r3, #2
 8001306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001308:	2301      	movs	r3, #1
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130c:	2310      	movs	r3, #16
 800130e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001310:	2302      	movs	r3, #2
 8001312:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001314:	2300      	movs	r3, #0
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001318:	2310      	movs	r3, #16
 800131a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800131c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001320:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001322:	2304      	movs	r3, #4
 8001324:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001326:	2307      	movs	r3, #7
 8001328:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132a:	f107 0320 	add.w	r3, r7, #32
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fe74 	bl	800201c <HAL_RCC_OscConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800133a:	f000 f90b 	bl	8001554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133e:	230f      	movs	r3, #15
 8001340:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001342:	2302      	movs	r3, #2
 8001344:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800134a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	2102      	movs	r1, #2
 800135a:	4618      	mov	r0, r3
 800135c:	f001 f8d6 	bl	800250c <HAL_RCC_ClockConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001366:	f000 f8f5 	bl	8001554 <Error_Handler>
  }
}
 800136a:	bf00      	nop
 800136c:	3750      	adds	r7, #80	; 0x50
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40007000 	.word	0x40007000

0800137c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <MX_USART1_UART_Init+0x50>)
 8001384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 8001388:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800138c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_USART1_UART_Init+0x4c>)
 80013b4:	f001 faca 	bl	800294c <HAL_UART_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013be:	f000 f8c9 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000008c 	.word	0x2000008c
 80013cc:	40011000 	.word	0x40011000

080013d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_USART2_UART_Init+0x4c>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	; (8001420 <MX_USART2_UART_Init+0x50>)
 80013d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <MX_USART2_UART_Init+0x4c>)
 80013dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_USART2_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_USART2_UART_Init+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <MX_USART2_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_USART2_UART_Init+0x4c>)
 80013f6:	220c      	movs	r2, #12
 80013f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <MX_USART2_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_USART2_UART_Init+0x4c>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_USART2_UART_Init+0x4c>)
 8001408:	f001 faa0 	bl	800294c <HAL_UART_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001412:	f000 f89f 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200000d0 	.word	0x200000d0
 8001420:	40004400 	.word	0x40004400

08001424 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_USART6_UART_Init+0x4c>)
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <MX_USART6_UART_Init+0x50>)
 800142c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 19200;
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <MX_USART6_UART_Init+0x4c>)
 8001430:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001434:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_USART6_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_USART6_UART_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <MX_USART6_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_USART6_UART_Init+0x4c>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <MX_USART6_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_USART6_UART_Init+0x4c>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_USART6_UART_Init+0x4c>)
 800145c:	f001 fa76 	bl	800294c <HAL_UART_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001466:	f000 f875 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000114 	.word	0x20000114
 8001474:	40011400 	.word	0x40011400

08001478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <MX_GPIO_Init+0xd0>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a2c      	ldr	r2, [pc, #176]	; (8001548 <MX_GPIO_Init+0xd0>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a25      	ldr	r2, [pc, #148]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b23      	ldr	r3, [pc, #140]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a1e      	ldr	r2, [pc, #120]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a17      	ldr	r2, [pc, #92]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2120      	movs	r1, #32
 8001502:	4812      	ldr	r0, [pc, #72]	; (800154c <MX_GPIO_Init+0xd4>)
 8001504:	f000 fd70 	bl	8001fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800150e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	480c      	ldr	r0, [pc, #48]	; (8001550 <MX_GPIO_Init+0xd8>)
 8001520:	f000 fbde 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001524:	2320      	movs	r3, #32
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_GPIO_Init+0xd4>)
 800153c:	f000 fbd0 	bl	8001ce0 <HAL_GPIO_Init>

}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	; 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020800 	.word	0x40020800

08001554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800155c:	e7fe      	b.n	800155c <Error_Handler+0x8>
	...

08001560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_MspInit+0x4c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <HAL_MspInit+0x4c>)
 8001570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_MspInit+0x4c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_MspInit+0x4c>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_MspInit+0x4c>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_MspInit+0x4c>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800159e:	2007      	movs	r0, #7
 80015a0:	f000 faca 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40023800 	.word	0x40023800

080015b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08e      	sub	sp, #56	; 0x38
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a5b      	ldr	r2, [pc, #364]	; (800173c <HAL_UART_MspInit+0x18c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d135      	bne.n	800163e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
 80015d6:	4b5a      	ldr	r3, [pc, #360]	; (8001740 <HAL_UART_MspInit+0x190>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a59      	ldr	r2, [pc, #356]	; (8001740 <HAL_UART_MspInit+0x190>)
 80015dc:	f043 0310 	orr.w	r3, r3, #16
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b57      	ldr	r3, [pc, #348]	; (8001740 <HAL_UART_MspInit+0x190>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	623b      	str	r3, [r7, #32]
 80015ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	4b53      	ldr	r3, [pc, #332]	; (8001740 <HAL_UART_MspInit+0x190>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a52      	ldr	r2, [pc, #328]	; (8001740 <HAL_UART_MspInit+0x190>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b50      	ldr	r3, [pc, #320]	; (8001740 <HAL_UART_MspInit+0x190>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	61fb      	str	r3, [r7, #28]
 8001608:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800160a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800161c:	2307      	movs	r3, #7
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	4619      	mov	r1, r3
 8001626:	4847      	ldr	r0, [pc, #284]	; (8001744 <HAL_UART_MspInit+0x194>)
 8001628:	f000 fb5a 	bl	8001ce0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	2025      	movs	r0, #37	; 0x25
 8001632:	f000 fa8c 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001636:	2025      	movs	r0, #37	; 0x25
 8001638:	f000 faa5 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800163c:	e07a      	b.n	8001734 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART2)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a41      	ldr	r2, [pc, #260]	; (8001748 <HAL_UART_MspInit+0x198>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d12c      	bne.n	80016a2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <HAL_UART_MspInit+0x190>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a3b      	ldr	r2, [pc, #236]	; (8001740 <HAL_UART_MspInit+0x190>)
 8001652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b39      	ldr	r3, [pc, #228]	; (8001740 <HAL_UART_MspInit+0x190>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	4b35      	ldr	r3, [pc, #212]	; (8001740 <HAL_UART_MspInit+0x190>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	4a34      	ldr	r2, [pc, #208]	; (8001740 <HAL_UART_MspInit+0x190>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6313      	str	r3, [r2, #48]	; 0x30
 8001674:	4b32      	ldr	r3, [pc, #200]	; (8001740 <HAL_UART_MspInit+0x190>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001680:	230c      	movs	r3, #12
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001690:	2307      	movs	r3, #7
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001698:	4619      	mov	r1, r3
 800169a:	482a      	ldr	r0, [pc, #168]	; (8001744 <HAL_UART_MspInit+0x194>)
 800169c:	f000 fb20 	bl	8001ce0 <HAL_GPIO_Init>
}
 80016a0:	e048      	b.n	8001734 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART6)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a29      	ldr	r2, [pc, #164]	; (800174c <HAL_UART_MspInit+0x19c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d143      	bne.n	8001734 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART6_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	4b23      	ldr	r3, [pc, #140]	; (8001740 <HAL_UART_MspInit+0x190>)
 80016b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b4:	4a22      	ldr	r2, [pc, #136]	; (8001740 <HAL_UART_MspInit+0x190>)
 80016b6:	f043 0320 	orr.w	r3, r3, #32
 80016ba:	6453      	str	r3, [r2, #68]	; 0x44
 80016bc:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_UART_MspInit+0x190>)
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <HAL_UART_MspInit+0x190>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4a1b      	ldr	r2, [pc, #108]	; (8001740 <HAL_UART_MspInit+0x190>)
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	6313      	str	r3, [r2, #48]	; 0x30
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_UART_MspInit+0x190>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016e4:	2340      	movs	r3, #64	; 0x40
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e8:	2312      	movs	r3, #18
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016f4:	2308      	movs	r3, #8
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fc:	4619      	mov	r1, r3
 80016fe:	4814      	ldr	r0, [pc, #80]	; (8001750 <HAL_UART_MspInit+0x1a0>)
 8001700:	f000 faee 	bl	8001ce0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001714:	2308      	movs	r3, #8
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171c:	4619      	mov	r1, r3
 800171e:	480c      	ldr	r0, [pc, #48]	; (8001750 <HAL_UART_MspInit+0x1a0>)
 8001720:	f000 fade 	bl	8001ce0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2047      	movs	r0, #71	; 0x47
 800172a:	f000 fa10 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800172e:	2047      	movs	r0, #71	; 0x47
 8001730:	f000 fa29 	bl	8001b86 <HAL_NVIC_EnableIRQ>
}
 8001734:	bf00      	nop
 8001736:	3738      	adds	r7, #56	; 0x38
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40011000 	.word	0x40011000
 8001740:	40023800 	.word	0x40023800
 8001744:	40020000 	.word	0x40020000
 8001748:	40004400 	.word	0x40004400
 800174c:	40011400 	.word	0x40011400
 8001750:	40020800 	.word	0x40020800

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <NMI_Handler+0x4>

0800175a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <MemManage_Handler+0x4>

08001766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <UsageFault_Handler+0x4>

08001772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a0:	f000 f8da 	bl	8001958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <USART1_IRQHandler+0x10>)
 80017ae:	f001 f9dd 	bl	8002b6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000008c 	.word	0x2000008c

080017bc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <USART6_IRQHandler+0x10>)
 80017c2:	f001 f9d3 	bl	8002b6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000114 	.word	0x20000114

080017d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d8:	4a14      	ldr	r2, [pc, #80]	; (800182c <_sbrk+0x5c>)
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <_sbrk+0x60>)
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <_sbrk+0x64>)
 80017ee:	4a12      	ldr	r2, [pc, #72]	; (8001838 <_sbrk+0x68>)
 80017f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d207      	bcs.n	8001810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001800:	f002 f91c 	bl	8003a3c <__errno>
 8001804:	4603      	mov	r3, r0
 8001806:	220c      	movs	r2, #12
 8001808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	e009      	b.n	8001824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <_sbrk+0x64>)
 8001820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20018000 	.word	0x20018000
 8001830:	00000400 	.word	0x00000400
 8001834:	20000164 	.word	0x20000164
 8001838:	20000180 	.word	0x20000180

0800183c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <SystemInit+0x20>)
 8001842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <SystemInit+0x20>)
 8001848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800184c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001898 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001864:	480d      	ldr	r0, [pc, #52]	; (800189c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001866:	490e      	ldr	r1, [pc, #56]	; (80018a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001868:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800186c:	e002      	b.n	8001874 <LoopCopyDataInit>

0800186e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001872:	3304      	adds	r3, #4

08001874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001878:	d3f9      	bcc.n	800186e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187a:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800187c:	4c0b      	ldr	r4, [pc, #44]	; (80018ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001880:	e001      	b.n	8001886 <LoopFillZerobss>

08001882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001884:	3204      	adds	r2, #4

08001886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001888:	d3fb      	bcc.n	8001882 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800188a:	f7ff ffd7 	bl	800183c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188e:	f002 f8db 	bl	8003a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001892:	f7ff fcbf 	bl	8001214 <main>
  bx  lr    
 8001896:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001898:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800189c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018a4:	0800448c 	.word	0x0800448c
  ldr r2, =_sbss
 80018a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018ac:	2000017c 	.word	0x2000017c

080018b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC_IRQHandler>
	...

080018b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018b8:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <HAL_Init+0x40>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0d      	ldr	r2, [pc, #52]	; (80018f4 <HAL_Init+0x40>)
 80018be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_Init+0x40>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <HAL_Init+0x40>)
 80018ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_Init+0x40>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <HAL_Init+0x40>)
 80018d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018dc:	2003      	movs	r0, #3
 80018de:	f000 f92b 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 f808 	bl	80018f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e8:	f7ff fe3a 	bl	8001560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023c00 	.word	0x40023c00

080018f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_InitTick+0x54>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_InitTick+0x58>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f943 	bl	8001ba2 <HAL_SYSTICK_Config>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e00e      	b.n	8001944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d80a      	bhi.n	8001942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f000 f90b 	bl	8001b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <HAL_InitTick+0x5c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	e000      	b.n	8001944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000000 	.word	0x20000000
 8001950:	20000008 	.word	0x20000008
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x20>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x24>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_IncTick+0x24>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000008 	.word	0x20000008
 800197c:	20000168 	.word	0x20000168

08001980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTick;
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_GetTick+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000168 	.word	0x20000168

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db0b      	blt.n	8001a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <__NVIC_EnableIRQ+0x38>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	; (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f7ff ff8e 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff29 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff3e 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff8e 	bl	8001a8c <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5d 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff31 	bl	80019fc <__NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffa2 	bl	8001af4 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7ff feda 	bl	8001980 <HAL_GetTick>
 8001bcc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d008      	beq.n	8001bec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e052      	b.n	8001c92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0216 	bic.w	r2, r2, #22
 8001bfa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d103      	bne.n	8001c1c <HAL_DMA_Abort+0x62>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d007      	beq.n	8001c2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0208 	bic.w	r2, r2, #8
 8001c2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0201 	bic.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c3c:	e013      	b.n	8001c66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c3e:	f7ff fe9f 	bl	8001980 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b05      	cmp	r3, #5
 8001c4a:	d90c      	bls.n	8001c66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2203      	movs	r2, #3
 8001c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e015      	b.n	8001c92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1e4      	bne.n	8001c3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	223f      	movs	r2, #63	; 0x3f
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d004      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2280      	movs	r2, #128	; 0x80
 8001cb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e00c      	b.n	8001cd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2205      	movs	r2, #5
 8001cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0201 	bic.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	e159      	b.n	8001fb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	f040 8148 	bne.w	8001faa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d005      	beq.n	8001d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d130      	bne.n	8001d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 0201 	and.w	r2, r3, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d017      	beq.n	8001dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d123      	bne.n	8001e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	08da      	lsrs	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3208      	adds	r2, #8
 8001de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	220f      	movs	r2, #15
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	08da      	lsrs	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3208      	adds	r2, #8
 8001e1e:	69b9      	ldr	r1, [r7, #24]
 8001e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0203 	and.w	r2, r3, #3
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80a2 	beq.w	8001faa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b57      	ldr	r3, [pc, #348]	; (8001fc8 <HAL_GPIO_Init+0x2e8>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	4a56      	ldr	r2, [pc, #344]	; (8001fc8 <HAL_GPIO_Init+0x2e8>)
 8001e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e74:	6453      	str	r3, [r2, #68]	; 0x44
 8001e76:	4b54      	ldr	r3, [pc, #336]	; (8001fc8 <HAL_GPIO_Init+0x2e8>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e82:	4a52      	ldr	r2, [pc, #328]	; (8001fcc <HAL_GPIO_Init+0x2ec>)
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	3302      	adds	r3, #2
 8001e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	220f      	movs	r2, #15
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a49      	ldr	r2, [pc, #292]	; (8001fd0 <HAL_GPIO_Init+0x2f0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d019      	beq.n	8001ee2 <HAL_GPIO_Init+0x202>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a48      	ldr	r2, [pc, #288]	; (8001fd4 <HAL_GPIO_Init+0x2f4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d013      	beq.n	8001ede <HAL_GPIO_Init+0x1fe>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a47      	ldr	r2, [pc, #284]	; (8001fd8 <HAL_GPIO_Init+0x2f8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00d      	beq.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a46      	ldr	r2, [pc, #280]	; (8001fdc <HAL_GPIO_Init+0x2fc>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d007      	beq.n	8001ed6 <HAL_GPIO_Init+0x1f6>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a45      	ldr	r2, [pc, #276]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d101      	bne.n	8001ed2 <HAL_GPIO_Init+0x1f2>
 8001ece:	2304      	movs	r3, #4
 8001ed0:	e008      	b.n	8001ee4 <HAL_GPIO_Init+0x204>
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x204>
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e004      	b.n	8001ee4 <HAL_GPIO_Init+0x204>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e002      	b.n	8001ee4 <HAL_GPIO_Init+0x204>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_GPIO_Init+0x204>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	69fa      	ldr	r2, [r7, #28]
 8001ee6:	f002 0203 	and.w	r2, r2, #3
 8001eea:	0092      	lsls	r2, r2, #2
 8001eec:	4093      	lsls	r3, r2
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef4:	4935      	ldr	r1, [pc, #212]	; (8001fcc <HAL_GPIO_Init+0x2ec>)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	3302      	adds	r3, #2
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <HAL_GPIO_Init+0x304>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f26:	4a2f      	ldr	r2, [pc, #188]	; (8001fe4 <HAL_GPIO_Init+0x304>)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f2c:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_GPIO_Init+0x304>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f50:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <HAL_GPIO_Init+0x304>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f56:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_GPIO_Init+0x304>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f7a:	4a1a      	ldr	r2, [pc, #104]	; (8001fe4 <HAL_GPIO_Init+0x304>)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_GPIO_Init+0x304>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <HAL_GPIO_Init+0x304>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3301      	adds	r3, #1
 8001fae:	61fb      	str	r3, [r7, #28]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	2b0f      	cmp	r3, #15
 8001fb4:	f67f aea2 	bls.w	8001cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40013800 	.word	0x40013800
 8001fd0:	40020000 	.word	0x40020000
 8001fd4:	40020400 	.word	0x40020400
 8001fd8:	40020800 	.word	0x40020800
 8001fdc:	40020c00 	.word	0x40020c00
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40013c00 	.word	0x40013c00

08001fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	807b      	strh	r3, [r7, #2]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff8:	787b      	ldrb	r3, [r7, #1]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002004:	e003      	b.n	800200e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002006:	887b      	ldrh	r3, [r7, #2]
 8002008:	041a      	lsls	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	619a      	str	r2, [r3, #24]
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e267      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d075      	beq.n	8002126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800203a:	4b88      	ldr	r3, [pc, #544]	; (800225c <HAL_RCC_OscConfig+0x240>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b04      	cmp	r3, #4
 8002044:	d00c      	beq.n	8002060 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002046:	4b85      	ldr	r3, [pc, #532]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800204e:	2b08      	cmp	r3, #8
 8002050:	d112      	bne.n	8002078 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002052:	4b82      	ldr	r3, [pc, #520]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800205e:	d10b      	bne.n	8002078 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	4b7e      	ldr	r3, [pc, #504]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d05b      	beq.n	8002124 <HAL_RCC_OscConfig+0x108>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d157      	bne.n	8002124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e242      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002080:	d106      	bne.n	8002090 <HAL_RCC_OscConfig+0x74>
 8002082:	4b76      	ldr	r3, [pc, #472]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a75      	ldr	r2, [pc, #468]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e01d      	b.n	80020cc <HAL_RCC_OscConfig+0xb0>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x98>
 800209a:	4b70      	ldr	r3, [pc, #448]	; (800225c <HAL_RCC_OscConfig+0x240>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a6f      	ldr	r2, [pc, #444]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b6d      	ldr	r3, [pc, #436]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a6c      	ldr	r2, [pc, #432]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e00b      	b.n	80020cc <HAL_RCC_OscConfig+0xb0>
 80020b4:	4b69      	ldr	r3, [pc, #420]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a68      	ldr	r2, [pc, #416]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80020ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	4b66      	ldr	r3, [pc, #408]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a65      	ldr	r2, [pc, #404]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80020c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff fc54 	bl	8001980 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff fc50 	bl	8001980 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e207      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	4b5b      	ldr	r3, [pc, #364]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0xc0>
 80020fa:	e014      	b.n	8002126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff fc40 	bl	8001980 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002104:	f7ff fc3c 	bl	8001980 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e1f3      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	4b51      	ldr	r3, [pc, #324]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0xe8>
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d063      	beq.n	80021fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002132:	4b4a      	ldr	r3, [pc, #296]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213e:	4b47      	ldr	r3, [pc, #284]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002146:	2b08      	cmp	r3, #8
 8002148:	d11c      	bne.n	8002184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214a:	4b44      	ldr	r3, [pc, #272]	; (800225c <HAL_RCC_OscConfig+0x240>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d116      	bne.n	8002184 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_RCC_OscConfig+0x152>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e1c7      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216e:	4b3b      	ldr	r3, [pc, #236]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4937      	ldr	r1, [pc, #220]	; (800225c <HAL_RCC_OscConfig+0x240>)
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002182:	e03a      	b.n	80021fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800218c:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_RCC_OscConfig+0x244>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7ff fbf5 	bl	8001980 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219a:	f7ff fbf1 	bl	8001980 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e1a8      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b8:	4b28      	ldr	r3, [pc, #160]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4925      	ldr	r1, [pc, #148]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]
 80021cc:	e015      	b.n	80021fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_RCC_OscConfig+0x244>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7ff fbd4 	bl	8001980 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021dc:	f7ff fbd0 	bl	8001980 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e187      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_RCC_OscConfig+0x240>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d036      	beq.n	8002274 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d016      	beq.n	800223c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_RCC_OscConfig+0x248>)
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002214:	f7ff fbb4 	bl	8001980 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800221c:	f7ff fbb0 	bl	8001980 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e167      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_OscConfig+0x240>)
 8002230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x200>
 800223a:	e01b      	b.n	8002274 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_RCC_OscConfig+0x248>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002242:	f7ff fb9d 	bl	8001980 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002248:	e00e      	b.n	8002268 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224a:	f7ff fb99 	bl	8001980 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d907      	bls.n	8002268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e150      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
 800225c:	40023800 	.word	0x40023800
 8002260:	42470000 	.word	0x42470000
 8002264:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002268:	4b88      	ldr	r3, [pc, #544]	; (800248c <HAL_RCC_OscConfig+0x470>)
 800226a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1ea      	bne.n	800224a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 8097 	beq.w	80023b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002286:	4b81      	ldr	r3, [pc, #516]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10f      	bne.n	80022b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	4b7d      	ldr	r3, [pc, #500]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a7c      	ldr	r2, [pc, #496]	; (800248c <HAL_RCC_OscConfig+0x470>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b7a      	ldr	r3, [pc, #488]	; (800248c <HAL_RCC_OscConfig+0x470>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ae:	2301      	movs	r3, #1
 80022b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b2:	4b77      	ldr	r3, [pc, #476]	; (8002490 <HAL_RCC_OscConfig+0x474>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d118      	bne.n	80022f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022be:	4b74      	ldr	r3, [pc, #464]	; (8002490 <HAL_RCC_OscConfig+0x474>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a73      	ldr	r2, [pc, #460]	; (8002490 <HAL_RCC_OscConfig+0x474>)
 80022c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ca:	f7ff fb59 	bl	8001980 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d2:	f7ff fb55 	bl	8001980 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e10c      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	4b6a      	ldr	r3, [pc, #424]	; (8002490 <HAL_RCC_OscConfig+0x474>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x2ea>
 80022f8:	4b64      	ldr	r3, [pc, #400]	; (800248c <HAL_RCC_OscConfig+0x470>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fc:	4a63      	ldr	r2, [pc, #396]	; (800248c <HAL_RCC_OscConfig+0x470>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6713      	str	r3, [r2, #112]	; 0x70
 8002304:	e01c      	b.n	8002340 <HAL_RCC_OscConfig+0x324>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b05      	cmp	r3, #5
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0x30c>
 800230e:	4b5f      	ldr	r3, [pc, #380]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002312:	4a5e      	ldr	r2, [pc, #376]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002314:	f043 0304 	orr.w	r3, r3, #4
 8002318:	6713      	str	r3, [r2, #112]	; 0x70
 800231a:	4b5c      	ldr	r3, [pc, #368]	; (800248c <HAL_RCC_OscConfig+0x470>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	4a5b      	ldr	r2, [pc, #364]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6713      	str	r3, [r2, #112]	; 0x70
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0x324>
 8002328:	4b58      	ldr	r3, [pc, #352]	; (800248c <HAL_RCC_OscConfig+0x470>)
 800232a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232c:	4a57      	ldr	r2, [pc, #348]	; (800248c <HAL_RCC_OscConfig+0x470>)
 800232e:	f023 0301 	bic.w	r3, r3, #1
 8002332:	6713      	str	r3, [r2, #112]	; 0x70
 8002334:	4b55      	ldr	r3, [pc, #340]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	4a54      	ldr	r2, [pc, #336]	; (800248c <HAL_RCC_OscConfig+0x470>)
 800233a:	f023 0304 	bic.w	r3, r3, #4
 800233e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d015      	beq.n	8002374 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7ff fb1a 	bl	8001980 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234e:	e00a      	b.n	8002366 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002350:	f7ff fb16 	bl	8001980 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e0cb      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002366:	4b49      	ldr	r3, [pc, #292]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0ee      	beq.n	8002350 <HAL_RCC_OscConfig+0x334>
 8002372:	e014      	b.n	800239e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002374:	f7ff fb04 	bl	8001980 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237a:	e00a      	b.n	8002392 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800237c:	f7ff fb00 	bl	8001980 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	; 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e0b5      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002392:	4b3e      	ldr	r3, [pc, #248]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1ee      	bne.n	800237c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800239e:	7dfb      	ldrb	r3, [r7, #23]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d105      	bne.n	80023b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a4:	4b39      	ldr	r3, [pc, #228]	; (800248c <HAL_RCC_OscConfig+0x470>)
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	4a38      	ldr	r2, [pc, #224]	; (800248c <HAL_RCC_OscConfig+0x470>)
 80023aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a1 	beq.w	80024fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ba:	4b34      	ldr	r3, [pc, #208]	; (800248c <HAL_RCC_OscConfig+0x470>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d05c      	beq.n	8002480 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d141      	bne.n	8002452 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ce:	4b31      	ldr	r3, [pc, #196]	; (8002494 <HAL_RCC_OscConfig+0x478>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7ff fad4 	bl	8001980 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023dc:	f7ff fad0 	bl	8001980 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e087      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ee:	4b27      	ldr	r3, [pc, #156]	; (800248c <HAL_RCC_OscConfig+0x470>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	019b      	lsls	r3, r3, #6
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	085b      	lsrs	r3, r3, #1
 8002412:	3b01      	subs	r3, #1
 8002414:	041b      	lsls	r3, r3, #16
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	491b      	ldr	r1, [pc, #108]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <HAL_RCC_OscConfig+0x478>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7ff faa9 	bl	8001980 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002432:	f7ff faa5 	bl	8001980 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e05c      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x416>
 8002450:	e054      	b.n	80024fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <HAL_RCC_OscConfig+0x478>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7ff fa92 	bl	8001980 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002460:	f7ff fa8e 	bl	8001980 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e045      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_RCC_OscConfig+0x470>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x444>
 800247e:	e03d      	b.n	80024fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d107      	bne.n	8002498 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e038      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
 800248c:	40023800 	.word	0x40023800
 8002490:	40007000 	.word	0x40007000
 8002494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_RCC_OscConfig+0x4ec>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d028      	beq.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d121      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d11a      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024c8:	4013      	ands	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d111      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	3b01      	subs	r3, #1
 80024e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800

0800250c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0cc      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b68      	ldr	r3, [pc, #416]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d90c      	bls.n	8002548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b65      	ldr	r3, [pc, #404]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0b8      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002560:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800256a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002578:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a52      	ldr	r2, [pc, #328]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002584:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	494d      	ldr	r1, [pc, #308]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d044      	beq.n	800262c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d119      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e07f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d003      	beq.n	80025ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ca:	4b3f      	ldr	r3, [pc, #252]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e06f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e067      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4934      	ldr	r1, [pc, #208]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025fc:	f7ff f9c0 	bl	8001980 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	e00a      	b.n	800261a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7ff f9bc 	bl	8001980 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e04f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 020c 	and.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	429a      	cmp	r2, r3
 800262a:	d1eb      	bne.n	8002604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800262c:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d20c      	bcs.n	8002654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002642:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e032      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4916      	ldr	r1, [pc, #88]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	490e      	ldr	r1, [pc, #56]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002692:	f000 f821 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8002696:	4602      	mov	r2, r0
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	490a      	ldr	r1, [pc, #40]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	5ccb      	ldrb	r3, [r1, r3]
 80026a6:	fa22 f303 	lsr.w	r3, r2, r3
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff f920 	bl	80018f8 <HAL_InitTick>

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023c00 	.word	0x40023c00
 80026c8:	40023800 	.word	0x40023800
 80026cc:	08004430 	.word	0x08004430
 80026d0:	20000000 	.word	0x20000000
 80026d4:	20000004 	.word	0x20000004

080026d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026dc:	b094      	sub	sp, #80	; 0x50
 80026de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	647b      	str	r3, [r7, #68]	; 0x44
 80026e4:	2300      	movs	r3, #0
 80026e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026e8:	2300      	movs	r3, #0
 80026ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f0:	4b79      	ldr	r3, [pc, #484]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d00d      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x40>
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	f200 80e1 	bhi.w	80028c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x34>
 8002706:	2b04      	cmp	r3, #4
 8002708:	d003      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x3a>
 800270a:	e0db      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800270c:	4b73      	ldr	r3, [pc, #460]	; (80028dc <HAL_RCC_GetSysClockFreq+0x204>)
 800270e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002710:	e0db      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002712:	4b73      	ldr	r3, [pc, #460]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002714:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002716:	e0d8      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002718:	4b6f      	ldr	r3, [pc, #444]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002720:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002722:	4b6d      	ldr	r3, [pc, #436]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d063      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272e:	4b6a      	ldr	r3, [pc, #424]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	099b      	lsrs	r3, r3, #6
 8002734:	2200      	movs	r2, #0
 8002736:	63bb      	str	r3, [r7, #56]	; 0x38
 8002738:	63fa      	str	r2, [r7, #60]	; 0x3c
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002740:	633b      	str	r3, [r7, #48]	; 0x30
 8002742:	2300      	movs	r3, #0
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
 8002746:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800274a:	4622      	mov	r2, r4
 800274c:	462b      	mov	r3, r5
 800274e:	f04f 0000 	mov.w	r0, #0
 8002752:	f04f 0100 	mov.w	r1, #0
 8002756:	0159      	lsls	r1, r3, #5
 8002758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800275c:	0150      	lsls	r0, r2, #5
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4621      	mov	r1, r4
 8002764:	1a51      	subs	r1, r2, r1
 8002766:	6139      	str	r1, [r7, #16]
 8002768:	4629      	mov	r1, r5
 800276a:	eb63 0301 	sbc.w	r3, r3, r1
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800277c:	4659      	mov	r1, fp
 800277e:	018b      	lsls	r3, r1, #6
 8002780:	4651      	mov	r1, sl
 8002782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002786:	4651      	mov	r1, sl
 8002788:	018a      	lsls	r2, r1, #6
 800278a:	4651      	mov	r1, sl
 800278c:	ebb2 0801 	subs.w	r8, r2, r1
 8002790:	4659      	mov	r1, fp
 8002792:	eb63 0901 	sbc.w	r9, r3, r1
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027aa:	4690      	mov	r8, r2
 80027ac:	4699      	mov	r9, r3
 80027ae:	4623      	mov	r3, r4
 80027b0:	eb18 0303 	adds.w	r3, r8, r3
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	462b      	mov	r3, r5
 80027b8:	eb49 0303 	adc.w	r3, r9, r3
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027ca:	4629      	mov	r1, r5
 80027cc:	024b      	lsls	r3, r1, #9
 80027ce:	4621      	mov	r1, r4
 80027d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027d4:	4621      	mov	r1, r4
 80027d6:	024a      	lsls	r2, r1, #9
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027de:	2200      	movs	r2, #0
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027e8:	f7fe f970 	bl	8000acc <__aeabi_uldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4613      	mov	r3, r2
 80027f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027f4:	e058      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f6:	4b38      	ldr	r3, [pc, #224]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	099b      	lsrs	r3, r3, #6
 80027fc:	2200      	movs	r2, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	4611      	mov	r1, r2
 8002802:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002806:	623b      	str	r3, [r7, #32]
 8002808:	2300      	movs	r3, #0
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
 800280c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002810:	4642      	mov	r2, r8
 8002812:	464b      	mov	r3, r9
 8002814:	f04f 0000 	mov.w	r0, #0
 8002818:	f04f 0100 	mov.w	r1, #0
 800281c:	0159      	lsls	r1, r3, #5
 800281e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002822:	0150      	lsls	r0, r2, #5
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4641      	mov	r1, r8
 800282a:	ebb2 0a01 	subs.w	sl, r2, r1
 800282e:	4649      	mov	r1, r9
 8002830:	eb63 0b01 	sbc.w	fp, r3, r1
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002840:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002844:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002848:	ebb2 040a 	subs.w	r4, r2, sl
 800284c:	eb63 050b 	sbc.w	r5, r3, fp
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	00eb      	lsls	r3, r5, #3
 800285a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800285e:	00e2      	lsls	r2, r4, #3
 8002860:	4614      	mov	r4, r2
 8002862:	461d      	mov	r5, r3
 8002864:	4643      	mov	r3, r8
 8002866:	18e3      	adds	r3, r4, r3
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	464b      	mov	r3, r9
 800286c:	eb45 0303 	adc.w	r3, r5, r3
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800287e:	4629      	mov	r1, r5
 8002880:	028b      	lsls	r3, r1, #10
 8002882:	4621      	mov	r1, r4
 8002884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002888:	4621      	mov	r1, r4
 800288a:	028a      	lsls	r2, r1, #10
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002892:	2200      	movs	r2, #0
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	61fa      	str	r2, [r7, #28]
 8002898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800289c:	f7fe f916 	bl	8000acc <__aeabi_uldivmod>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4613      	mov	r3, r2
 80028a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	0c1b      	lsrs	r3, r3, #16
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	3301      	adds	r3, #1
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028c2:	e002      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCC_GetSysClockFreq+0x204>)
 80028c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3750      	adds	r7, #80	; 0x50
 80028d0:	46bd      	mov	sp, r7
 80028d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	00f42400 	.word	0x00f42400
 80028e0:	007a1200 	.word	0x007a1200

080028e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000000 	.word	0x20000000

080028fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002900:	f7ff fff0 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	0a9b      	lsrs	r3, r3, #10
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	; (8002920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40023800 	.word	0x40023800
 8002920:	08004440 	.word	0x08004440

08002924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002928:	f7ff ffdc 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	0b5b      	lsrs	r3, r3, #13
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	4903      	ldr	r1, [pc, #12]	; (8002948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800
 8002948:	08004440 	.word	0x08004440

0800294c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e03f      	b.n	80029de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe fe1c 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2224      	movs	r2, #36	; 0x24
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800298e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fddf 	bl	8003554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b08a      	sub	sp, #40	; 0x28
 80029ea:	af02      	add	r7, sp, #8
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d17c      	bne.n	8002b00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <HAL_UART_Transmit+0x2c>
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e075      	b.n	8002b02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_UART_Transmit+0x3e>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e06e      	b.n	8002b02 <HAL_UART_Transmit+0x11c>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2221      	movs	r2, #33	; 0x21
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a3a:	f7fe ffa1 	bl	8001980 <HAL_GetTick>
 8002a3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	88fa      	ldrh	r2, [r7, #6]
 8002a44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	88fa      	ldrh	r2, [r7, #6]
 8002a4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a54:	d108      	bne.n	8002a68 <HAL_UART_Transmit+0x82>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d104      	bne.n	8002a68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	e003      	b.n	8002a70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a78:	e02a      	b.n	8002ad0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2200      	movs	r2, #0
 8002a82:	2180      	movs	r1, #128	; 0x80
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fb1f 	bl	80030c8 <UART_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e036      	b.n	8002b02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10b      	bne.n	8002ab2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	3302      	adds	r3, #2
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	e007      	b.n	8002ac2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1cf      	bne.n	8002a7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2140      	movs	r1, #64	; 0x40
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 faef 	bl	80030c8 <UART_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e006      	b.n	8002b02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e000      	b.n	8002b02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
  }
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3720      	adds	r7, #32
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	4613      	mov	r3, r2
 8002b16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d11d      	bne.n	8002b60 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_UART_Receive_IT+0x26>
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e016      	b.n	8002b62 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_UART_Receive_IT+0x38>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e00f      	b.n	8002b62 <HAL_UART_Receive_IT+0x58>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fb24 	bl	80031a4 <UART_Start_Receive_IT>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	e000      	b.n	8002b62 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002b60:	2302      	movs	r3, #2
  }
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b0ba      	sub	sp, #232	; 0xe8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10f      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x66>
 8002bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fc07 	bl	80033de <UART_Receive_IT>
      return;
 8002bd0:	e256      	b.n	8003080 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002bd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80de 	beq.w	8002d98 <HAL_UART_IRQHandler+0x22c>
 8002bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80d1 	beq.w	8002d98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00b      	beq.n	8002c1a <HAL_UART_IRQHandler+0xae>
 8002c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00b      	beq.n	8002c3e <HAL_UART_IRQHandler+0xd2>
 8002c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f043 0202 	orr.w	r2, r3, #2
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <HAL_UART_IRQHandler+0xf6>
 8002c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f043 0204 	orr.w	r2, r3, #4
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d011      	beq.n	8002c92 <HAL_UART_IRQHandler+0x126>
 8002c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d105      	bne.n	8002c86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f043 0208 	orr.w	r2, r3, #8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 81ed 	beq.w	8003076 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x14e>
 8002ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fb92 	bl	80033de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc4:	2b40      	cmp	r3, #64	; 0x40
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d103      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x17a>
 8002cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d04f      	beq.n	8002d86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fa9a 	bl	8003220 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf6:	2b40      	cmp	r3, #64	; 0x40
 8002cf8:	d141      	bne.n	8002d7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3314      	adds	r3, #20
 8002d00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d08:	e853 3f00 	ldrex	r3, [r3]
 8002d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3314      	adds	r3, #20
 8002d22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d36:	e841 2300 	strex	r3, r2, [r1]
 8002d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1d9      	bne.n	8002cfa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d013      	beq.n	8002d76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d52:	4a7d      	ldr	r2, [pc, #500]	; (8002f48 <HAL_UART_IRQHandler+0x3dc>)
 8002d54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe ff9d 	bl	8001c9a <HAL_DMA_Abort_IT>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d016      	beq.n	8002d94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d70:	4610      	mov	r0, r2
 8002d72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d74:	e00e      	b.n	8002d94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f990 	bl	800309c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7c:	e00a      	b.n	8002d94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f98c 	bl	800309c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d84:	e006      	b.n	8002d94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f988 	bl	800309c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d92:	e170      	b.n	8003076 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d94:	bf00      	nop
    return;
 8002d96:	e16e      	b.n	8003076 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	f040 814a 	bne.w	8003036 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 8143 	beq.w	8003036 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 813c 	beq.w	8003036 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b40      	cmp	r3, #64	; 0x40
 8002de0:	f040 80b4 	bne.w	8002f4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002df0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8140 	beq.w	800307a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e02:	429a      	cmp	r2, r3
 8002e04:	f080 8139 	bcs.w	800307a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1a:	f000 8088 	beq.w	8002f2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	330c      	adds	r3, #12
 8002e24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e2c:	e853 3f00 	ldrex	r3, [r3]
 8002e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e5a:	e841 2300 	strex	r3, r2, [r1]
 8002e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1d9      	bne.n	8002e1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	3314      	adds	r3, #20
 8002e70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e74:	e853 3f00 	ldrex	r3, [r3]
 8002e78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3314      	adds	r3, #20
 8002e8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e9a:	e841 2300 	strex	r3, r2, [r1]
 8002e9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1e1      	bne.n	8002e6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3314      	adds	r3, #20
 8002eac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eb0:	e853 3f00 	ldrex	r3, [r3]
 8002eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3314      	adds	r3, #20
 8002ec6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002eca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ecc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ece:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ed0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ed2:	e841 2300 	strex	r3, r2, [r1]
 8002ed6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1e3      	bne.n	8002ea6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	330c      	adds	r3, #12
 8002ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef6:	e853 3f00 	ldrex	r3, [r3]
 8002efa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002efe:	f023 0310 	bic.w	r3, r3, #16
 8002f02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	330c      	adds	r3, #12
 8002f0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f10:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f18:	e841 2300 	strex	r3, r2, [r1]
 8002f1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e3      	bne.n	8002eec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe fe46 	bl	8001bba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f8b6 	bl	80030b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f44:	e099      	b.n	800307a <HAL_UART_IRQHandler+0x50e>
 8002f46:	bf00      	nop
 8002f48:	080032e7 	.word	0x080032e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 808b 	beq.w	800307e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002f68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 8086 	beq.w	800307e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	330c      	adds	r3, #12
 8002f78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7c:	e853 3f00 	ldrex	r3, [r3]
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	330c      	adds	r3, #12
 8002f92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f96:	647a      	str	r2, [r7, #68]	; 0x44
 8002f98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1e3      	bne.n	8002f72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3314      	adds	r3, #20
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	e853 3f00 	ldrex	r3, [r3]
 8002fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3314      	adds	r3, #20
 8002fca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002fce:	633a      	str	r2, [r7, #48]	; 0x30
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd6:	e841 2300 	strex	r3, r2, [r1]
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1e3      	bne.n	8002faa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	330c      	adds	r3, #12
 8002ff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	e853 3f00 	ldrex	r3, [r3]
 8002ffe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0310 	bic.w	r3, r3, #16
 8003006:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	330c      	adds	r3, #12
 8003010:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003014:	61fa      	str	r2, [r7, #28]
 8003016:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003018:	69b9      	ldr	r1, [r7, #24]
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	e841 2300 	strex	r3, r2, [r1]
 8003020:	617b      	str	r3, [r7, #20]
   return(result);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1e3      	bne.n	8002ff0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003028:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800302c:	4619      	mov	r1, r3
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f83e 	bl	80030b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003034:	e023      	b.n	800307e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_UART_IRQHandler+0x4ea>
 8003042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f95d 	bl	800330e <UART_Transmit_IT>
    return;
 8003054:	e014      	b.n	8003080 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00e      	beq.n	8003080 <HAL_UART_IRQHandler+0x514>
 8003062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f99d 	bl	80033ae <UART_EndTransmit_IT>
    return;
 8003074:	e004      	b.n	8003080 <HAL_UART_IRQHandler+0x514>
    return;
 8003076:	bf00      	nop
 8003078:	e002      	b.n	8003080 <HAL_UART_IRQHandler+0x514>
      return;
 800307a:	bf00      	nop
 800307c:	e000      	b.n	8003080 <HAL_UART_IRQHandler+0x514>
      return;
 800307e:	bf00      	nop
  }
}
 8003080:	37e8      	adds	r7, #232	; 0xe8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop

08003088 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b090      	sub	sp, #64	; 0x40
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030d8:	e050      	b.n	800317c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d04c      	beq.n	800317c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80030e8:	f7fe fc4a 	bl	8001980 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d241      	bcs.n	800317c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	330c      	adds	r3, #12
 80030fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003102:	e853 3f00 	ldrex	r3, [r3]
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800310e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	330c      	adds	r3, #12
 8003116:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003118:	637a      	str	r2, [r7, #52]	; 0x34
 800311a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800311e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003120:	e841 2300 	strex	r3, r2, [r1]
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e5      	bne.n	80030f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3314      	adds	r3, #20
 8003132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	e853 3f00 	ldrex	r3, [r3]
 800313a:	613b      	str	r3, [r7, #16]
   return(result);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f023 0301 	bic.w	r3, r3, #1
 8003142:	63bb      	str	r3, [r7, #56]	; 0x38
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3314      	adds	r3, #20
 800314a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800314c:	623a      	str	r2, [r7, #32]
 800314e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003150:	69f9      	ldr	r1, [r7, #28]
 8003152:	6a3a      	ldr	r2, [r7, #32]
 8003154:	e841 2300 	strex	r3, r2, [r1]
 8003158:	61bb      	str	r3, [r7, #24]
   return(result);
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e5      	bne.n	800312c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e00f      	b.n	800319c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	429a      	cmp	r2, r3
 8003198:	d09f      	beq.n	80030da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3740      	adds	r7, #64	; 0x40
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	4613      	mov	r3, r2
 80031b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	88fa      	ldrh	r2, [r7, #6]
 80031c2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2222      	movs	r2, #34	; 0x22
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031f0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0220 	orr.w	r2, r2, #32
 8003210:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003220:	b480      	push	{r7}
 8003222:	b095      	sub	sp, #84	; 0x54
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	330c      	adds	r3, #12
 800322e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800323e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	330c      	adds	r3, #12
 8003246:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003248:	643a      	str	r2, [r7, #64]	; 0x40
 800324a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800324e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003250:	e841 2300 	strex	r3, r2, [r1]
 8003254:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e5      	bne.n	8003228 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3314      	adds	r3, #20
 8003262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	e853 3f00 	ldrex	r3, [r3]
 800326a:	61fb      	str	r3, [r7, #28]
   return(result);
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	64bb      	str	r3, [r7, #72]	; 0x48
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3314      	adds	r3, #20
 800327a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800327c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e5      	bne.n	800325c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	2b01      	cmp	r3, #1
 8003296:	d119      	bne.n	80032cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	330c      	adds	r3, #12
 800329e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	e853 3f00 	ldrex	r3, [r3]
 80032a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f023 0310 	bic.w	r3, r3, #16
 80032ae:	647b      	str	r3, [r7, #68]	; 0x44
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	330c      	adds	r3, #12
 80032b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032b8:	61ba      	str	r2, [r7, #24]
 80032ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032bc:	6979      	ldr	r1, [r7, #20]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	e841 2300 	strex	r3, r2, [r1]
 80032c4:	613b      	str	r3, [r7, #16]
   return(result);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1e5      	bne.n	8003298 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032da:	bf00      	nop
 80032dc:	3754      	adds	r7, #84	; 0x54
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f7ff fecb 	bl	800309c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b21      	cmp	r3, #33	; 0x21
 8003320:	d13e      	bne.n	80033a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332a:	d114      	bne.n	8003356 <UART_Transmit_IT+0x48>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d110      	bne.n	8003356 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003348:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	1c9a      	adds	r2, r3, #2
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	621a      	str	r2, [r3, #32]
 8003354:	e008      	b.n	8003368 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	1c59      	adds	r1, r3, #1
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6211      	str	r1, [r2, #32]
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29b      	uxth	r3, r3
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4619      	mov	r1, r3
 8003376:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10f      	bne.n	800339c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800338a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800339a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	e000      	b.n	80033a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033a0:	2302      	movs	r3, #2
  }
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff fe5a 	bl	8003088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b08c      	sub	sp, #48	; 0x30
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b22      	cmp	r3, #34	; 0x22
 80033f0:	f040 80ab 	bne.w	800354a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033fc:	d117      	bne.n	800342e <UART_Receive_IT+0x50>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d113      	bne.n	800342e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003406:	2300      	movs	r3, #0
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	b29b      	uxth	r3, r3
 8003418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800341c:	b29a      	uxth	r2, r3
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	1c9a      	adds	r2, r3, #2
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	629a      	str	r2, [r3, #40]	; 0x28
 800342c:	e026      	b.n	800347c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003434:	2300      	movs	r3, #0
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003440:	d007      	beq.n	8003452 <UART_Receive_IT+0x74>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <UART_Receive_IT+0x82>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	e008      	b.n	8003472 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800346c:	b2da      	uxtb	r2, r3
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29b      	uxth	r3, r3
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4619      	mov	r1, r3
 800348a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800348c:	2b00      	cmp	r3, #0
 800348e:	d15a      	bne.n	8003546 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0220 	bic.w	r2, r2, #32
 800349e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d135      	bne.n	800353c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	330c      	adds	r3, #12
 80034dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	613b      	str	r3, [r7, #16]
   return(result);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f023 0310 	bic.w	r3, r3, #16
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	330c      	adds	r3, #12
 80034f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f6:	623a      	str	r2, [r7, #32]
 80034f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	69f9      	ldr	r1, [r7, #28]
 80034fc:	6a3a      	ldr	r2, [r7, #32]
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	61bb      	str	r3, [r7, #24]
   return(result);
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e5      	bne.n	80034d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b10      	cmp	r3, #16
 8003516:	d10a      	bne.n	800352e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003532:	4619      	mov	r1, r3
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff fdbb 	bl	80030b0 <HAL_UARTEx_RxEventCallback>
 800353a:	e002      	b.n	8003542 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7fd fd63 	bl	8001008 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	e002      	b.n	800354c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	e000      	b.n	800354c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800354a:	2302      	movs	r3, #2
  }
}
 800354c:	4618      	mov	r0, r3
 800354e:	3730      	adds	r7, #48	; 0x30
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003558:	b0c0      	sub	sp, #256	; 0x100
 800355a:	af00      	add	r7, sp, #0
 800355c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003570:	68d9      	ldr	r1, [r3, #12]
 8003572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	ea40 0301 	orr.w	r3, r0, r1
 800357c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800357e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	431a      	orrs	r2, r3
 800358c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	431a      	orrs	r2, r3
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035ac:	f021 010c 	bic.w	r1, r1, #12
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035ba:	430b      	orrs	r3, r1
 80035bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ce:	6999      	ldr	r1, [r3, #24]
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	ea40 0301 	orr.w	r3, r0, r1
 80035da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	4b8f      	ldr	r3, [pc, #572]	; (8003820 <UART_SetConfig+0x2cc>)
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d005      	beq.n	80035f4 <UART_SetConfig+0xa0>
 80035e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b8d      	ldr	r3, [pc, #564]	; (8003824 <UART_SetConfig+0x2d0>)
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d104      	bne.n	80035fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035f4:	f7ff f996 	bl	8002924 <HAL_RCC_GetPCLK2Freq>
 80035f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035fc:	e003      	b.n	8003606 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035fe:	f7ff f97d 	bl	80028fc <HAL_RCC_GetPCLK1Freq>
 8003602:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003610:	f040 810c 	bne.w	800382c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003618:	2200      	movs	r2, #0
 800361a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800361e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003622:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003626:	4622      	mov	r2, r4
 8003628:	462b      	mov	r3, r5
 800362a:	1891      	adds	r1, r2, r2
 800362c:	65b9      	str	r1, [r7, #88]	; 0x58
 800362e:	415b      	adcs	r3, r3
 8003630:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003632:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003636:	4621      	mov	r1, r4
 8003638:	eb12 0801 	adds.w	r8, r2, r1
 800363c:	4629      	mov	r1, r5
 800363e:	eb43 0901 	adc.w	r9, r3, r1
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800364e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003652:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003656:	4690      	mov	r8, r2
 8003658:	4699      	mov	r9, r3
 800365a:	4623      	mov	r3, r4
 800365c:	eb18 0303 	adds.w	r3, r8, r3
 8003660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003664:	462b      	mov	r3, r5
 8003666:	eb49 0303 	adc.w	r3, r9, r3
 800366a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800367a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800367e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003682:	460b      	mov	r3, r1
 8003684:	18db      	adds	r3, r3, r3
 8003686:	653b      	str	r3, [r7, #80]	; 0x50
 8003688:	4613      	mov	r3, r2
 800368a:	eb42 0303 	adc.w	r3, r2, r3
 800368e:	657b      	str	r3, [r7, #84]	; 0x54
 8003690:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003694:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003698:	f7fd fa18 	bl	8000acc <__aeabi_uldivmod>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4b61      	ldr	r3, [pc, #388]	; (8003828 <UART_SetConfig+0x2d4>)
 80036a2:	fba3 2302 	umull	r2, r3, r3, r2
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	011c      	lsls	r4, r3, #4
 80036aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ae:	2200      	movs	r2, #0
 80036b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80036bc:	4642      	mov	r2, r8
 80036be:	464b      	mov	r3, r9
 80036c0:	1891      	adds	r1, r2, r2
 80036c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80036c4:	415b      	adcs	r3, r3
 80036c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036cc:	4641      	mov	r1, r8
 80036ce:	eb12 0a01 	adds.w	sl, r2, r1
 80036d2:	4649      	mov	r1, r9
 80036d4:	eb43 0b01 	adc.w	fp, r3, r1
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036ec:	4692      	mov	sl, r2
 80036ee:	469b      	mov	fp, r3
 80036f0:	4643      	mov	r3, r8
 80036f2:	eb1a 0303 	adds.w	r3, sl, r3
 80036f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036fa:	464b      	mov	r3, r9
 80036fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003700:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003710:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003714:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003718:	460b      	mov	r3, r1
 800371a:	18db      	adds	r3, r3, r3
 800371c:	643b      	str	r3, [r7, #64]	; 0x40
 800371e:	4613      	mov	r3, r2
 8003720:	eb42 0303 	adc.w	r3, r2, r3
 8003724:	647b      	str	r3, [r7, #68]	; 0x44
 8003726:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800372a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800372e:	f7fd f9cd 	bl	8000acc <__aeabi_uldivmod>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4611      	mov	r1, r2
 8003738:	4b3b      	ldr	r3, [pc, #236]	; (8003828 <UART_SetConfig+0x2d4>)
 800373a:	fba3 2301 	umull	r2, r3, r3, r1
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	2264      	movs	r2, #100	; 0x64
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	1acb      	subs	r3, r1, r3
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800374e:	4b36      	ldr	r3, [pc, #216]	; (8003828 <UART_SetConfig+0x2d4>)
 8003750:	fba3 2302 	umull	r2, r3, r3, r2
 8003754:	095b      	lsrs	r3, r3, #5
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800375c:	441c      	add	r4, r3
 800375e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003762:	2200      	movs	r2, #0
 8003764:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003768:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800376c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003770:	4642      	mov	r2, r8
 8003772:	464b      	mov	r3, r9
 8003774:	1891      	adds	r1, r2, r2
 8003776:	63b9      	str	r1, [r7, #56]	; 0x38
 8003778:	415b      	adcs	r3, r3
 800377a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800377c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003780:	4641      	mov	r1, r8
 8003782:	1851      	adds	r1, r2, r1
 8003784:	6339      	str	r1, [r7, #48]	; 0x30
 8003786:	4649      	mov	r1, r9
 8003788:	414b      	adcs	r3, r1
 800378a:	637b      	str	r3, [r7, #52]	; 0x34
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003798:	4659      	mov	r1, fp
 800379a:	00cb      	lsls	r3, r1, #3
 800379c:	4651      	mov	r1, sl
 800379e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037a2:	4651      	mov	r1, sl
 80037a4:	00ca      	lsls	r2, r1, #3
 80037a6:	4610      	mov	r0, r2
 80037a8:	4619      	mov	r1, r3
 80037aa:	4603      	mov	r3, r0
 80037ac:	4642      	mov	r2, r8
 80037ae:	189b      	adds	r3, r3, r2
 80037b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037b4:	464b      	mov	r3, r9
 80037b6:	460a      	mov	r2, r1
 80037b8:	eb42 0303 	adc.w	r3, r2, r3
 80037bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80037d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037d4:	460b      	mov	r3, r1
 80037d6:	18db      	adds	r3, r3, r3
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037da:	4613      	mov	r3, r2
 80037dc:	eb42 0303 	adc.w	r3, r2, r3
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037ea:	f7fd f96f 	bl	8000acc <__aeabi_uldivmod>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <UART_SetConfig+0x2d4>)
 80037f4:	fba3 1302 	umull	r1, r3, r3, r2
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	2164      	movs	r1, #100	; 0x64
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	3332      	adds	r3, #50	; 0x32
 8003806:	4a08      	ldr	r2, [pc, #32]	; (8003828 <UART_SetConfig+0x2d4>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	f003 0207 	and.w	r2, r3, #7
 8003812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4422      	add	r2, r4
 800381a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800381c:	e105      	b.n	8003a2a <UART_SetConfig+0x4d6>
 800381e:	bf00      	nop
 8003820:	40011000 	.word	0x40011000
 8003824:	40011400 	.word	0x40011400
 8003828:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800382c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003830:	2200      	movs	r2, #0
 8003832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003836:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800383a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800383e:	4642      	mov	r2, r8
 8003840:	464b      	mov	r3, r9
 8003842:	1891      	adds	r1, r2, r2
 8003844:	6239      	str	r1, [r7, #32]
 8003846:	415b      	adcs	r3, r3
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
 800384a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800384e:	4641      	mov	r1, r8
 8003850:	1854      	adds	r4, r2, r1
 8003852:	4649      	mov	r1, r9
 8003854:	eb43 0501 	adc.w	r5, r3, r1
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	00eb      	lsls	r3, r5, #3
 8003862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003866:	00e2      	lsls	r2, r4, #3
 8003868:	4614      	mov	r4, r2
 800386a:	461d      	mov	r5, r3
 800386c:	4643      	mov	r3, r8
 800386e:	18e3      	adds	r3, r4, r3
 8003870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003874:	464b      	mov	r3, r9
 8003876:	eb45 0303 	adc.w	r3, r5, r3
 800387a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800387e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800388a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800389a:	4629      	mov	r1, r5
 800389c:	008b      	lsls	r3, r1, #2
 800389e:	4621      	mov	r1, r4
 80038a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038a4:	4621      	mov	r1, r4
 80038a6:	008a      	lsls	r2, r1, #2
 80038a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038ac:	f7fd f90e 	bl	8000acc <__aeabi_uldivmod>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4b60      	ldr	r3, [pc, #384]	; (8003a38 <UART_SetConfig+0x4e4>)
 80038b6:	fba3 2302 	umull	r2, r3, r3, r2
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	011c      	lsls	r4, r3, #4
 80038be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80038d0:	4642      	mov	r2, r8
 80038d2:	464b      	mov	r3, r9
 80038d4:	1891      	adds	r1, r2, r2
 80038d6:	61b9      	str	r1, [r7, #24]
 80038d8:	415b      	adcs	r3, r3
 80038da:	61fb      	str	r3, [r7, #28]
 80038dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e0:	4641      	mov	r1, r8
 80038e2:	1851      	adds	r1, r2, r1
 80038e4:	6139      	str	r1, [r7, #16]
 80038e6:	4649      	mov	r1, r9
 80038e8:	414b      	adcs	r3, r1
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038f8:	4659      	mov	r1, fp
 80038fa:	00cb      	lsls	r3, r1, #3
 80038fc:	4651      	mov	r1, sl
 80038fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003902:	4651      	mov	r1, sl
 8003904:	00ca      	lsls	r2, r1, #3
 8003906:	4610      	mov	r0, r2
 8003908:	4619      	mov	r1, r3
 800390a:	4603      	mov	r3, r0
 800390c:	4642      	mov	r2, r8
 800390e:	189b      	adds	r3, r3, r2
 8003910:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003914:	464b      	mov	r3, r9
 8003916:	460a      	mov	r2, r1
 8003918:	eb42 0303 	adc.w	r3, r2, r3
 800391c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	67bb      	str	r3, [r7, #120]	; 0x78
 800392a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003938:	4649      	mov	r1, r9
 800393a:	008b      	lsls	r3, r1, #2
 800393c:	4641      	mov	r1, r8
 800393e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003942:	4641      	mov	r1, r8
 8003944:	008a      	lsls	r2, r1, #2
 8003946:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800394a:	f7fd f8bf 	bl	8000acc <__aeabi_uldivmod>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4b39      	ldr	r3, [pc, #228]	; (8003a38 <UART_SetConfig+0x4e4>)
 8003954:	fba3 1302 	umull	r1, r3, r3, r2
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	2164      	movs	r1, #100	; 0x64
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	3332      	adds	r3, #50	; 0x32
 8003966:	4a34      	ldr	r2, [pc, #208]	; (8003a38 <UART_SetConfig+0x4e4>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003972:	441c      	add	r4, r3
 8003974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003978:	2200      	movs	r2, #0
 800397a:	673b      	str	r3, [r7, #112]	; 0x70
 800397c:	677a      	str	r2, [r7, #116]	; 0x74
 800397e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003982:	4642      	mov	r2, r8
 8003984:	464b      	mov	r3, r9
 8003986:	1891      	adds	r1, r2, r2
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	415b      	adcs	r3, r3
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003992:	4641      	mov	r1, r8
 8003994:	1851      	adds	r1, r2, r1
 8003996:	6039      	str	r1, [r7, #0]
 8003998:	4649      	mov	r1, r9
 800399a:	414b      	adcs	r3, r1
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039aa:	4659      	mov	r1, fp
 80039ac:	00cb      	lsls	r3, r1, #3
 80039ae:	4651      	mov	r1, sl
 80039b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039b4:	4651      	mov	r1, sl
 80039b6:	00ca      	lsls	r2, r1, #3
 80039b8:	4610      	mov	r0, r2
 80039ba:	4619      	mov	r1, r3
 80039bc:	4603      	mov	r3, r0
 80039be:	4642      	mov	r2, r8
 80039c0:	189b      	adds	r3, r3, r2
 80039c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80039c4:	464b      	mov	r3, r9
 80039c6:	460a      	mov	r2, r1
 80039c8:	eb42 0303 	adc.w	r3, r2, r3
 80039cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	663b      	str	r3, [r7, #96]	; 0x60
 80039d8:	667a      	str	r2, [r7, #100]	; 0x64
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039e6:	4649      	mov	r1, r9
 80039e8:	008b      	lsls	r3, r1, #2
 80039ea:	4641      	mov	r1, r8
 80039ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039f0:	4641      	mov	r1, r8
 80039f2:	008a      	lsls	r2, r1, #2
 80039f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039f8:	f7fd f868 	bl	8000acc <__aeabi_uldivmod>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <UART_SetConfig+0x4e4>)
 8003a02:	fba3 1302 	umull	r1, r3, r3, r2
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2164      	movs	r1, #100	; 0x64
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	3332      	adds	r3, #50	; 0x32
 8003a14:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <UART_SetConfig+0x4e4>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	f003 020f 	and.w	r2, r3, #15
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4422      	add	r2, r4
 8003a28:	609a      	str	r2, [r3, #8]
}
 8003a2a:	bf00      	nop
 8003a2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a30:	46bd      	mov	sp, r7
 8003a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a36:	bf00      	nop
 8003a38:	51eb851f 	.word	0x51eb851f

08003a3c <__errno>:
 8003a3c:	4b01      	ldr	r3, [pc, #4]	; (8003a44 <__errno+0x8>)
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	2000000c 	.word	0x2000000c

08003a48 <__libc_init_array>:
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	4d0d      	ldr	r5, [pc, #52]	; (8003a80 <__libc_init_array+0x38>)
 8003a4c:	4c0d      	ldr	r4, [pc, #52]	; (8003a84 <__libc_init_array+0x3c>)
 8003a4e:	1b64      	subs	r4, r4, r5
 8003a50:	10a4      	asrs	r4, r4, #2
 8003a52:	2600      	movs	r6, #0
 8003a54:	42a6      	cmp	r6, r4
 8003a56:	d109      	bne.n	8003a6c <__libc_init_array+0x24>
 8003a58:	4d0b      	ldr	r5, [pc, #44]	; (8003a88 <__libc_init_array+0x40>)
 8003a5a:	4c0c      	ldr	r4, [pc, #48]	; (8003a8c <__libc_init_array+0x44>)
 8003a5c:	f000 fcb2 	bl	80043c4 <_init>
 8003a60:	1b64      	subs	r4, r4, r5
 8003a62:	10a4      	asrs	r4, r4, #2
 8003a64:	2600      	movs	r6, #0
 8003a66:	42a6      	cmp	r6, r4
 8003a68:	d105      	bne.n	8003a76 <__libc_init_array+0x2e>
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}
 8003a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a70:	4798      	blx	r3
 8003a72:	3601      	adds	r6, #1
 8003a74:	e7ee      	b.n	8003a54 <__libc_init_array+0xc>
 8003a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a7a:	4798      	blx	r3
 8003a7c:	3601      	adds	r6, #1
 8003a7e:	e7f2      	b.n	8003a66 <__libc_init_array+0x1e>
 8003a80:	08004484 	.word	0x08004484
 8003a84:	08004484 	.word	0x08004484
 8003a88:	08004484 	.word	0x08004484
 8003a8c:	08004488 	.word	0x08004488

08003a90 <malloc>:
 8003a90:	4b02      	ldr	r3, [pc, #8]	; (8003a9c <malloc+0xc>)
 8003a92:	4601      	mov	r1, r0
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	f000 b87f 	b.w	8003b98 <_malloc_r>
 8003a9a:	bf00      	nop
 8003a9c:	2000000c 	.word	0x2000000c

08003aa0 <free>:
 8003aa0:	4b02      	ldr	r3, [pc, #8]	; (8003aac <free+0xc>)
 8003aa2:	4601      	mov	r1, r0
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	f000 b80b 	b.w	8003ac0 <_free_r>
 8003aaa:	bf00      	nop
 8003aac:	2000000c 	.word	0x2000000c

08003ab0 <memset>:
 8003ab0:	4402      	add	r2, r0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d100      	bne.n	8003aba <memset+0xa>
 8003ab8:	4770      	bx	lr
 8003aba:	f803 1b01 	strb.w	r1, [r3], #1
 8003abe:	e7f9      	b.n	8003ab4 <memset+0x4>

08003ac0 <_free_r>:
 8003ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ac2:	2900      	cmp	r1, #0
 8003ac4:	d044      	beq.n	8003b50 <_free_r+0x90>
 8003ac6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aca:	9001      	str	r0, [sp, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f1a1 0404 	sub.w	r4, r1, #4
 8003ad2:	bfb8      	it	lt
 8003ad4:	18e4      	addlt	r4, r4, r3
 8003ad6:	f000 f917 	bl	8003d08 <__malloc_lock>
 8003ada:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <_free_r+0x94>)
 8003adc:	9801      	ldr	r0, [sp, #4]
 8003ade:	6813      	ldr	r3, [r2, #0]
 8003ae0:	b933      	cbnz	r3, 8003af0 <_free_r+0x30>
 8003ae2:	6063      	str	r3, [r4, #4]
 8003ae4:	6014      	str	r4, [r2, #0]
 8003ae6:	b003      	add	sp, #12
 8003ae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003aec:	f000 b912 	b.w	8003d14 <__malloc_unlock>
 8003af0:	42a3      	cmp	r3, r4
 8003af2:	d908      	bls.n	8003b06 <_free_r+0x46>
 8003af4:	6825      	ldr	r5, [r4, #0]
 8003af6:	1961      	adds	r1, r4, r5
 8003af8:	428b      	cmp	r3, r1
 8003afa:	bf01      	itttt	eq
 8003afc:	6819      	ldreq	r1, [r3, #0]
 8003afe:	685b      	ldreq	r3, [r3, #4]
 8003b00:	1949      	addeq	r1, r1, r5
 8003b02:	6021      	streq	r1, [r4, #0]
 8003b04:	e7ed      	b.n	8003ae2 <_free_r+0x22>
 8003b06:	461a      	mov	r2, r3
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	b10b      	cbz	r3, 8003b10 <_free_r+0x50>
 8003b0c:	42a3      	cmp	r3, r4
 8003b0e:	d9fa      	bls.n	8003b06 <_free_r+0x46>
 8003b10:	6811      	ldr	r1, [r2, #0]
 8003b12:	1855      	adds	r5, r2, r1
 8003b14:	42a5      	cmp	r5, r4
 8003b16:	d10b      	bne.n	8003b30 <_free_r+0x70>
 8003b18:	6824      	ldr	r4, [r4, #0]
 8003b1a:	4421      	add	r1, r4
 8003b1c:	1854      	adds	r4, r2, r1
 8003b1e:	42a3      	cmp	r3, r4
 8003b20:	6011      	str	r1, [r2, #0]
 8003b22:	d1e0      	bne.n	8003ae6 <_free_r+0x26>
 8003b24:	681c      	ldr	r4, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	6053      	str	r3, [r2, #4]
 8003b2a:	4421      	add	r1, r4
 8003b2c:	6011      	str	r1, [r2, #0]
 8003b2e:	e7da      	b.n	8003ae6 <_free_r+0x26>
 8003b30:	d902      	bls.n	8003b38 <_free_r+0x78>
 8003b32:	230c      	movs	r3, #12
 8003b34:	6003      	str	r3, [r0, #0]
 8003b36:	e7d6      	b.n	8003ae6 <_free_r+0x26>
 8003b38:	6825      	ldr	r5, [r4, #0]
 8003b3a:	1961      	adds	r1, r4, r5
 8003b3c:	428b      	cmp	r3, r1
 8003b3e:	bf04      	itt	eq
 8003b40:	6819      	ldreq	r1, [r3, #0]
 8003b42:	685b      	ldreq	r3, [r3, #4]
 8003b44:	6063      	str	r3, [r4, #4]
 8003b46:	bf04      	itt	eq
 8003b48:	1949      	addeq	r1, r1, r5
 8003b4a:	6021      	streq	r1, [r4, #0]
 8003b4c:	6054      	str	r4, [r2, #4]
 8003b4e:	e7ca      	b.n	8003ae6 <_free_r+0x26>
 8003b50:	b003      	add	sp, #12
 8003b52:	bd30      	pop	{r4, r5, pc}
 8003b54:	2000016c 	.word	0x2000016c

08003b58 <sbrk_aligned>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	4e0e      	ldr	r6, [pc, #56]	; (8003b94 <sbrk_aligned+0x3c>)
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	6831      	ldr	r1, [r6, #0]
 8003b60:	4605      	mov	r5, r0
 8003b62:	b911      	cbnz	r1, 8003b6a <sbrk_aligned+0x12>
 8003b64:	f000 f88c 	bl	8003c80 <_sbrk_r>
 8003b68:	6030      	str	r0, [r6, #0]
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	f000 f887 	bl	8003c80 <_sbrk_r>
 8003b72:	1c43      	adds	r3, r0, #1
 8003b74:	d00a      	beq.n	8003b8c <sbrk_aligned+0x34>
 8003b76:	1cc4      	adds	r4, r0, #3
 8003b78:	f024 0403 	bic.w	r4, r4, #3
 8003b7c:	42a0      	cmp	r0, r4
 8003b7e:	d007      	beq.n	8003b90 <sbrk_aligned+0x38>
 8003b80:	1a21      	subs	r1, r4, r0
 8003b82:	4628      	mov	r0, r5
 8003b84:	f000 f87c 	bl	8003c80 <_sbrk_r>
 8003b88:	3001      	adds	r0, #1
 8003b8a:	d101      	bne.n	8003b90 <sbrk_aligned+0x38>
 8003b8c:	f04f 34ff 	mov.w	r4, #4294967295
 8003b90:	4620      	mov	r0, r4
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
 8003b94:	20000170 	.word	0x20000170

08003b98 <_malloc_r>:
 8003b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b9c:	1ccd      	adds	r5, r1, #3
 8003b9e:	f025 0503 	bic.w	r5, r5, #3
 8003ba2:	3508      	adds	r5, #8
 8003ba4:	2d0c      	cmp	r5, #12
 8003ba6:	bf38      	it	cc
 8003ba8:	250c      	movcc	r5, #12
 8003baa:	2d00      	cmp	r5, #0
 8003bac:	4607      	mov	r7, r0
 8003bae:	db01      	blt.n	8003bb4 <_malloc_r+0x1c>
 8003bb0:	42a9      	cmp	r1, r5
 8003bb2:	d905      	bls.n	8003bc0 <_malloc_r+0x28>
 8003bb4:	230c      	movs	r3, #12
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	2600      	movs	r6, #0
 8003bba:	4630      	mov	r0, r6
 8003bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bc0:	4e2e      	ldr	r6, [pc, #184]	; (8003c7c <_malloc_r+0xe4>)
 8003bc2:	f000 f8a1 	bl	8003d08 <__malloc_lock>
 8003bc6:	6833      	ldr	r3, [r6, #0]
 8003bc8:	461c      	mov	r4, r3
 8003bca:	bb34      	cbnz	r4, 8003c1a <_malloc_r+0x82>
 8003bcc:	4629      	mov	r1, r5
 8003bce:	4638      	mov	r0, r7
 8003bd0:	f7ff ffc2 	bl	8003b58 <sbrk_aligned>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	d14d      	bne.n	8003c76 <_malloc_r+0xde>
 8003bda:	6834      	ldr	r4, [r6, #0]
 8003bdc:	4626      	mov	r6, r4
 8003bde:	2e00      	cmp	r6, #0
 8003be0:	d140      	bne.n	8003c64 <_malloc_r+0xcc>
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	4631      	mov	r1, r6
 8003be6:	4638      	mov	r0, r7
 8003be8:	eb04 0803 	add.w	r8, r4, r3
 8003bec:	f000 f848 	bl	8003c80 <_sbrk_r>
 8003bf0:	4580      	cmp	r8, r0
 8003bf2:	d13a      	bne.n	8003c6a <_malloc_r+0xd2>
 8003bf4:	6821      	ldr	r1, [r4, #0]
 8003bf6:	3503      	adds	r5, #3
 8003bf8:	1a6d      	subs	r5, r5, r1
 8003bfa:	f025 0503 	bic.w	r5, r5, #3
 8003bfe:	3508      	adds	r5, #8
 8003c00:	2d0c      	cmp	r5, #12
 8003c02:	bf38      	it	cc
 8003c04:	250c      	movcc	r5, #12
 8003c06:	4629      	mov	r1, r5
 8003c08:	4638      	mov	r0, r7
 8003c0a:	f7ff ffa5 	bl	8003b58 <sbrk_aligned>
 8003c0e:	3001      	adds	r0, #1
 8003c10:	d02b      	beq.n	8003c6a <_malloc_r+0xd2>
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	442b      	add	r3, r5
 8003c16:	6023      	str	r3, [r4, #0]
 8003c18:	e00e      	b.n	8003c38 <_malloc_r+0xa0>
 8003c1a:	6822      	ldr	r2, [r4, #0]
 8003c1c:	1b52      	subs	r2, r2, r5
 8003c1e:	d41e      	bmi.n	8003c5e <_malloc_r+0xc6>
 8003c20:	2a0b      	cmp	r2, #11
 8003c22:	d916      	bls.n	8003c52 <_malloc_r+0xba>
 8003c24:	1961      	adds	r1, r4, r5
 8003c26:	42a3      	cmp	r3, r4
 8003c28:	6025      	str	r5, [r4, #0]
 8003c2a:	bf18      	it	ne
 8003c2c:	6059      	strne	r1, [r3, #4]
 8003c2e:	6863      	ldr	r3, [r4, #4]
 8003c30:	bf08      	it	eq
 8003c32:	6031      	streq	r1, [r6, #0]
 8003c34:	5162      	str	r2, [r4, r5]
 8003c36:	604b      	str	r3, [r1, #4]
 8003c38:	4638      	mov	r0, r7
 8003c3a:	f104 060b 	add.w	r6, r4, #11
 8003c3e:	f000 f869 	bl	8003d14 <__malloc_unlock>
 8003c42:	f026 0607 	bic.w	r6, r6, #7
 8003c46:	1d23      	adds	r3, r4, #4
 8003c48:	1af2      	subs	r2, r6, r3
 8003c4a:	d0b6      	beq.n	8003bba <_malloc_r+0x22>
 8003c4c:	1b9b      	subs	r3, r3, r6
 8003c4e:	50a3      	str	r3, [r4, r2]
 8003c50:	e7b3      	b.n	8003bba <_malloc_r+0x22>
 8003c52:	6862      	ldr	r2, [r4, #4]
 8003c54:	42a3      	cmp	r3, r4
 8003c56:	bf0c      	ite	eq
 8003c58:	6032      	streq	r2, [r6, #0]
 8003c5a:	605a      	strne	r2, [r3, #4]
 8003c5c:	e7ec      	b.n	8003c38 <_malloc_r+0xa0>
 8003c5e:	4623      	mov	r3, r4
 8003c60:	6864      	ldr	r4, [r4, #4]
 8003c62:	e7b2      	b.n	8003bca <_malloc_r+0x32>
 8003c64:	4634      	mov	r4, r6
 8003c66:	6876      	ldr	r6, [r6, #4]
 8003c68:	e7b9      	b.n	8003bde <_malloc_r+0x46>
 8003c6a:	230c      	movs	r3, #12
 8003c6c:	603b      	str	r3, [r7, #0]
 8003c6e:	4638      	mov	r0, r7
 8003c70:	f000 f850 	bl	8003d14 <__malloc_unlock>
 8003c74:	e7a1      	b.n	8003bba <_malloc_r+0x22>
 8003c76:	6025      	str	r5, [r4, #0]
 8003c78:	e7de      	b.n	8003c38 <_malloc_r+0xa0>
 8003c7a:	bf00      	nop
 8003c7c:	2000016c 	.word	0x2000016c

08003c80 <_sbrk_r>:
 8003c80:	b538      	push	{r3, r4, r5, lr}
 8003c82:	4d06      	ldr	r5, [pc, #24]	; (8003c9c <_sbrk_r+0x1c>)
 8003c84:	2300      	movs	r3, #0
 8003c86:	4604      	mov	r4, r0
 8003c88:	4608      	mov	r0, r1
 8003c8a:	602b      	str	r3, [r5, #0]
 8003c8c:	f7fd fda0 	bl	80017d0 <_sbrk>
 8003c90:	1c43      	adds	r3, r0, #1
 8003c92:	d102      	bne.n	8003c9a <_sbrk_r+0x1a>
 8003c94:	682b      	ldr	r3, [r5, #0]
 8003c96:	b103      	cbz	r3, 8003c9a <_sbrk_r+0x1a>
 8003c98:	6023      	str	r3, [r4, #0]
 8003c9a:	bd38      	pop	{r3, r4, r5, pc}
 8003c9c:	20000174 	.word	0x20000174

08003ca0 <siprintf>:
 8003ca0:	b40e      	push	{r1, r2, r3}
 8003ca2:	b500      	push	{lr}
 8003ca4:	b09c      	sub	sp, #112	; 0x70
 8003ca6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ca8:	9002      	str	r0, [sp, #8]
 8003caa:	9006      	str	r0, [sp, #24]
 8003cac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cb0:	4809      	ldr	r0, [pc, #36]	; (8003cd8 <siprintf+0x38>)
 8003cb2:	9107      	str	r1, [sp, #28]
 8003cb4:	9104      	str	r1, [sp, #16]
 8003cb6:	4909      	ldr	r1, [pc, #36]	; (8003cdc <siprintf+0x3c>)
 8003cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cbc:	9105      	str	r1, [sp, #20]
 8003cbe:	6800      	ldr	r0, [r0, #0]
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	a902      	add	r1, sp, #8
 8003cc4:	f000 f888 	bl	8003dd8 <_svfiprintf_r>
 8003cc8:	9b02      	ldr	r3, [sp, #8]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
 8003cce:	b01c      	add	sp, #112	; 0x70
 8003cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cd4:	b003      	add	sp, #12
 8003cd6:	4770      	bx	lr
 8003cd8:	2000000c 	.word	0x2000000c
 8003cdc:	ffff0208 	.word	0xffff0208

08003ce0 <strncpy>:
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	3901      	subs	r1, #1
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	b132      	cbz	r2, 8003cf6 <strncpy+0x16>
 8003ce8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003cec:	f803 4b01 	strb.w	r4, [r3], #1
 8003cf0:	3a01      	subs	r2, #1
 8003cf2:	2c00      	cmp	r4, #0
 8003cf4:	d1f7      	bne.n	8003ce6 <strncpy+0x6>
 8003cf6:	441a      	add	r2, r3
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d100      	bne.n	8003d00 <strncpy+0x20>
 8003cfe:	bd10      	pop	{r4, pc}
 8003d00:	f803 1b01 	strb.w	r1, [r3], #1
 8003d04:	e7f9      	b.n	8003cfa <strncpy+0x1a>
	...

08003d08 <__malloc_lock>:
 8003d08:	4801      	ldr	r0, [pc, #4]	; (8003d10 <__malloc_lock+0x8>)
 8003d0a:	f000 baf9 	b.w	8004300 <__retarget_lock_acquire_recursive>
 8003d0e:	bf00      	nop
 8003d10:	20000178 	.word	0x20000178

08003d14 <__malloc_unlock>:
 8003d14:	4801      	ldr	r0, [pc, #4]	; (8003d1c <__malloc_unlock+0x8>)
 8003d16:	f000 baf4 	b.w	8004302 <__retarget_lock_release_recursive>
 8003d1a:	bf00      	nop
 8003d1c:	20000178 	.word	0x20000178

08003d20 <__ssputs_r>:
 8003d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d24:	688e      	ldr	r6, [r1, #8]
 8003d26:	429e      	cmp	r6, r3
 8003d28:	4682      	mov	sl, r0
 8003d2a:	460c      	mov	r4, r1
 8003d2c:	4690      	mov	r8, r2
 8003d2e:	461f      	mov	r7, r3
 8003d30:	d838      	bhi.n	8003da4 <__ssputs_r+0x84>
 8003d32:	898a      	ldrh	r2, [r1, #12]
 8003d34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d38:	d032      	beq.n	8003da0 <__ssputs_r+0x80>
 8003d3a:	6825      	ldr	r5, [r4, #0]
 8003d3c:	6909      	ldr	r1, [r1, #16]
 8003d3e:	eba5 0901 	sub.w	r9, r5, r1
 8003d42:	6965      	ldr	r5, [r4, #20]
 8003d44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	444b      	add	r3, r9
 8003d50:	106d      	asrs	r5, r5, #1
 8003d52:	429d      	cmp	r5, r3
 8003d54:	bf38      	it	cc
 8003d56:	461d      	movcc	r5, r3
 8003d58:	0553      	lsls	r3, r2, #21
 8003d5a:	d531      	bpl.n	8003dc0 <__ssputs_r+0xa0>
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	f7ff ff1b 	bl	8003b98 <_malloc_r>
 8003d62:	4606      	mov	r6, r0
 8003d64:	b950      	cbnz	r0, 8003d7c <__ssputs_r+0x5c>
 8003d66:	230c      	movs	r3, #12
 8003d68:	f8ca 3000 	str.w	r3, [sl]
 8003d6c:	89a3      	ldrh	r3, [r4, #12]
 8003d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d72:	81a3      	strh	r3, [r4, #12]
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295
 8003d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7c:	6921      	ldr	r1, [r4, #16]
 8003d7e:	464a      	mov	r2, r9
 8003d80:	f000 fac0 	bl	8004304 <memcpy>
 8003d84:	89a3      	ldrh	r3, [r4, #12]
 8003d86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d8e:	81a3      	strh	r3, [r4, #12]
 8003d90:	6126      	str	r6, [r4, #16]
 8003d92:	6165      	str	r5, [r4, #20]
 8003d94:	444e      	add	r6, r9
 8003d96:	eba5 0509 	sub.w	r5, r5, r9
 8003d9a:	6026      	str	r6, [r4, #0]
 8003d9c:	60a5      	str	r5, [r4, #8]
 8003d9e:	463e      	mov	r6, r7
 8003da0:	42be      	cmp	r6, r7
 8003da2:	d900      	bls.n	8003da6 <__ssputs_r+0x86>
 8003da4:	463e      	mov	r6, r7
 8003da6:	6820      	ldr	r0, [r4, #0]
 8003da8:	4632      	mov	r2, r6
 8003daa:	4641      	mov	r1, r8
 8003dac:	f000 fab8 	bl	8004320 <memmove>
 8003db0:	68a3      	ldr	r3, [r4, #8]
 8003db2:	1b9b      	subs	r3, r3, r6
 8003db4:	60a3      	str	r3, [r4, #8]
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	4433      	add	r3, r6
 8003dba:	6023      	str	r3, [r4, #0]
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	e7db      	b.n	8003d78 <__ssputs_r+0x58>
 8003dc0:	462a      	mov	r2, r5
 8003dc2:	f000 fac7 	bl	8004354 <_realloc_r>
 8003dc6:	4606      	mov	r6, r0
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d1e1      	bne.n	8003d90 <__ssputs_r+0x70>
 8003dcc:	6921      	ldr	r1, [r4, #16]
 8003dce:	4650      	mov	r0, sl
 8003dd0:	f7ff fe76 	bl	8003ac0 <_free_r>
 8003dd4:	e7c7      	b.n	8003d66 <__ssputs_r+0x46>
	...

08003dd8 <_svfiprintf_r>:
 8003dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ddc:	4698      	mov	r8, r3
 8003dde:	898b      	ldrh	r3, [r1, #12]
 8003de0:	061b      	lsls	r3, r3, #24
 8003de2:	b09d      	sub	sp, #116	; 0x74
 8003de4:	4607      	mov	r7, r0
 8003de6:	460d      	mov	r5, r1
 8003de8:	4614      	mov	r4, r2
 8003dea:	d50e      	bpl.n	8003e0a <_svfiprintf_r+0x32>
 8003dec:	690b      	ldr	r3, [r1, #16]
 8003dee:	b963      	cbnz	r3, 8003e0a <_svfiprintf_r+0x32>
 8003df0:	2140      	movs	r1, #64	; 0x40
 8003df2:	f7ff fed1 	bl	8003b98 <_malloc_r>
 8003df6:	6028      	str	r0, [r5, #0]
 8003df8:	6128      	str	r0, [r5, #16]
 8003dfa:	b920      	cbnz	r0, 8003e06 <_svfiprintf_r+0x2e>
 8003dfc:	230c      	movs	r3, #12
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	f04f 30ff 	mov.w	r0, #4294967295
 8003e04:	e0d1      	b.n	8003faa <_svfiprintf_r+0x1d2>
 8003e06:	2340      	movs	r3, #64	; 0x40
 8003e08:	616b      	str	r3, [r5, #20]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e0e:	2320      	movs	r3, #32
 8003e10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e18:	2330      	movs	r3, #48	; 0x30
 8003e1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003fc4 <_svfiprintf_r+0x1ec>
 8003e1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e22:	f04f 0901 	mov.w	r9, #1
 8003e26:	4623      	mov	r3, r4
 8003e28:	469a      	mov	sl, r3
 8003e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e2e:	b10a      	cbz	r2, 8003e34 <_svfiprintf_r+0x5c>
 8003e30:	2a25      	cmp	r2, #37	; 0x25
 8003e32:	d1f9      	bne.n	8003e28 <_svfiprintf_r+0x50>
 8003e34:	ebba 0b04 	subs.w	fp, sl, r4
 8003e38:	d00b      	beq.n	8003e52 <_svfiprintf_r+0x7a>
 8003e3a:	465b      	mov	r3, fp
 8003e3c:	4622      	mov	r2, r4
 8003e3e:	4629      	mov	r1, r5
 8003e40:	4638      	mov	r0, r7
 8003e42:	f7ff ff6d 	bl	8003d20 <__ssputs_r>
 8003e46:	3001      	adds	r0, #1
 8003e48:	f000 80aa 	beq.w	8003fa0 <_svfiprintf_r+0x1c8>
 8003e4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e4e:	445a      	add	r2, fp
 8003e50:	9209      	str	r2, [sp, #36]	; 0x24
 8003e52:	f89a 3000 	ldrb.w	r3, [sl]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 80a2 	beq.w	8003fa0 <_svfiprintf_r+0x1c8>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e66:	f10a 0a01 	add.w	sl, sl, #1
 8003e6a:	9304      	str	r3, [sp, #16]
 8003e6c:	9307      	str	r3, [sp, #28]
 8003e6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e72:	931a      	str	r3, [sp, #104]	; 0x68
 8003e74:	4654      	mov	r4, sl
 8003e76:	2205      	movs	r2, #5
 8003e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e7c:	4851      	ldr	r0, [pc, #324]	; (8003fc4 <_svfiprintf_r+0x1ec>)
 8003e7e:	f7fc f9b7 	bl	80001f0 <memchr>
 8003e82:	9a04      	ldr	r2, [sp, #16]
 8003e84:	b9d8      	cbnz	r0, 8003ebe <_svfiprintf_r+0xe6>
 8003e86:	06d0      	lsls	r0, r2, #27
 8003e88:	bf44      	itt	mi
 8003e8a:	2320      	movmi	r3, #32
 8003e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e90:	0711      	lsls	r1, r2, #28
 8003e92:	bf44      	itt	mi
 8003e94:	232b      	movmi	r3, #43	; 0x2b
 8003e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8003ea0:	d015      	beq.n	8003ece <_svfiprintf_r+0xf6>
 8003ea2:	9a07      	ldr	r2, [sp, #28]
 8003ea4:	4654      	mov	r4, sl
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	f04f 0c0a 	mov.w	ip, #10
 8003eac:	4621      	mov	r1, r4
 8003eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eb2:	3b30      	subs	r3, #48	; 0x30
 8003eb4:	2b09      	cmp	r3, #9
 8003eb6:	d94e      	bls.n	8003f56 <_svfiprintf_r+0x17e>
 8003eb8:	b1b0      	cbz	r0, 8003ee8 <_svfiprintf_r+0x110>
 8003eba:	9207      	str	r2, [sp, #28]
 8003ebc:	e014      	b.n	8003ee8 <_svfiprintf_r+0x110>
 8003ebe:	eba0 0308 	sub.w	r3, r0, r8
 8003ec2:	fa09 f303 	lsl.w	r3, r9, r3
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	9304      	str	r3, [sp, #16]
 8003eca:	46a2      	mov	sl, r4
 8003ecc:	e7d2      	b.n	8003e74 <_svfiprintf_r+0x9c>
 8003ece:	9b03      	ldr	r3, [sp, #12]
 8003ed0:	1d19      	adds	r1, r3, #4
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	9103      	str	r1, [sp, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bfbb      	ittet	lt
 8003eda:	425b      	neglt	r3, r3
 8003edc:	f042 0202 	orrlt.w	r2, r2, #2
 8003ee0:	9307      	strge	r3, [sp, #28]
 8003ee2:	9307      	strlt	r3, [sp, #28]
 8003ee4:	bfb8      	it	lt
 8003ee6:	9204      	strlt	r2, [sp, #16]
 8003ee8:	7823      	ldrb	r3, [r4, #0]
 8003eea:	2b2e      	cmp	r3, #46	; 0x2e
 8003eec:	d10c      	bne.n	8003f08 <_svfiprintf_r+0x130>
 8003eee:	7863      	ldrb	r3, [r4, #1]
 8003ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef2:	d135      	bne.n	8003f60 <_svfiprintf_r+0x188>
 8003ef4:	9b03      	ldr	r3, [sp, #12]
 8003ef6:	1d1a      	adds	r2, r3, #4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	9203      	str	r2, [sp, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bfb8      	it	lt
 8003f00:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f04:	3402      	adds	r4, #2
 8003f06:	9305      	str	r3, [sp, #20]
 8003f08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fd4 <_svfiprintf_r+0x1fc>
 8003f0c:	7821      	ldrb	r1, [r4, #0]
 8003f0e:	2203      	movs	r2, #3
 8003f10:	4650      	mov	r0, sl
 8003f12:	f7fc f96d 	bl	80001f0 <memchr>
 8003f16:	b140      	cbz	r0, 8003f2a <_svfiprintf_r+0x152>
 8003f18:	2340      	movs	r3, #64	; 0x40
 8003f1a:	eba0 000a 	sub.w	r0, r0, sl
 8003f1e:	fa03 f000 	lsl.w	r0, r3, r0
 8003f22:	9b04      	ldr	r3, [sp, #16]
 8003f24:	4303      	orrs	r3, r0
 8003f26:	3401      	adds	r4, #1
 8003f28:	9304      	str	r3, [sp, #16]
 8003f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f2e:	4826      	ldr	r0, [pc, #152]	; (8003fc8 <_svfiprintf_r+0x1f0>)
 8003f30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f34:	2206      	movs	r2, #6
 8003f36:	f7fc f95b 	bl	80001f0 <memchr>
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	d038      	beq.n	8003fb0 <_svfiprintf_r+0x1d8>
 8003f3e:	4b23      	ldr	r3, [pc, #140]	; (8003fcc <_svfiprintf_r+0x1f4>)
 8003f40:	bb1b      	cbnz	r3, 8003f8a <_svfiprintf_r+0x1b2>
 8003f42:	9b03      	ldr	r3, [sp, #12]
 8003f44:	3307      	adds	r3, #7
 8003f46:	f023 0307 	bic.w	r3, r3, #7
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	9303      	str	r3, [sp, #12]
 8003f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f50:	4433      	add	r3, r6
 8003f52:	9309      	str	r3, [sp, #36]	; 0x24
 8003f54:	e767      	b.n	8003e26 <_svfiprintf_r+0x4e>
 8003f56:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	e7a5      	b.n	8003eac <_svfiprintf_r+0xd4>
 8003f60:	2300      	movs	r3, #0
 8003f62:	3401      	adds	r4, #1
 8003f64:	9305      	str	r3, [sp, #20]
 8003f66:	4619      	mov	r1, r3
 8003f68:	f04f 0c0a 	mov.w	ip, #10
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f72:	3a30      	subs	r2, #48	; 0x30
 8003f74:	2a09      	cmp	r2, #9
 8003f76:	d903      	bls.n	8003f80 <_svfiprintf_r+0x1a8>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0c5      	beq.n	8003f08 <_svfiprintf_r+0x130>
 8003f7c:	9105      	str	r1, [sp, #20]
 8003f7e:	e7c3      	b.n	8003f08 <_svfiprintf_r+0x130>
 8003f80:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f84:	4604      	mov	r4, r0
 8003f86:	2301      	movs	r3, #1
 8003f88:	e7f0      	b.n	8003f6c <_svfiprintf_r+0x194>
 8003f8a:	ab03      	add	r3, sp, #12
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	462a      	mov	r2, r5
 8003f90:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <_svfiprintf_r+0x1f8>)
 8003f92:	a904      	add	r1, sp, #16
 8003f94:	4638      	mov	r0, r7
 8003f96:	f3af 8000 	nop.w
 8003f9a:	1c42      	adds	r2, r0, #1
 8003f9c:	4606      	mov	r6, r0
 8003f9e:	d1d6      	bne.n	8003f4e <_svfiprintf_r+0x176>
 8003fa0:	89ab      	ldrh	r3, [r5, #12]
 8003fa2:	065b      	lsls	r3, r3, #25
 8003fa4:	f53f af2c 	bmi.w	8003e00 <_svfiprintf_r+0x28>
 8003fa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003faa:	b01d      	add	sp, #116	; 0x74
 8003fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb0:	ab03      	add	r3, sp, #12
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	462a      	mov	r2, r5
 8003fb6:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <_svfiprintf_r+0x1f8>)
 8003fb8:	a904      	add	r1, sp, #16
 8003fba:	4638      	mov	r0, r7
 8003fbc:	f000 f87a 	bl	80040b4 <_printf_i>
 8003fc0:	e7eb      	b.n	8003f9a <_svfiprintf_r+0x1c2>
 8003fc2:	bf00      	nop
 8003fc4:	08004448 	.word	0x08004448
 8003fc8:	08004452 	.word	0x08004452
 8003fcc:	00000000 	.word	0x00000000
 8003fd0:	08003d21 	.word	0x08003d21
 8003fd4:	0800444e 	.word	0x0800444e

08003fd8 <_printf_common>:
 8003fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fdc:	4616      	mov	r6, r2
 8003fde:	4699      	mov	r9, r3
 8003fe0:	688a      	ldr	r2, [r1, #8]
 8003fe2:	690b      	ldr	r3, [r1, #16]
 8003fe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	bfb8      	it	lt
 8003fec:	4613      	movlt	r3, r2
 8003fee:	6033      	str	r3, [r6, #0]
 8003ff0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ff4:	4607      	mov	r7, r0
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	b10a      	cbz	r2, 8003ffe <_printf_common+0x26>
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	6033      	str	r3, [r6, #0]
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	0699      	lsls	r1, r3, #26
 8004002:	bf42      	ittt	mi
 8004004:	6833      	ldrmi	r3, [r6, #0]
 8004006:	3302      	addmi	r3, #2
 8004008:	6033      	strmi	r3, [r6, #0]
 800400a:	6825      	ldr	r5, [r4, #0]
 800400c:	f015 0506 	ands.w	r5, r5, #6
 8004010:	d106      	bne.n	8004020 <_printf_common+0x48>
 8004012:	f104 0a19 	add.w	sl, r4, #25
 8004016:	68e3      	ldr	r3, [r4, #12]
 8004018:	6832      	ldr	r2, [r6, #0]
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	42ab      	cmp	r3, r5
 800401e:	dc26      	bgt.n	800406e <_printf_common+0x96>
 8004020:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004024:	1e13      	subs	r3, r2, #0
 8004026:	6822      	ldr	r2, [r4, #0]
 8004028:	bf18      	it	ne
 800402a:	2301      	movne	r3, #1
 800402c:	0692      	lsls	r2, r2, #26
 800402e:	d42b      	bmi.n	8004088 <_printf_common+0xb0>
 8004030:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004034:	4649      	mov	r1, r9
 8004036:	4638      	mov	r0, r7
 8004038:	47c0      	blx	r8
 800403a:	3001      	adds	r0, #1
 800403c:	d01e      	beq.n	800407c <_printf_common+0xa4>
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	68e5      	ldr	r5, [r4, #12]
 8004042:	6832      	ldr	r2, [r6, #0]
 8004044:	f003 0306 	and.w	r3, r3, #6
 8004048:	2b04      	cmp	r3, #4
 800404a:	bf08      	it	eq
 800404c:	1aad      	subeq	r5, r5, r2
 800404e:	68a3      	ldr	r3, [r4, #8]
 8004050:	6922      	ldr	r2, [r4, #16]
 8004052:	bf0c      	ite	eq
 8004054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004058:	2500      	movne	r5, #0
 800405a:	4293      	cmp	r3, r2
 800405c:	bfc4      	itt	gt
 800405e:	1a9b      	subgt	r3, r3, r2
 8004060:	18ed      	addgt	r5, r5, r3
 8004062:	2600      	movs	r6, #0
 8004064:	341a      	adds	r4, #26
 8004066:	42b5      	cmp	r5, r6
 8004068:	d11a      	bne.n	80040a0 <_printf_common+0xc8>
 800406a:	2000      	movs	r0, #0
 800406c:	e008      	b.n	8004080 <_printf_common+0xa8>
 800406e:	2301      	movs	r3, #1
 8004070:	4652      	mov	r2, sl
 8004072:	4649      	mov	r1, r9
 8004074:	4638      	mov	r0, r7
 8004076:	47c0      	blx	r8
 8004078:	3001      	adds	r0, #1
 800407a:	d103      	bne.n	8004084 <_printf_common+0xac>
 800407c:	f04f 30ff 	mov.w	r0, #4294967295
 8004080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004084:	3501      	adds	r5, #1
 8004086:	e7c6      	b.n	8004016 <_printf_common+0x3e>
 8004088:	18e1      	adds	r1, r4, r3
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	2030      	movs	r0, #48	; 0x30
 800408e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004092:	4422      	add	r2, r4
 8004094:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004098:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800409c:	3302      	adds	r3, #2
 800409e:	e7c7      	b.n	8004030 <_printf_common+0x58>
 80040a0:	2301      	movs	r3, #1
 80040a2:	4622      	mov	r2, r4
 80040a4:	4649      	mov	r1, r9
 80040a6:	4638      	mov	r0, r7
 80040a8:	47c0      	blx	r8
 80040aa:	3001      	adds	r0, #1
 80040ac:	d0e6      	beq.n	800407c <_printf_common+0xa4>
 80040ae:	3601      	adds	r6, #1
 80040b0:	e7d9      	b.n	8004066 <_printf_common+0x8e>
	...

080040b4 <_printf_i>:
 80040b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040b8:	7e0f      	ldrb	r7, [r1, #24]
 80040ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040bc:	2f78      	cmp	r7, #120	; 0x78
 80040be:	4691      	mov	r9, r2
 80040c0:	4680      	mov	r8, r0
 80040c2:	460c      	mov	r4, r1
 80040c4:	469a      	mov	sl, r3
 80040c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040ca:	d807      	bhi.n	80040dc <_printf_i+0x28>
 80040cc:	2f62      	cmp	r7, #98	; 0x62
 80040ce:	d80a      	bhi.n	80040e6 <_printf_i+0x32>
 80040d0:	2f00      	cmp	r7, #0
 80040d2:	f000 80d8 	beq.w	8004286 <_printf_i+0x1d2>
 80040d6:	2f58      	cmp	r7, #88	; 0x58
 80040d8:	f000 80a3 	beq.w	8004222 <_printf_i+0x16e>
 80040dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040e4:	e03a      	b.n	800415c <_printf_i+0xa8>
 80040e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040ea:	2b15      	cmp	r3, #21
 80040ec:	d8f6      	bhi.n	80040dc <_printf_i+0x28>
 80040ee:	a101      	add	r1, pc, #4	; (adr r1, 80040f4 <_printf_i+0x40>)
 80040f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040f4:	0800414d 	.word	0x0800414d
 80040f8:	08004161 	.word	0x08004161
 80040fc:	080040dd 	.word	0x080040dd
 8004100:	080040dd 	.word	0x080040dd
 8004104:	080040dd 	.word	0x080040dd
 8004108:	080040dd 	.word	0x080040dd
 800410c:	08004161 	.word	0x08004161
 8004110:	080040dd 	.word	0x080040dd
 8004114:	080040dd 	.word	0x080040dd
 8004118:	080040dd 	.word	0x080040dd
 800411c:	080040dd 	.word	0x080040dd
 8004120:	0800426d 	.word	0x0800426d
 8004124:	08004191 	.word	0x08004191
 8004128:	0800424f 	.word	0x0800424f
 800412c:	080040dd 	.word	0x080040dd
 8004130:	080040dd 	.word	0x080040dd
 8004134:	0800428f 	.word	0x0800428f
 8004138:	080040dd 	.word	0x080040dd
 800413c:	08004191 	.word	0x08004191
 8004140:	080040dd 	.word	0x080040dd
 8004144:	080040dd 	.word	0x080040dd
 8004148:	08004257 	.word	0x08004257
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	1d1a      	adds	r2, r3, #4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	602a      	str	r2, [r5, #0]
 8004154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004158:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800415c:	2301      	movs	r3, #1
 800415e:	e0a3      	b.n	80042a8 <_printf_i+0x1f4>
 8004160:	6820      	ldr	r0, [r4, #0]
 8004162:	6829      	ldr	r1, [r5, #0]
 8004164:	0606      	lsls	r6, r0, #24
 8004166:	f101 0304 	add.w	r3, r1, #4
 800416a:	d50a      	bpl.n	8004182 <_printf_i+0xce>
 800416c:	680e      	ldr	r6, [r1, #0]
 800416e:	602b      	str	r3, [r5, #0]
 8004170:	2e00      	cmp	r6, #0
 8004172:	da03      	bge.n	800417c <_printf_i+0xc8>
 8004174:	232d      	movs	r3, #45	; 0x2d
 8004176:	4276      	negs	r6, r6
 8004178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800417c:	485e      	ldr	r0, [pc, #376]	; (80042f8 <_printf_i+0x244>)
 800417e:	230a      	movs	r3, #10
 8004180:	e019      	b.n	80041b6 <_printf_i+0x102>
 8004182:	680e      	ldr	r6, [r1, #0]
 8004184:	602b      	str	r3, [r5, #0]
 8004186:	f010 0f40 	tst.w	r0, #64	; 0x40
 800418a:	bf18      	it	ne
 800418c:	b236      	sxthne	r6, r6
 800418e:	e7ef      	b.n	8004170 <_printf_i+0xbc>
 8004190:	682b      	ldr	r3, [r5, #0]
 8004192:	6820      	ldr	r0, [r4, #0]
 8004194:	1d19      	adds	r1, r3, #4
 8004196:	6029      	str	r1, [r5, #0]
 8004198:	0601      	lsls	r1, r0, #24
 800419a:	d501      	bpl.n	80041a0 <_printf_i+0xec>
 800419c:	681e      	ldr	r6, [r3, #0]
 800419e:	e002      	b.n	80041a6 <_printf_i+0xf2>
 80041a0:	0646      	lsls	r6, r0, #25
 80041a2:	d5fb      	bpl.n	800419c <_printf_i+0xe8>
 80041a4:	881e      	ldrh	r6, [r3, #0]
 80041a6:	4854      	ldr	r0, [pc, #336]	; (80042f8 <_printf_i+0x244>)
 80041a8:	2f6f      	cmp	r7, #111	; 0x6f
 80041aa:	bf0c      	ite	eq
 80041ac:	2308      	moveq	r3, #8
 80041ae:	230a      	movne	r3, #10
 80041b0:	2100      	movs	r1, #0
 80041b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041b6:	6865      	ldr	r5, [r4, #4]
 80041b8:	60a5      	str	r5, [r4, #8]
 80041ba:	2d00      	cmp	r5, #0
 80041bc:	bfa2      	ittt	ge
 80041be:	6821      	ldrge	r1, [r4, #0]
 80041c0:	f021 0104 	bicge.w	r1, r1, #4
 80041c4:	6021      	strge	r1, [r4, #0]
 80041c6:	b90e      	cbnz	r6, 80041cc <_printf_i+0x118>
 80041c8:	2d00      	cmp	r5, #0
 80041ca:	d04d      	beq.n	8004268 <_printf_i+0x1b4>
 80041cc:	4615      	mov	r5, r2
 80041ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80041d2:	fb03 6711 	mls	r7, r3, r1, r6
 80041d6:	5dc7      	ldrb	r7, [r0, r7]
 80041d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041dc:	4637      	mov	r7, r6
 80041de:	42bb      	cmp	r3, r7
 80041e0:	460e      	mov	r6, r1
 80041e2:	d9f4      	bls.n	80041ce <_printf_i+0x11a>
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d10b      	bne.n	8004200 <_printf_i+0x14c>
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	07de      	lsls	r6, r3, #31
 80041ec:	d508      	bpl.n	8004200 <_printf_i+0x14c>
 80041ee:	6923      	ldr	r3, [r4, #16]
 80041f0:	6861      	ldr	r1, [r4, #4]
 80041f2:	4299      	cmp	r1, r3
 80041f4:	bfde      	ittt	le
 80041f6:	2330      	movle	r3, #48	; 0x30
 80041f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004200:	1b52      	subs	r2, r2, r5
 8004202:	6122      	str	r2, [r4, #16]
 8004204:	f8cd a000 	str.w	sl, [sp]
 8004208:	464b      	mov	r3, r9
 800420a:	aa03      	add	r2, sp, #12
 800420c:	4621      	mov	r1, r4
 800420e:	4640      	mov	r0, r8
 8004210:	f7ff fee2 	bl	8003fd8 <_printf_common>
 8004214:	3001      	adds	r0, #1
 8004216:	d14c      	bne.n	80042b2 <_printf_i+0x1fe>
 8004218:	f04f 30ff 	mov.w	r0, #4294967295
 800421c:	b004      	add	sp, #16
 800421e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004222:	4835      	ldr	r0, [pc, #212]	; (80042f8 <_printf_i+0x244>)
 8004224:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004228:	6829      	ldr	r1, [r5, #0]
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004230:	6029      	str	r1, [r5, #0]
 8004232:	061d      	lsls	r5, r3, #24
 8004234:	d514      	bpl.n	8004260 <_printf_i+0x1ac>
 8004236:	07df      	lsls	r7, r3, #31
 8004238:	bf44      	itt	mi
 800423a:	f043 0320 	orrmi.w	r3, r3, #32
 800423e:	6023      	strmi	r3, [r4, #0]
 8004240:	b91e      	cbnz	r6, 800424a <_printf_i+0x196>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	f023 0320 	bic.w	r3, r3, #32
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	2310      	movs	r3, #16
 800424c:	e7b0      	b.n	80041b0 <_printf_i+0xfc>
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	f043 0320 	orr.w	r3, r3, #32
 8004254:	6023      	str	r3, [r4, #0]
 8004256:	2378      	movs	r3, #120	; 0x78
 8004258:	4828      	ldr	r0, [pc, #160]	; (80042fc <_printf_i+0x248>)
 800425a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800425e:	e7e3      	b.n	8004228 <_printf_i+0x174>
 8004260:	0659      	lsls	r1, r3, #25
 8004262:	bf48      	it	mi
 8004264:	b2b6      	uxthmi	r6, r6
 8004266:	e7e6      	b.n	8004236 <_printf_i+0x182>
 8004268:	4615      	mov	r5, r2
 800426a:	e7bb      	b.n	80041e4 <_printf_i+0x130>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	6826      	ldr	r6, [r4, #0]
 8004270:	6961      	ldr	r1, [r4, #20]
 8004272:	1d18      	adds	r0, r3, #4
 8004274:	6028      	str	r0, [r5, #0]
 8004276:	0635      	lsls	r5, r6, #24
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	d501      	bpl.n	8004280 <_printf_i+0x1cc>
 800427c:	6019      	str	r1, [r3, #0]
 800427e:	e002      	b.n	8004286 <_printf_i+0x1d2>
 8004280:	0670      	lsls	r0, r6, #25
 8004282:	d5fb      	bpl.n	800427c <_printf_i+0x1c8>
 8004284:	8019      	strh	r1, [r3, #0]
 8004286:	2300      	movs	r3, #0
 8004288:	6123      	str	r3, [r4, #16]
 800428a:	4615      	mov	r5, r2
 800428c:	e7ba      	b.n	8004204 <_printf_i+0x150>
 800428e:	682b      	ldr	r3, [r5, #0]
 8004290:	1d1a      	adds	r2, r3, #4
 8004292:	602a      	str	r2, [r5, #0]
 8004294:	681d      	ldr	r5, [r3, #0]
 8004296:	6862      	ldr	r2, [r4, #4]
 8004298:	2100      	movs	r1, #0
 800429a:	4628      	mov	r0, r5
 800429c:	f7fb ffa8 	bl	80001f0 <memchr>
 80042a0:	b108      	cbz	r0, 80042a6 <_printf_i+0x1f2>
 80042a2:	1b40      	subs	r0, r0, r5
 80042a4:	6060      	str	r0, [r4, #4]
 80042a6:	6863      	ldr	r3, [r4, #4]
 80042a8:	6123      	str	r3, [r4, #16]
 80042aa:	2300      	movs	r3, #0
 80042ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042b0:	e7a8      	b.n	8004204 <_printf_i+0x150>
 80042b2:	6923      	ldr	r3, [r4, #16]
 80042b4:	462a      	mov	r2, r5
 80042b6:	4649      	mov	r1, r9
 80042b8:	4640      	mov	r0, r8
 80042ba:	47d0      	blx	sl
 80042bc:	3001      	adds	r0, #1
 80042be:	d0ab      	beq.n	8004218 <_printf_i+0x164>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	079b      	lsls	r3, r3, #30
 80042c4:	d413      	bmi.n	80042ee <_printf_i+0x23a>
 80042c6:	68e0      	ldr	r0, [r4, #12]
 80042c8:	9b03      	ldr	r3, [sp, #12]
 80042ca:	4298      	cmp	r0, r3
 80042cc:	bfb8      	it	lt
 80042ce:	4618      	movlt	r0, r3
 80042d0:	e7a4      	b.n	800421c <_printf_i+0x168>
 80042d2:	2301      	movs	r3, #1
 80042d4:	4632      	mov	r2, r6
 80042d6:	4649      	mov	r1, r9
 80042d8:	4640      	mov	r0, r8
 80042da:	47d0      	blx	sl
 80042dc:	3001      	adds	r0, #1
 80042de:	d09b      	beq.n	8004218 <_printf_i+0x164>
 80042e0:	3501      	adds	r5, #1
 80042e2:	68e3      	ldr	r3, [r4, #12]
 80042e4:	9903      	ldr	r1, [sp, #12]
 80042e6:	1a5b      	subs	r3, r3, r1
 80042e8:	42ab      	cmp	r3, r5
 80042ea:	dcf2      	bgt.n	80042d2 <_printf_i+0x21e>
 80042ec:	e7eb      	b.n	80042c6 <_printf_i+0x212>
 80042ee:	2500      	movs	r5, #0
 80042f0:	f104 0619 	add.w	r6, r4, #25
 80042f4:	e7f5      	b.n	80042e2 <_printf_i+0x22e>
 80042f6:	bf00      	nop
 80042f8:	08004459 	.word	0x08004459
 80042fc:	0800446a 	.word	0x0800446a

08004300 <__retarget_lock_acquire_recursive>:
 8004300:	4770      	bx	lr

08004302 <__retarget_lock_release_recursive>:
 8004302:	4770      	bx	lr

08004304 <memcpy>:
 8004304:	440a      	add	r2, r1
 8004306:	4291      	cmp	r1, r2
 8004308:	f100 33ff 	add.w	r3, r0, #4294967295
 800430c:	d100      	bne.n	8004310 <memcpy+0xc>
 800430e:	4770      	bx	lr
 8004310:	b510      	push	{r4, lr}
 8004312:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004316:	f803 4f01 	strb.w	r4, [r3, #1]!
 800431a:	4291      	cmp	r1, r2
 800431c:	d1f9      	bne.n	8004312 <memcpy+0xe>
 800431e:	bd10      	pop	{r4, pc}

08004320 <memmove>:
 8004320:	4288      	cmp	r0, r1
 8004322:	b510      	push	{r4, lr}
 8004324:	eb01 0402 	add.w	r4, r1, r2
 8004328:	d902      	bls.n	8004330 <memmove+0x10>
 800432a:	4284      	cmp	r4, r0
 800432c:	4623      	mov	r3, r4
 800432e:	d807      	bhi.n	8004340 <memmove+0x20>
 8004330:	1e43      	subs	r3, r0, #1
 8004332:	42a1      	cmp	r1, r4
 8004334:	d008      	beq.n	8004348 <memmove+0x28>
 8004336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800433a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800433e:	e7f8      	b.n	8004332 <memmove+0x12>
 8004340:	4402      	add	r2, r0
 8004342:	4601      	mov	r1, r0
 8004344:	428a      	cmp	r2, r1
 8004346:	d100      	bne.n	800434a <memmove+0x2a>
 8004348:	bd10      	pop	{r4, pc}
 800434a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800434e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004352:	e7f7      	b.n	8004344 <memmove+0x24>

08004354 <_realloc_r>:
 8004354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004358:	4680      	mov	r8, r0
 800435a:	4614      	mov	r4, r2
 800435c:	460e      	mov	r6, r1
 800435e:	b921      	cbnz	r1, 800436a <_realloc_r+0x16>
 8004360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004364:	4611      	mov	r1, r2
 8004366:	f7ff bc17 	b.w	8003b98 <_malloc_r>
 800436a:	b92a      	cbnz	r2, 8004378 <_realloc_r+0x24>
 800436c:	f7ff fba8 	bl	8003ac0 <_free_r>
 8004370:	4625      	mov	r5, r4
 8004372:	4628      	mov	r0, r5
 8004374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004378:	f000 f81b 	bl	80043b2 <_malloc_usable_size_r>
 800437c:	4284      	cmp	r4, r0
 800437e:	4607      	mov	r7, r0
 8004380:	d802      	bhi.n	8004388 <_realloc_r+0x34>
 8004382:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004386:	d812      	bhi.n	80043ae <_realloc_r+0x5a>
 8004388:	4621      	mov	r1, r4
 800438a:	4640      	mov	r0, r8
 800438c:	f7ff fc04 	bl	8003b98 <_malloc_r>
 8004390:	4605      	mov	r5, r0
 8004392:	2800      	cmp	r0, #0
 8004394:	d0ed      	beq.n	8004372 <_realloc_r+0x1e>
 8004396:	42bc      	cmp	r4, r7
 8004398:	4622      	mov	r2, r4
 800439a:	4631      	mov	r1, r6
 800439c:	bf28      	it	cs
 800439e:	463a      	movcs	r2, r7
 80043a0:	f7ff ffb0 	bl	8004304 <memcpy>
 80043a4:	4631      	mov	r1, r6
 80043a6:	4640      	mov	r0, r8
 80043a8:	f7ff fb8a 	bl	8003ac0 <_free_r>
 80043ac:	e7e1      	b.n	8004372 <_realloc_r+0x1e>
 80043ae:	4635      	mov	r5, r6
 80043b0:	e7df      	b.n	8004372 <_realloc_r+0x1e>

080043b2 <_malloc_usable_size_r>:
 80043b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043b6:	1f18      	subs	r0, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bfbc      	itt	lt
 80043bc:	580b      	ldrlt	r3, [r1, r0]
 80043be:	18c0      	addlt	r0, r0, r3
 80043c0:	4770      	bx	lr
	...

080043c4 <_init>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	bf00      	nop
 80043c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ca:	bc08      	pop	{r3}
 80043cc:	469e      	mov	lr, r3
 80043ce:	4770      	bx	lr

080043d0 <_fini>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	bf00      	nop
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr
